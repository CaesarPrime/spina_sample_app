{
    "info": [
      ["AbstractController", "", "classes/AbstractController.html", "", ""],
      ["AbstractController::ActionNotFound", "", "classes/AbstractController/ActionNotFound.html", "", "<p>Raised when a non-existing controller action is triggered.\n"],
      ["AbstractController::Base", "", "classes/AbstractController/Base.html", "", "<p>AbstractController::Base is a low-level API. Nobody should be using it\ndirectly, and subclasses (like …\n"],
      ["AbstractController::Caching", "", "classes/AbstractController/Caching.html", "", ""],
      ["AbstractController::Caching::ClassMethods", "", "classes/AbstractController/Caching/ClassMethods.html", "", ""],
      ["AbstractController::Caching::ConfigMethods", "", "classes/AbstractController/Caching/ConfigMethods.html", "", ""],
      ["AbstractController::Caching::Fragments", "", "classes/AbstractController/Caching/Fragments.html", "", "<p>Fragment caching is used for caching various blocks within views without\ncaching the entire action as …\n"],
      ["AbstractController::Caching::Fragments::ClassMethods", "", "classes/AbstractController/Caching/Fragments/ClassMethods.html", "", ""],
      ["AbstractController::Callbacks", "", "classes/AbstractController/Callbacks.html", "", ""],
      ["AbstractController::Callbacks::ClassMethods", "", "classes/AbstractController/Callbacks/ClassMethods.html", "", ""],
      ["AbstractController::Collector", "", "classes/AbstractController/Collector.html", "", ""],
      ["AbstractController::Collector::Mime", "", "classes/AbstractController/Collector/Mime.html", "", ""],
      ["AbstractController::DoubleRenderError", "", "classes/AbstractController/DoubleRenderError.html", "", ""],
      ["AbstractController::Helpers", "", "classes/AbstractController/Helpers.html", "", ""],
      ["AbstractController::Helpers::ClassMethods", "", "classes/AbstractController/Helpers/ClassMethods.html", "", ""],
      ["AbstractController::Helpers::MissingHelperError", "", "classes/AbstractController/Helpers/MissingHelperError.html", "", ""],
      ["AbstractController::Railties", "", "classes/AbstractController/Railties.html", "", ""],
      ["AbstractController::Railties::RoutesHelpers", "", "classes/AbstractController/Railties/RoutesHelpers.html", "", ""],
      ["AbstractController::Rendering", "", "classes/AbstractController/Rendering.html", "", ""],
      ["AbstractController::Translation", "", "classes/AbstractController/Translation.html", "", ""],
      ["AbstractController::UrlFor", "", "classes/AbstractController/UrlFor.html", "", "<p>Includes <code>url_for</code> into the host class (e.g. an abstract\ncontroller or mailer). The class has to provide …\n"],
      ["AbstractController::UrlFor::ClassMethods", "", "classes/AbstractController/UrlFor/ClassMethods.html", "", ""],
      ["ActionCable", "", "classes/ActionCable.html", "", ""],
      ["ActionCable::Channel", "", "classes/ActionCable/Channel.html", "", ""],
      ["ActionCable::Channel::Base", "", "classes/ActionCable/Channel/Base.html", "", "<p>The channel provides the basic structure of grouping behavior into logical\nunits when communicating over …\n"],
      ["ActionCable::Channel::Broadcasting", "", "classes/ActionCable/Channel/Broadcasting.html", "", ""],
      ["ActionCable::Channel::Callbacks", "", "classes/ActionCable/Channel/Callbacks.html", "", ""],
      ["ActionCable::Channel::Naming", "", "classes/ActionCable/Channel/Naming.html", "", ""],
      ["ActionCable::Channel::PeriodicTimers", "", "classes/ActionCable/Channel/PeriodicTimers.html", "", ""],
      ["ActionCable::Channel::PeriodicTimers::ClassMethods", "", "classes/ActionCable/Channel/PeriodicTimers/ClassMethods.html", "", ""],
      ["ActionCable::Channel::Streams", "", "classes/ActionCable/Channel/Streams.html", "", "<p>Streams allow channels to route broadcastings to the subscriber. A\nbroadcasting is, as discussed elsewhere, …\n"],
      ["ActionCable::Connection", "", "classes/ActionCable/Connection.html", "", ""],
      ["ActionCable::Connection::Authorization", "", "classes/ActionCable/Connection/Authorization.html", "", ""],
      ["ActionCable::Connection::Authorization::UnauthorizedError", "", "classes/ActionCable/Connection/Authorization/UnauthorizedError.html", "", ""],
      ["ActionCable::Connection::Base", "", "classes/ActionCable/Connection/Base.html", "", "<p>For every WebSocket connection the Action Cable server accepts, a\nConnection object will be instantiated. …\n"],
      ["ActionCable::Connection::Identification", "", "classes/ActionCable/Connection/Identification.html", "", ""],
      ["ActionCable::Connection::InternalChannel", "", "classes/ActionCable/Connection/InternalChannel.html", "", "<p>Makes it possible for the RemoteConnection to disconnect a specific\nconnection.\n"],
      ["ActionCable::Connection::StreamEventLoop", "", "classes/ActionCable/Connection/StreamEventLoop.html", "", ""],
      ["ActionCable::Connection::TaggedLoggerProxy", "", "classes/ActionCable/Connection/TaggedLoggerProxy.html", "", "<p>Allows the use of per-connection tags against the server logger. This\nwouldn&#39;t work using the traditional …\n"],
      ["ActionCable::Connection::WebSocket", "", "classes/ActionCable/Connection/WebSocket.html", "", "<p>Wrap the real socket to minimize the externally-presented API\n"],
      ["ActionCable::Engine", "", "classes/ActionCable/Engine.html", "", ""],
      ["ActionCable::Engine::ActiveSupport", "", "classes/ActionCable/Engine/ActiveSupport.html", "", ""],
      ["ActionCable::Helpers", "", "classes/ActionCable/Helpers.html", "", ""],
      ["ActionCable::Helpers::ActionCableHelper", "", "classes/ActionCable/Helpers/ActionCableHelper.html", "", ""],
      ["ActionCable::RemoteConnections", "", "classes/ActionCable/RemoteConnections.html", "", "<p>If you need to disconnect a given connection, you can go through the\nRemoteConnections. You can find …\n"],
      ["ActionCable::RemoteConnections::RemoteConnection", "", "classes/ActionCable/RemoteConnections/RemoteConnection.html", "", "<p>Represents a single remote connection found via\n<code>ActionCable.server.remote_connections.where(*)</code>. Exists …\n"],
      ["ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError", "", "classes/ActionCable/RemoteConnections/RemoteConnection/InvalidIdentifiersError.html", "", ""],
      ["ActionCable::Server", "", "classes/ActionCable/Server.html", "", ""],
      ["ActionCable::Server::Base", "", "classes/ActionCable/Server/Base.html", "", "<p>A singleton ActionCable::Server instance is available via\nActionCable.server. It&#39;s used by the Rack …\n"],
      ["ActionCable::Server::Broadcasting", "", "classes/ActionCable/Server/Broadcasting.html", "", "<p>Broadcasting is how other parts of your application can send messages to a\nchannel&#39;s subscribers. …\n"],
      ["ActionCable::Server::Broadcasting::Broadcaster", "", "classes/ActionCable/Server/Broadcasting/Broadcaster.html", "", ""],
      ["ActionCable::Server::Configuration", "", "classes/ActionCable/Server/Configuration.html", "", "<p>An instance of this configuration object is available via\nActionCable.server.config, which allows you …\n"],
      ["ActionCable::Server::Worker", "", "classes/ActionCable/Server/Worker.html", "", ""],
      ["ActionCable::Server::Worker::ActiveRecordConnectionManagement", "", "classes/ActionCable/Server/Worker/ActiveRecordConnectionManagement.html", "", ""],
      ["ActionCable::Server::Worker::ActiveRecordConnectionManagement::ActiveRecord", "", "classes/ActionCable/Server/Worker/ActiveRecordConnectionManagement/ActiveRecord.html", "", ""],
      ["ActionCable::SubscriptionAdapter", "", "classes/ActionCable/SubscriptionAdapter.html", "", ""],
      ["ActionCable::SubscriptionAdapter::Async", "", "classes/ActionCable/SubscriptionAdapter/Async.html", "", ""],
      ["ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap", "", "classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html", "", ""],
      ["ActionCable::SubscriptionAdapter::Base", "", "classes/ActionCable/SubscriptionAdapter/Base.html", "", ""],
      ["ActionCable::SubscriptionAdapter::EventedRedis", "", "classes/ActionCable/SubscriptionAdapter/EventedRedis.html", "", ""],
      ["ActionCable::SubscriptionAdapter::EventedRedis::EM", "", "classes/ActionCable/SubscriptionAdapter/EventedRedis/EM.html", "", ""],
      ["ActionCable::SubscriptionAdapter::PostgreSQL", "", "classes/ActionCable/SubscriptionAdapter/PostgreSQL.html", "", ""],
      ["ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html", "", ""],
      ["ActionCable::SubscriptionAdapter::Redis", "", "classes/ActionCable/SubscriptionAdapter/Redis.html", "", ""],
      ["ActionCable::SubscriptionAdapter::Redis::Listener", "", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html", "", ""],
      ["ActionCable::SubscriptionAdapter::SubscriberMap", "", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html", "", ""],
      ["ActionCable::VERSION", "", "classes/ActionCable/VERSION.html", "", ""],
      ["ActionController", "", "classes/ActionController.html", "", ""],
      ["ActionController::API", "", "classes/ActionController/API.html", "", "<p>API Controller is a lightweight version of\n<code>ActionController::Base</code>, created for applications that\ndon&#39;t …\n"],
      ["ActionController::ActionController", "", "classes/ActionController/ActionController.html", "", ""],
      ["ActionController::ActionController::ActionController", "", "classes/ActionController/ActionController/ActionController.html", "", ""],
      ["ActionController::ApiRendering", "", "classes/ActionController/ApiRendering.html", "", ""],
      ["ActionController::Base", "", "classes/ActionController/Base.html", "", "<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],
      ["ActionController::Caching", "", "classes/ActionController/Caching.html", "", "<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],
      ["ActionController::ConditionalGet", "", "classes/ActionController/ConditionalGet.html", "", ""],
      ["ActionController::ConditionalGet::ClassMethods", "", "classes/ActionController/ConditionalGet/ClassMethods.html", "", ""],
      ["ActionController::Cookies", "", "classes/ActionController/Cookies.html", "", ""],
      ["ActionController::DataStreaming", "", "classes/ActionController/DataStreaming.html", "", "<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],
      ["ActionController::EtagWithFlash", "", "classes/ActionController/EtagWithFlash.html", "", "<p>When you&#39;re using the flash, it&#39;s generally used as a conditional\non the view. This means the …\n"],
      ["ActionController::EtagWithTemplateDigest", "", "classes/ActionController/EtagWithTemplateDigest.html", "", "<p>When our views change, they should bubble up into HTTP cache freshness and\nbust browser caches. So the …\n"],
      ["ActionController::Flash", "", "classes/ActionController/Flash.html", "", ""],
      ["ActionController::Flash::ClassMethods", "", "classes/ActionController/Flash/ClassMethods.html", "", ""],
      ["ActionController::ForceSSL", "", "classes/ActionController/ForceSSL.html", "", "<p>This module provides a method which will redirect the browser to use the\nsecured HTTPS protocol. This …\n"],
      ["ActionController::ForceSSL::ClassMethods", "", "classes/ActionController/ForceSSL/ClassMethods.html", "", ""],
      ["ActionController::FormBuilder", "", "classes/ActionController/FormBuilder.html", "", "<p>Override the default form builder for all views rendered by this controller\nand any of its descendants. …\n"],
      ["ActionController::FormBuilder::ClassMethods", "", "classes/ActionController/FormBuilder/ClassMethods.html", "", ""],
      ["ActionController::Head", "", "classes/ActionController/Head.html", "", ""],
      ["ActionController::Helpers", "", "classes/ActionController/Helpers.html", "", "<p>The Rails framework provides a large number of helpers for working with\nassets, dates, forms, numbers …\n"],
      ["ActionController::Helpers::ClassMethods", "", "classes/ActionController/Helpers/ClassMethods.html", "", ""],
      ["ActionController::HttpAuthentication", "", "classes/ActionController/HttpAuthentication.html", "", "<p>Makes it dead easy to do HTTP Basic, Digest and Token authentication.\n"],
      ["ActionController::HttpAuthentication::Basic", "", "classes/ActionController/HttpAuthentication/Basic.html", "", "<p>Makes it dead easy to do HTTP Basic authentication.\n<p>Simple Basic example\n\n<pre><code> class PostsController &lt; ApplicationController ...</code></pre>\n"],
      ["ActionController::HttpAuthentication::Basic::ControllerMethods", "", "classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html", "", ""],
      ["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods", "", "classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html", "", ""],
      ["ActionController::HttpAuthentication::Digest", "", "classes/ActionController/HttpAuthentication/Digest.html", "", "<p>Makes it dead easy to do HTTP Digest authentication.\n<p>Simple Digest example\n\n<pre><code>require &#39;digest/md5&#39;\nclass PostsController ...</code></pre>\n"],
      ["ActionController::HttpAuthentication::Digest::ControllerMethods", "", "classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html", "", ""],
      ["ActionController::HttpAuthentication::Token", "", "classes/ActionController/HttpAuthentication/Token.html", "", "<p>Makes it dead easy to do HTTP Token authentication.\n<p>Simple Token example:\n\n<pre><code>class PostsController &lt; ApplicationController ...</code></pre>\n"],
      ["ActionController::HttpAuthentication::Token::ControllerMethods", "", "classes/ActionController/HttpAuthentication/Token/ControllerMethods.html", "", ""],
      ["ActionController::ImplicitRender", "", "classes/ActionController/ImplicitRender.html", "", "<p>Handles implicit rendering for a controller action that does not explicitly\nrespond with <code>render</code>, <code>respond_to</code> …\n"],
      ["ActionController::Instrumentation", "", "classes/ActionController/Instrumentation.html", "", "<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],
      ["ActionController::Instrumentation::ClassMethods", "", "classes/ActionController/Instrumentation/ClassMethods.html", "", ""],
      ["ActionController::Live", "", "classes/ActionController/Live.html", "", "<p>Mix this module into your controller, and all actions in that controller\nwill be able to stream data …\n"],
      ["ActionController::Live::ClassMethods", "", "classes/ActionController/Live/ClassMethods.html", "", ""],
      ["ActionController::Live::ClientDisconnected", "", "classes/ActionController/Live/ClientDisconnected.html", "", ""],
      ["ActionController::Live::SSE", "", "classes/ActionController/Live/SSE.html", "", "<p>This class provides the ability to write an SSE (Server Sent Event) to an\nIO stream. The class is initialized …\n"],
      ["ActionController::LiveTestResponse", "", "classes/ActionController/LiveTestResponse.html", "", ""],
      ["ActionController::LogSubscriber", "", "classes/ActionController/LogSubscriber.html", "", ""],
      ["ActionController::Metal", "", "classes/ActionController/Metal.html", "", "<p><code>ActionController::Metal</code> is the simplest possible controller,\nproviding a valid Rack interface without …\n"],
      ["ActionController::MimeResponds", "", "classes/ActionController/MimeResponds.html", "", ""],
      ["ActionController::MimeResponds::Collector", "", "classes/ActionController/MimeResponds/Collector.html", "", "<p>A container for responses available from the current controller for\nrequests for different mime-types …\n"],
      ["ActionController::MissingRenderer", "", "classes/ActionController/MissingRenderer.html", "", "<p>See <code>Responder#api_behavior</code>\n"],
      ["ActionController::ParameterEncoding", "", "classes/ActionController/ParameterEncoding.html", "", "<p>Specify binary encoding for parameters for a given action.\n"],
      ["ActionController::ParameterEncoding::ClassMethods", "", "classes/ActionController/ParameterEncoding/ClassMethods.html", "", ""],
      ["ActionController::ParameterMissing", "", "classes/ActionController/ParameterMissing.html", "", "<p>Raised when a required parameter is missing.\n\n<pre><code>params = ActionController::Parameters.new(a: {})\nparams.fetch(:b) ...</code></pre>\n"],
      ["ActionController::Parameters", "", "classes/ActionController/Parameters.html", "", "<p>Action Controller Parameters\n<p>Allows you to choose which attributes should be whitelisted for mass\nupdating …\n"],
      ["ActionController::ParamsWrapper", "", "classes/ActionController/ParamsWrapper.html", "", "<p>Wraps the parameters hash into a nested hash. This will allow clients to\nsubmit requests without having …\n"],
      ["ActionController::ParamsWrapper::ClassMethods", "", "classes/ActionController/ParamsWrapper/ClassMethods.html", "", ""],
      ["ActionController::Railtie", "", "classes/ActionController/Railtie.html", "", ""],
      ["ActionController::Railtie::ActiveSupport", "", "classes/ActionController/Railtie/ActiveSupport.html", "", ""],
      ["ActionController::Railties", "", "classes/ActionController/Railties.html", "", ""],
      ["ActionController::Railties::Helpers", "", "classes/ActionController/Railties/Helpers.html", "", ""],
      ["ActionController::Redirecting", "", "classes/ActionController/Redirecting.html", "", ""],
      ["ActionController::Renderer", "", "classes/ActionController/Renderer.html", "", "<p>ActionController::Renderer allows you to render arbitrary templates without\nrequirement of being in controller …\n"],
      ["ActionController::Renderers", "", "classes/ActionController/Renderers.html", "", ""],
      ["ActionController::Renderers::All", "", "classes/ActionController/Renderers/All.html", "", "<p>Used in <code>ActionController::Base</code> and\n<code>ActionController::API</code> to include all renderers by default.\n"],
      ["ActionController::Renderers::ClassMethods", "", "classes/ActionController/Renderers/ClassMethods.html", "", ""],
      ["ActionController::Rendering", "", "classes/ActionController/Rendering.html", "", ""],
      ["ActionController::Rendering::ClassMethods", "", "classes/ActionController/Rendering/ClassMethods.html", "", ""],
      ["ActionController::RequestForgeryProtection", "", "classes/ActionController/RequestForgeryProtection.html", "", "<p>Controller actions are protected from Cross-Site Request Forgery (CSRF)\nattacks by including a token …\n"],
      ["ActionController::RequestForgeryProtection::ClassMethods", "", "classes/ActionController/RequestForgeryProtection/ClassMethods.html", "", ""],
      ["ActionController::RequestForgeryProtection::ProtectionMethods", "", "classes/ActionController/RequestForgeryProtection/ProtectionMethods.html", "", ""],
      ["ActionController::RequestForgeryProtection::ProtectionMethods::Exception", "", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html", "", ""],
      ["ActionController::RequestForgeryProtection::ProtectionMethods::NullSession", "", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html", "", ""],
      ["ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession", "", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html", "", ""],
      ["ActionController::Rescue", "", "classes/ActionController/Rescue.html", "", "<p>This module is responsible for providing `rescue_from` helpers to\ncontrollers and configuring when detailed …\n"],
      ["ActionController::Streaming", "", "classes/ActionController/Streaming.html", "", "<p>Allows views to be streamed back to the client as they are rendered.\n<p>By default, Rails renders views by …\n"],
      ["ActionController::StrongParameters", "", "classes/ActionController/StrongParameters.html", "", "<p>Strong Parameters\n<p>It provides an interface for protecting attributes from end-user\nassignment. This makes …\n"],
      ["ActionController::TemplateAssertions", "", "classes/ActionController/TemplateAssertions.html", "", ""],
      ["ActionController::TestCase", "", "classes/ActionController/TestCase.html", "", "<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],
      ["ActionController::TestCase::Behavior", "", "classes/ActionController/TestCase/Behavior.html", "", ""],
      ["ActionController::TestCase::Behavior::ClassMethods", "", "classes/ActionController/TestCase/Behavior/ClassMethods.html", "", ""],
      ["ActionController::Testing", "", "classes/ActionController/Testing.html", "", ""],
      ["ActionController::Testing::ClassMethods", "", "classes/ActionController/Testing/ClassMethods.html", "", ""],
      ["ActionController::UnfilteredParameters", "", "classes/ActionController/UnfilteredParameters.html", "", "<p>Raised when a Parameters instance is not marked as permitted and an\noperation to transform it to hash …\n"],
      ["ActionController::UnpermittedParameters", "", "classes/ActionController/UnpermittedParameters.html", "", "<p>Raised when a supplied parameter is not expected and\nActionController::Parameters.action_on_unpermitted_parameters …\n"],
      ["ActionController::UrlFor", "", "classes/ActionController/UrlFor.html", "", "<p>Includes <code>url_for</code> into the host class. The class has to provide\na <code>RouteSet</code> by implementing the <code>_routes</code> …\n"],
      ["ActionDispatch", "", "classes/ActionDispatch.html", "", ""],
      ["ActionDispatch::AssertionResponse", "", "classes/ActionDispatch/AssertionResponse.html", "", "<p>This is a class that abstracts away an asserted response. It purposely does\nnot inherit from Response …\n"],
      ["ActionDispatch::Assertions", "", "classes/ActionDispatch/Assertions.html", "", ""],
      ["ActionDispatch::Assertions::ResponseAssertions", "", "classes/ActionDispatch/Assertions/ResponseAssertions.html", "", "<p>A small suite of assertions that test responses from Rails applications.\n"],
      ["ActionDispatch::Assertions::RoutingAssertions", "", "classes/ActionDispatch/Assertions/RoutingAssertions.html", "", "<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],
      ["ActionDispatch::Callbacks", "", "classes/ActionDispatch/Callbacks.html", "", "<p>Provides callbacks to be executed before and after dispatching the request.\n"],
      ["ActionDispatch::Cookies", "", "classes/ActionDispatch/Cookies.html", "", "<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],
      ["ActionDispatch::Cookies::ChainedCookieJars", "", "classes/ActionDispatch/Cookies/ChainedCookieJars.html", "", "<p>Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed\n"],
      ["ActionDispatch::DebugExceptions", "", "classes/ActionDispatch/DebugExceptions.html", "", "<p>This middleware is responsible for logging exceptions and showing a\ndebugging page in case the request …\n"],
      ["ActionDispatch::DebugExceptions::DebugView", "", "classes/ActionDispatch/DebugExceptions/DebugView.html", "", ""],
      ["ActionDispatch::DebugLocks", "", "classes/ActionDispatch/DebugLocks.html", "", "<p>This middleware can be used to diagnose deadlocks in the autoload\ninterlock.\n<p>To use it, insert it near …\n"],
      ["ActionDispatch::ExceptionWrapper", "", "classes/ActionDispatch/ExceptionWrapper.html", "", ""],
      ["ActionDispatch::Executor", "", "classes/ActionDispatch/Executor.html", "", ""],
      ["ActionDispatch::FileHandler", "", "classes/ActionDispatch/FileHandler.html", "", "<p>This middleware returns a file&#39;s contents from disk in the body\nresponse. When initialized, it can …\n"],
      ["ActionDispatch::Flash", "", "classes/ActionDispatch/Flash.html", "", "<p>The flash provides a way to pass temporary primitive-types (String, Array,\nHash) between actions. Anything …\n"],
      ["ActionDispatch::Flash::FlashHash", "", "classes/ActionDispatch/Flash/FlashHash.html", "", ""],
      ["ActionDispatch::Flash::RequestMethods", "", "classes/ActionDispatch/Flash/RequestMethods.html", "", ""],
      ["ActionDispatch::Http", "", "classes/ActionDispatch/Http.html", "", ""],
      ["ActionDispatch::Http::Cache", "", "classes/ActionDispatch/Http/Cache.html", "", ""],
      ["ActionDispatch::Http::Cache::Request", "", "classes/ActionDispatch/Http/Cache/Request.html", "", ""],
      ["ActionDispatch::Http::Cache::Response", "", "classes/ActionDispatch/Http/Cache/Response.html", "", ""],
      ["ActionDispatch::Http::FilterParameters", "", "classes/ActionDispatch/Http/FilterParameters.html", "", "<p>Allows you to specify sensitive parameters which will be replaced from the\nrequest log by looking in …\n"],
      ["ActionDispatch::Http::FilterRedirect", "", "classes/ActionDispatch/Http/FilterRedirect.html", "", ""],
      ["ActionDispatch::Http::Headers", "", "classes/ActionDispatch/Http/Headers.html", "", "<p>Provides access to the request&#39;s HTTP headers from the environment.\n\n<pre><code>env     = { &quot;CONTENT_TYPE&quot; =&gt; ...</code></pre>\n"],
      ["ActionDispatch::Http::MimeNegotiation", "", "classes/ActionDispatch/Http/MimeNegotiation.html", "", ""],
      ["ActionDispatch::Http::ParameterFilter", "", "classes/ActionDispatch/Http/ParameterFilter.html", "", ""],
      ["ActionDispatch::Http::Parameters", "", "classes/ActionDispatch/Http/Parameters.html", "", ""],
      ["ActionDispatch::Http::Parameters::ClassMethods", "", "classes/ActionDispatch/Http/Parameters/ClassMethods.html", "", ""],
      ["ActionDispatch::Http::Parameters::ParseError", "", "classes/ActionDispatch/Http/Parameters/ParseError.html", "", "<p>Raised when raw data from the request cannot be parsed by the parser\ndefined for request&#39;s content …\n"],
      ["ActionDispatch::Http::URL", "", "classes/ActionDispatch/Http/URL.html", "", ""],
      ["ActionDispatch::Http::UploadedFile", "", "classes/ActionDispatch/Http/UploadedFile.html", "", "<p>Models uploaded files.\n<p>The actual file is accessible via the <code>tempfile</code> accessor,\nthough some of its interface …\n"],
      ["ActionDispatch::Integration", "", "classes/ActionDispatch/Integration.html", "", ""],
      ["ActionDispatch::Integration::RequestHelpers", "", "classes/ActionDispatch/Integration/RequestHelpers.html", "", ""],
      ["ActionDispatch::Integration::Runner", "", "classes/ActionDispatch/Integration/Runner.html", "", ""],
      ["ActionDispatch::Integration::Session", "", "classes/ActionDispatch/Integration/Session.html", "", "<p>An instance of this class represents a set of requests and responses\nperformed sequentially by a test …\n"],
      ["ActionDispatch::IntegrationTest", "", "classes/ActionDispatch/IntegrationTest.html", "", "<p>An integration test spans multiple controllers and actions, tying them all\ntogether to ensure they work …\n"],
      ["ActionDispatch::IntegrationTest::Behavior", "", "classes/ActionDispatch/IntegrationTest/Behavior.html", "", ""],
      ["ActionDispatch::IntegrationTest::Behavior::ClassMethods", "", "classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html", "", ""],
      ["ActionDispatch::IntegrationTest::UrlOptions", "", "classes/ActionDispatch/IntegrationTest/UrlOptions.html", "", ""],
      ["ActionDispatch::Journey", "", "classes/ActionDispatch/Journey.html", "", ""],
      ["ActionDispatch::Journey::Format", "", "classes/ActionDispatch/Journey/Format.html", "", ""],
      ["ActionDispatch::Journey::Formatter", "", "classes/ActionDispatch/Journey/Formatter.html", "", ""],
      ["ActionDispatch::Journey::Formatter::RegexCaseComparator", "", "classes/ActionDispatch/Journey/Formatter/RegexCaseComparator.html", "", ""],
      ["ActionDispatch::Journey::Parser", "", "classes/ActionDispatch/Journey/Parser.html", "", ""],
      ["ActionDispatch::Journey::Route", "", "classes/ActionDispatch/Journey/Route.html", "", ""],
      ["ActionDispatch::Journey::Route::VerbMatchers", "", "classes/ActionDispatch/Journey/Route/VerbMatchers.html", "", ""],
      ["ActionDispatch::Journey::Route::VerbMatchers::All", "", "classes/ActionDispatch/Journey/Route/VerbMatchers/All.html", "", ""],
      ["ActionDispatch::Journey::Route::VerbMatchers::Unknown", "", "classes/ActionDispatch/Journey/Route/VerbMatchers/Unknown.html", "", ""],
      ["ActionDispatch::MiddlewareStack", "", "classes/ActionDispatch/MiddlewareStack.html", "", ""],
      ["ActionDispatch::MiddlewareStack::Middleware", "", "classes/ActionDispatch/MiddlewareStack/Middleware.html", "", ""],
      ["ActionDispatch::ParamsParser", "", "classes/ActionDispatch/ParamsParser.html", "", ""],
      ["ActionDispatch::PublicExceptions", "", "classes/ActionDispatch/PublicExceptions.html", "", "<p>When called, this middleware renders an error page. By default if an HTML\nresponse is expected it will …\n"],
      ["ActionDispatch::RailsEntityStore", "", "classes/ActionDispatch/RailsEntityStore.html", "", ""],
      ["ActionDispatch::RailsEntityStore::Rack", "", "classes/ActionDispatch/RailsEntityStore/Rack.html", "", ""],
      ["ActionDispatch::RailsEntityStore::Rack::Cache", "", "classes/ActionDispatch/RailsEntityStore/Rack/Cache.html", "", ""],
      ["ActionDispatch::RailsEntityStore::Rack::Cache::EntityStore", "", "classes/ActionDispatch/RailsEntityStore/Rack/Cache/EntityStore.html", "", ""],
      ["ActionDispatch::RailsMetaStore", "", "classes/ActionDispatch/RailsMetaStore.html", "", ""],
      ["ActionDispatch::RailsMetaStore::Rack", "", "classes/ActionDispatch/RailsMetaStore/Rack.html", "", ""],
      ["ActionDispatch::RailsMetaStore::Rack::Cache", "", "classes/ActionDispatch/RailsMetaStore/Rack/Cache.html", "", ""],
      ["ActionDispatch::RailsMetaStore::Rack::Cache::MetaStore", "", "classes/ActionDispatch/RailsMetaStore/Rack/Cache/MetaStore.html", "", ""],
      ["ActionDispatch::Railtie", "", "classes/ActionDispatch/Railtie.html", "", ""],
      ["ActionDispatch::Railtie::ActiveSupport", "", "classes/ActionDispatch/Railtie/ActiveSupport.html", "", ""],
      ["ActionDispatch::Reloader", "", "classes/ActionDispatch/Reloader.html", "", "<p>ActionDispatch::Reloader wraps the request with callbacks provided by\nActiveSupport::Reloader callbacks, …\n"],
      ["ActionDispatch::RemoteIp", "", "classes/ActionDispatch/RemoteIp.html", "", "<p>This middleware calculates the IP address of the remote client that is\nmaking the request. It does this …\n"],
      ["ActionDispatch::RemoteIp::GetIp", "", "classes/ActionDispatch/RemoteIp/GetIp.html", "", "<p>The GetIp class exists as a way to defer processing of the request data\ninto an actual IP address. If …\n"],
      ["ActionDispatch::RemoteIp::IpSpoofAttackError", "", "classes/ActionDispatch/RemoteIp/IpSpoofAttackError.html", "", ""],
      ["ActionDispatch::Request", "", "classes/ActionDispatch/Request.html", "", ""],
      ["ActionDispatch::RequestEncoder", "", "classes/ActionDispatch/RequestEncoder.html", "", ""],
      ["ActionDispatch::RequestEncoder::IdentityEncoder", "", "classes/ActionDispatch/RequestEncoder/IdentityEncoder.html", "", ""],
      ["ActionDispatch::RequestId", "", "classes/ActionDispatch/RequestId.html", "", "<p>Makes a unique request id available to the\n<code>action_dispatch.request_id</code> env variable (which is then\naccessible …\n"],
      ["ActionDispatch::Response", "", "classes/ActionDispatch/Response.html", "", "<p>Represents an HTTP response generated by a controller action. Use it to\nretrieve the current state of …\n"],
      ["ActionDispatch::Response::RackBody", "", "classes/ActionDispatch/Response/RackBody.html", "", ""],
      ["ActionDispatch::Routing", "", "classes/ActionDispatch/Routing.html", "", "<p>The routing module provides URL rewriting in native Ruby. It&#39;s a way to\nredirect incoming requests …\n"],
      ["ActionDispatch::Routing::ConsoleFormatter", "", "classes/ActionDispatch/Routing/ConsoleFormatter.html", "", ""],
      ["ActionDispatch::Routing::HtmlTableFormatter", "", "classes/ActionDispatch/Routing/HtmlTableFormatter.html", "", ""],
      ["ActionDispatch::Routing::Mapper", "", "classes/ActionDispatch/Routing/Mapper.html", "", ""],
      ["ActionDispatch::Routing::Mapper::Base", "", "classes/ActionDispatch/Routing/Mapper/Base.html", "", ""],
      ["ActionDispatch::Routing::Mapper::Concerns", "", "classes/ActionDispatch/Routing/Mapper/Concerns.html", "", "<p>Routing Concerns allow you to declare common routes that can be reused\ninside others resources and routes. …\n"],
      ["ActionDispatch::Routing::Mapper::CustomUrls", "", "classes/ActionDispatch/Routing/Mapper/CustomUrls.html", "", ""],
      ["ActionDispatch::Routing::Mapper::HttpHelpers", "", "classes/ActionDispatch/Routing/Mapper/HttpHelpers.html", "", ""],
      ["ActionDispatch::Routing::Mapper::Resources", "", "classes/ActionDispatch/Routing/Mapper/Resources.html", "", "<p>Resource routing allows you to quickly declare all of the common routes for\na given resourceful controller. …\n"],
      ["ActionDispatch::Routing::Mapper::Scoping", "", "classes/ActionDispatch/Routing/Mapper/Scoping.html", "", "<p>You may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number …\n"],
      ["ActionDispatch::Routing::PathRedirect", "", "classes/ActionDispatch/Routing/PathRedirect.html", "", ""],
      ["ActionDispatch::Routing::PolymorphicRoutes", "", "classes/ActionDispatch/Routing/PolymorphicRoutes.html", "", "<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],
      ["ActionDispatch::Routing::Redirection", "", "classes/ActionDispatch/Routing/Redirection.html", "", ""],
      ["ActionDispatch::Routing::RouteSet", "", "classes/ActionDispatch/Routing/RouteSet.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::CustomUrlHelper", "", "classes/ActionDispatch/Routing/RouteSet/CustomUrlHelper.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::Dispatcher", "", "classes/ActionDispatch/Routing/RouteSet/Dispatcher.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::Generator", "", "classes/ActionDispatch/Routing/RouteSet/Generator.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::MountedHelpers", "", "classes/ActionDispatch/Routing/RouteSet/MountedHelpers.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::NamedRouteCollection", "", "classes/ActionDispatch/Routing/RouteSet/NamedRouteCollection.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper", "", "classes/ActionDispatch/Routing/RouteSet/NamedRouteCollection/UrlHelper.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper", "", "classes/ActionDispatch/Routing/RouteSet/NamedRouteCollection/UrlHelper/OptimizedUrlHelper.html", "", ""],
      ["ActionDispatch::Routing::RouteSet::StaticDispatcher", "", "classes/ActionDispatch/Routing/RouteSet/StaticDispatcher.html", "", ""],
      ["ActionDispatch::Routing::RouteWrapper", "", "classes/ActionDispatch/Routing/RouteWrapper.html", "", ""],
      ["ActionDispatch::Routing::UrlFor", "", "classes/ActionDispatch/Routing/UrlFor.html", "", "<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but\nthe reverse is also possible: a URL can …\n"],
      ["ActionDispatch::SSL", "", "classes/ActionDispatch/SSL.html", "", "<p>This middleware is added to the stack when `config.force_ssl = true`, and\nis passed the options set in …\n"],
      ["ActionDispatch::Session", "", "classes/ActionDispatch/Session.html", "", ""],
      ["ActionDispatch::Session::AbstractStore", "", "classes/ActionDispatch/Session/AbstractStore.html", "", ""],
      ["ActionDispatch::Session::CacheStore", "", "classes/ActionDispatch/Session/CacheStore.html", "", "<p>A session store that uses an ActiveSupport::Cache::Store to store the\nsessions. This store is most useful …\n"],
      ["ActionDispatch::Session::Compatibility", "", "classes/ActionDispatch/Session/Compatibility.html", "", ""],
      ["ActionDispatch::Session::CookieStore", "", "classes/ActionDispatch/Session/CookieStore.html", "", "<p>This cookie-based session store is the Rails default. It is dramatically\nfaster than the alternatives. …\n"],
      ["ActionDispatch::Session::MemCacheStore", "", "classes/ActionDispatch/Session/MemCacheStore.html", "", "<p>A session store that uses MemCache to implement storage.\n<p>Options\n<p><code>expire_after</code>  - The length of time a session …\n"],
      ["ActionDispatch::Session::StaleSessionCheck", "", "classes/ActionDispatch/Session/StaleSessionCheck.html", "", ""],
      ["ActionDispatch::ShowExceptions", "", "classes/ActionDispatch/ShowExceptions.html", "", "<p>This middleware rescues any exception returned by the application and calls\nan exceptions app that will …\n"],
      ["ActionDispatch::Static", "", "classes/ActionDispatch/Static.html", "", "<p>This middleware will attempt to return the contents of a file&#39;s body\nfrom disk in the response.  …\n"],
      ["ActionDispatch::SystemTestCase", "", "classes/ActionDispatch/SystemTestCase.html", "", "<p>System Testing\n<p>System tests let you test applications in the browser. Because system tests\nuse a real …\n"],
      ["ActionDispatch::SystemTesting", "", "classes/ActionDispatch/SystemTesting.html", "", ""],
      ["ActionDispatch::SystemTesting::TestHelpers", "", "classes/ActionDispatch/SystemTesting/TestHelpers.html", "", ""],
      ["ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper", "", "classes/ActionDispatch/SystemTesting/TestHelpers/ScreenshotHelper.html", "", "<p>Screenshot helper for system testing\n"],
      ["ActionDispatch::TestProcess", "", "classes/ActionDispatch/TestProcess.html", "", ""],
      ["ActionDispatch::TestProcess::FixtureFile", "", "classes/ActionDispatch/TestProcess/FixtureFile.html", "", ""],
      ["ActionDispatch::TestRequest", "", "classes/ActionDispatch/TestRequest.html", "", ""],
      ["ActionDispatch::TestResponse", "", "classes/ActionDispatch/TestResponse.html", "", "<p>Integration test methods such as ActionDispatch::Integration::Session#get\nand ActionDispatch::Integration::Session#post …\n"],
      ["ActionMailer", "", "classes/ActionMailer.html", "", ""],
      ["ActionMailer::Base", "", "classes/ActionMailer/Base.html", "", "<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],
      ["ActionMailer::Base::LateAttachmentsProxy", "", "classes/ActionMailer/Base/LateAttachmentsProxy.html", "", ""],
      ["ActionMailer::Collector", "", "classes/ActionMailer/Collector.html", "", ""],
      ["ActionMailer::DeliveryMethods", "", "classes/ActionMailer/DeliveryMethods.html", "", "<p>This module handles everything related to mail delivery, from registering\nnew delivery methods to configuring …\n"],
      ["ActionMailer::DeliveryMethods::ClassMethods", "", "classes/ActionMailer/DeliveryMethods/ClassMethods.html", "", "<p>Helpers for creating and wrapping delivery behavior, used by\nDeliveryMethods.\n"],
      ["ActionMailer::DeliveryMethods::Mail", "", "classes/ActionMailer/DeliveryMethods/Mail.html", "", ""],
      ["ActionMailer::InlinePreviewInterceptor", "", "classes/ActionMailer/InlinePreviewInterceptor.html", "", "<p>Implements a mailer preview interceptor that converts image tag src\nattributes that use inline cid: style …\n"],
      ["ActionMailer::LogSubscriber", "", "classes/ActionMailer/LogSubscriber.html", "", "<p>Implements the ActiveSupport::LogSubscriber for logging notifications when\nemail is delivered or received. …\n"],
      ["ActionMailer::MailHelper", "", "classes/ActionMailer/MailHelper.html", "", "<p>Provides helper methods for ActionMailer::Base that can be used for easily\nformatting messages, accessing …\n"],
      ["ActionMailer::MessageDelivery", "", "classes/ActionMailer/MessageDelivery.html", "", "<p>The <code>ActionMailer::MessageDelivery</code> class is used by\n<code>ActionMailer::Base</code> when creating a new mailer.\n<code>MessageDelivery</code> …\n"],
      ["ActionMailer::NonInferrableMailerError", "", "classes/ActionMailer/NonInferrableMailerError.html", "", ""],
      ["ActionMailer::Parameterized", "", "classes/ActionMailer/Parameterized.html", "", "<p>Provides the option to parameterize mailers in order to share instance\nvariable setup, processing, and …\n"],
      ["ActionMailer::Parameterized::ClassMethods", "", "classes/ActionMailer/Parameterized/ClassMethods.html", "", ""],
      ["ActionMailer::Preview", "", "classes/ActionMailer/Preview.html", "", ""],
      ["ActionMailer::Previews", "", "classes/ActionMailer/Previews.html", "", ""],
      ["ActionMailer::Previews::ClassMethods", "", "classes/ActionMailer/Previews/ClassMethods.html", "", ""],
      ["ActionMailer::Railtie", "", "classes/ActionMailer/Railtie.html", "", ""],
      ["ActionMailer::Railtie::ActiveSupport", "", "classes/ActionMailer/Railtie/ActiveSupport.html", "", ""],
      ["ActionMailer::Rescuable", "", "classes/ActionMailer/Rescuable.html", "", "<p>Provides `rescue_from` for mailers. Wraps mailer action processing, mail\njob processing, and mail delivery. …\n"],
      ["ActionMailer::TestCase", "", "classes/ActionMailer/TestCase.html", "", ""],
      ["ActionMailer::TestCase::Behavior", "", "classes/ActionMailer/TestCase/Behavior.html", "", ""],
      ["ActionMailer::TestCase::Behavior::ClassMethods", "", "classes/ActionMailer/TestCase/Behavior/ClassMethods.html", "", ""],
      ["ActionMailer::TestCase::ClearTestDeliveries", "", "classes/ActionMailer/TestCase/ClearTestDeliveries.html", "", ""],
      ["ActionMailer::TestHelper", "", "classes/ActionMailer/TestHelper.html", "", "<p>Provides helper methods for testing Action Mailer, including #assert_emails\nand #assert_no_emails.\n"],
      ["ActionMailer::VERSION", "", "classes/ActionMailer/VERSION.html", "", ""],
      ["ActionView", "", "classes/ActionView.html", "", ""],
      ["ActionView::Base", "", "classes/ActionView/Base.html", "", "<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file\nhas a <code>.erb</code> …\n"],
      ["ActionView::CollectionCaching", "", "classes/ActionView/CollectionCaching.html", "", ""],
      ["ActionView::CollectionCaching::ActiveSupport", "", "classes/ActionView/CollectionCaching/ActiveSupport.html", "", ""],
      ["ActionView::CollectionCaching::ActiveSupport::Cache", "", "classes/ActionView/CollectionCaching/ActiveSupport/Cache.html", "", ""],
      ["ActionView::Context", "", "classes/ActionView/Context.html", "", "<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render a\ntemplate. The default …\n"],
      ["ActionView::DependencyTracker", "", "classes/ActionView/DependencyTracker.html", "", ""],
      ["ActionView::DependencyTracker::Concurrent", "", "classes/ActionView/DependencyTracker/Concurrent.html", "", ""],
      ["ActionView::Digestor", "", "classes/ActionView/Digestor.html", "", ""],
      ["ActionView::Digestor::Injected", "", "classes/ActionView/Digestor/Injected.html", "", ""],
      ["ActionView::Digestor::Missing", "", "classes/ActionView/Digestor/Missing.html", "", ""],
      ["ActionView::Digestor::Node", "", "classes/ActionView/Digestor/Node.html", "", ""],
      ["ActionView::Digestor::NullLogger", "", "classes/ActionView/Digestor/NullLogger.html", "", ""],
      ["ActionView::Digestor::Partial", "", "classes/ActionView/Digestor/Partial.html", "", ""],
      ["ActionView::Digestor::PerExecutionDigestCacheExpiry", "", "classes/ActionView/Digestor/PerExecutionDigestCacheExpiry.html", "", ""],
      ["ActionView::FileSystemResolver", "", "classes/ActionView/FileSystemResolver.html", "", "<p>A resolver that loads files from the filesystem. It allows setting your own\nresolving pattern. Such pattern …\n"],
      ["ActionView::FixtureResolver", "", "classes/ActionView/FixtureResolver.html", "", "<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],
      ["ActionView::FormBuilder", "", "classes/ActionView/FormBuilder.html", "", ""],
      ["ActionView::Helpers", "", "classes/ActionView/Helpers.html", "", "<p>Active Model Helpers\n<p>Action View Asset URL Helpers\n<p>Action View Atom Feed Helpers\n"],
      ["ActionView::Helpers::ActiveModelHelper", "", "classes/ActionView/Helpers/ActiveModelHelper.html", "", ""],
      ["ActionView::Helpers::ActiveModelInstanceTag", "", "classes/ActionView/Helpers/ActiveModelInstanceTag.html", "", ""],
      ["ActionView::Helpers::AssetTagHelper", "", "classes/ActionView/Helpers/AssetTagHelper.html", "", "<p>This module provides methods for generating HTML that links views to assets\nsuch as images, JavaScripts …\n"],
      ["ActionView::Helpers::AssetUrlHelper", "", "classes/ActionView/Helpers/AssetUrlHelper.html", "", "<p>This module provides methods for generating asset paths and urls.\n\n<pre><code>image_path(&quot;rails.png&quot;)\n# =&gt; &quot;/assets/rails.png&quot; ...\n</code></pre>\n"],
      ["ActionView::Helpers::AtomFeedHelper", "", "classes/ActionView/Helpers/AtomFeedHelper.html", "", ""],
      ["ActionView::Helpers::CacheHelper", "", "classes/ActionView/Helpers/CacheHelper.html", "", ""],
      ["ActionView::Helpers::CaptureHelper", "", "classes/ActionView/Helpers/CaptureHelper.html", "", "<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],
      ["ActionView::Helpers::CsrfHelper", "", "classes/ActionView/Helpers/CsrfHelper.html", "", ""],
      ["ActionView::Helpers::DateHelper", "", "classes/ActionView/Helpers/DateHelper.html", "", "<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],
      ["ActionView::Helpers::DebugHelper", "", "classes/ActionView/Helpers/DebugHelper.html", "", ""],
      ["ActionView::Helpers::FormBuilder", "", "classes/ActionView/Helpers/FormBuilder.html", "", "<p>A <code>FormBuilder</code> object is associated with a particular model\nobject and allows you to generate fields associated …\n"],
      ["ActionView::Helpers::FormHelper", "", "classes/ActionView/Helpers/FormHelper.html", "", "<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],
      ["ActionView::Helpers::FormOptionsHelper", "", "classes/ActionView/Helpers/FormOptionsHelper.html", "", "<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>The …\n"],
      ["ActionView::Helpers::FormTagHelper", "", "classes/ActionView/Helpers/FormTagHelper.html", "", "<p>Provides a number of methods for creating form tags that don&#39;t rely on\nan Active Record object assigned …\n"],
      ["ActionView::Helpers::JavaScriptHelper", "", "classes/ActionView/Helpers/JavaScriptHelper.html", "", ""],
      ["ActionView::Helpers::JavaScriptHelper::Encoding", "", "classes/ActionView/Helpers/JavaScriptHelper/Encoding.html", "", ""],
      ["ActionView::Helpers::NumberHelper", "", "classes/ActionView/Helpers/NumberHelper.html", "", "<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],
      ["ActionView::Helpers::NumberHelper::InvalidNumberError", "", "classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html", "", "<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],
      ["ActionView::Helpers::OutputSafetyHelper", "", "classes/ActionView/Helpers/OutputSafetyHelper.html", "", ""],
      ["ActionView::Helpers::RecordTagHelper", "", "classes/ActionView/Helpers/RecordTagHelper.html", "", ""],
      ["ActionView::Helpers::RenderingHelper", "", "classes/ActionView/Helpers/RenderingHelper.html", "", "<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to\nuse this …\n"],
      ["ActionView::Helpers::SanitizeHelper", "", "classes/ActionView/Helpers/SanitizeHelper.html", "", "<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],
      ["ActionView::Helpers::TagHelper", "", "classes/ActionView/Helpers/TagHelper.html", "", "<p>Provides methods to generate HTML tags programmatically both as a modern\nHTML5 compliant builder style …\n"],
      ["ActionView::Helpers::TextHelper", "", "classes/ActionView/Helpers/TextHelper.html", "", "<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],
      ["ActionView::Helpers::TranslationHelper", "", "classes/ActionView/Helpers/TranslationHelper.html", "", ""],
      ["ActionView::Helpers::UrlHelper", "", "classes/ActionView/Helpers/UrlHelper.html", "", "<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],
      ["ActionView::Helpers::UrlHelper::ClassMethods", "", "classes/ActionView/Helpers/UrlHelper/ClassMethods.html", "", ""],
      ["ActionView::Layouts", "", "classes/ActionView/Layouts.html", "", "<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],
      ["ActionView::Layouts::ClassMethods", "", "classes/ActionView/Layouts/ClassMethods.html", "", ""],
      ["ActionView::LogSubscriber", "", "classes/ActionView/LogSubscriber.html", "", "<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],
      ["ActionView::LookupContext", "", "classes/ActionView/LookupContext.html", "", ""],
      ["ActionView::LookupContext::DetailsCache", "", "classes/ActionView/LookupContext/DetailsCache.html", "", "<p>Add caching behavior on top of Details.\n"],
      ["ActionView::LookupContext::DetailsKey", "", "classes/ActionView/LookupContext/DetailsKey.html", "", ""],
      ["ActionView::LookupContext::DetailsKey::Concurrent", "", "classes/ActionView/LookupContext/DetailsKey/Concurrent.html", "", ""],
      ["ActionView::LookupContext::Template", "", "classes/ActionView/LookupContext/Template.html", "", ""],
      ["ActionView::LookupContext::ViewPaths", "", "classes/ActionView/LookupContext/ViewPaths.html", "", "<p>Helpers related to template lookup using the lookup context information.\n"],
      ["ActionView::NullResolver", "", "classes/ActionView/NullResolver.html", "", ""],
      ["ActionView::PartialIteration", "", "classes/ActionView/PartialIteration.html", "", ""],
      ["ActionView::PartialRenderer", "", "classes/ActionView/PartialRenderer.html", "", "<p>Action View Partials\n<p>There&#39;s also a convenience method for rendering sub templates within\nthe current …\n"],
      ["ActionView::Railtie", "", "classes/ActionView/Railtie.html", "", ""],
      ["ActionView::Railtie::ActiveSupport", "", "classes/ActionView/Railtie/ActiveSupport.html", "", ""],
      ["ActionView::RecordIdentifier", "", "classes/ActionView/RecordIdentifier.html", "", "<p>RecordIdentifier encapsulates methods used by various ActionView helpers to\nassociate records with DOM …\n"],
      ["ActionView::Renderer", "", "classes/ActionView/Renderer.html", "", "<p>This is the main entry point for rendering. It basically delegates to other\nobjects like TemplateRenderer …\n"],
      ["ActionView::Rendering", "", "classes/ActionView/Rendering.html", "", ""],
      ["ActionView::Rendering::ClassMethods", "", "classes/ActionView/Rendering/ClassMethods.html", "", ""],
      ["ActionView::Resolver", "", "classes/ActionView/Resolver.html", "", "<p>Action View Resolver\n"],
      ["ActionView::Resolver::Cache", "", "classes/ActionView/Resolver/Cache.html", "", ""],
      ["ActionView::Resolver::Cache::SmallCache", "", "classes/ActionView/Resolver/Cache/SmallCache.html", "", ""],
      ["ActionView::Resolver::Path", "", "classes/ActionView/Resolver/Path.html", "", "<p>Keeps all information about view path and builds virtual path.\n"],
      ["ActionView::RoutingUrlFor", "", "classes/ActionView/RoutingUrlFor.html", "", ""],
      ["ActionView::Template", "", "classes/ActionView/Template.html", "", "<p>Action View Template\n<p>Action View Template Handlers\n<p>Action View HTML Template\n"],
      ["ActionView::Template::Handlers", "", "classes/ActionView/Template/Handlers.html", "", ""],
      ["ActionView::Template::Handlers::Builder", "", "classes/ActionView/Template/Handlers/Builder.html", "", ""],
      ["ActionView::Template::Handlers::ERB", "", "classes/ActionView/Template/Handlers/ERB.html", "", ""],
      ["ActionView::Template::Handlers::Html", "", "classes/ActionView/Template/Handlers/Html.html", "", ""],
      ["ActionView::Template::Handlers::Raw", "", "classes/ActionView/Template/Handlers/Raw.html", "", ""],
      ["ActionView::Template::Types", "", "classes/ActionView/Template/Types.html", "", ""],
      ["ActionView::Template::Types::Type", "", "classes/ActionView/Template/Types/Type.html", "", ""],
      ["ActionView::TestCase", "", "classes/ActionView/TestCase.html", "", "<p>Action View Test Case\n"],
      ["ActionView::TestCase::Behavior", "", "classes/ActionView/TestCase/Behavior.html", "", ""],
      ["ActionView::TestCase::Behavior::ClassMethods", "", "classes/ActionView/TestCase/Behavior/ClassMethods.html", "", ""],
      ["ActionView::TestCase::Behavior::Locals", "", "classes/ActionView/TestCase/Behavior/Locals.html", "", ""],
      ["ActionView::TestCase::Behavior::RenderedViewsCollection", "", "classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html", "", "<p>Need to experiment if this priority is the best one: rendered =&gt;\noutput_buffer\n"],
      ["ActionView::TestCase::TestController", "", "classes/ActionView/TestCase/TestController.html", "", ""],
      ["ActionView::VERSION", "", "classes/ActionView/VERSION.html", "", ""],
      ["ActionView::ViewPaths", "", "classes/ActionView/ViewPaths.html", "", ""],
      ["ActionView::ViewPaths::ClassMethods", "", "classes/ActionView/ViewPaths/ClassMethods.html", "", ""],
      ["ActiveJob", "", "classes/ActiveJob.html", "", ""],
      ["ActiveJob::Base", "", "classes/ActiveJob/Base.html", "", "<p>Active Job\n<p>Active Job objects can be configured to work with different backend queuing\nframeworks. To …\n"],
      ["ActiveJob::Callbacks", "", "classes/ActiveJob/Callbacks.html", "", "<p>Active Job Callbacks\n<p>Active Job provides hooks during the life cycle of a job. Callbacks allow\nyou to …\n"],
      ["ActiveJob::Callbacks::ClassMethods", "", "classes/ActiveJob/Callbacks/ClassMethods.html", "", "<p>These methods will be included into any Active Job object, adding callbacks\nfor <code>perform</code> and <code>enqueue</code> methods. …\n"],
      ["ActiveJob::Core", "", "classes/ActiveJob/Core.html", "", "<p>Provides general behavior that will be included into every Active Job\nobject that inherits from ActiveJob::Base …\n"],
      ["ActiveJob::Core::ClassMethods", "", "classes/ActiveJob/Core/ClassMethods.html", "", "<p>These methods will be included into any Active Job object, adding helpers\nfor de/serialization and creation …\n"],
      ["ActiveJob::DeserializationError", "", "classes/ActiveJob/DeserializationError.html", "", "<p>Raised when an exception is raised during job arguments deserialization.\n<p>Wraps the original exception …\n"],
      ["ActiveJob::Enqueuing", "", "classes/ActiveJob/Enqueuing.html", "", "<p>Provides behavior for enqueuing jobs.\n"],
      ["ActiveJob::Enqueuing::ClassMethods", "", "classes/ActiveJob/Enqueuing/ClassMethods.html", "", "<p>Includes the <code>perform_later</code> method for job initialization.\n"],
      ["ActiveJob::Exceptions", "", "classes/ActiveJob/Exceptions.html", "", "<p>Provides behavior for retrying and discarding jobs on exceptions.\n"],
      ["ActiveJob::Exceptions::ClassMethods", "", "classes/ActiveJob/Exceptions/ClassMethods.html", "", ""],
      ["ActiveJob::Execution", "", "classes/ActiveJob/Execution.html", "", ""],
      ["ActiveJob::Execution::ClassMethods", "", "classes/ActiveJob/Execution/ClassMethods.html", "", "<p>Includes methods for executing and performing jobs instantly.\n"],
      ["ActiveJob::QueueAdapter", "", "classes/ActiveJob/QueueAdapter.html", "", ""],
      ["ActiveJob::QueueAdapter::ClassMethods", "", "classes/ActiveJob/QueueAdapter/ClassMethods.html", "", "<p>Includes the setter method for changing the active queue adapter.\n"],
      ["ActiveJob::QueueAdapters", "", "classes/ActiveJob/QueueAdapters.html", "", "<p>Active Job adapters\n<p>Active Job has adapters for the following queueing backends:\n<p>Backburner\n"],
      ["ActiveJob::QueueAdapters::AsyncAdapter", "", "classes/ActiveJob/QueueAdapters/AsyncAdapter.html", "", "<p>Active Job Async adapter\n<p>The Async adapter runs jobs with an in-process thread pool.\n<p>This is the default …\n"],
      ["ActiveJob::QueueAdapters::BackburnerAdapter", "", "classes/ActiveJob/QueueAdapters/BackburnerAdapter.html", "", "<p>Backburner adapter for Active Job\n<p>Backburner is a beanstalkd-powered job queue that can handle a very …\n"],
      ["ActiveJob::QueueAdapters::DelayedJobAdapter", "", "classes/ActiveJob/QueueAdapters/DelayedJobAdapter.html", "", "<p>Delayed Job adapter for Active Job\n<p>Delayed::Job (or DJ) encapsulates the common pattern of asynchronously …\n"],
      ["ActiveJob::QueueAdapters::InlineAdapter", "", "classes/ActiveJob/QueueAdapters/InlineAdapter.html", "", "<p>Active Job Inline adapter\n<p>When enqueuing jobs with the Inline adapter the job will be executed\nimmediately. …\n"],
      ["ActiveJob::QueueAdapters::QuAdapter", "", "classes/ActiveJob/QueueAdapters/QuAdapter.html", "", "<p>Qu adapter for Active Job\n<p>Qu is a Ruby library for queuing and processing background jobs. It is\nheavily …\n"],
      ["ActiveJob::QueueAdapters::QueAdapter", "", "classes/ActiveJob/QueueAdapters/QueAdapter.html", "", "<p>Que adapter for Active Job\n<p>Que is a high-performance alternative to DelayedJob or QueueClassic that\nimproves …\n"],
      ["ActiveJob::QueueAdapters::QueueClassicAdapter", "", "classes/ActiveJob/QueueAdapters/QueueClassicAdapter.html", "", "<p>queue_classic adapter for Active Job\n<p>queue_classic provides a simple interface to a PostgreSQL-backed …\n"],
      ["ActiveJob::QueueAdapters::ResqueAdapter", "", "classes/ActiveJob/QueueAdapters/ResqueAdapter.html", "", "<p>Resque adapter for Active Job\n<p>Resque (pronounced like “rescue”) is a Redis-backed library for …\n"],
      ["ActiveJob::QueueAdapters::SidekiqAdapter", "", "classes/ActiveJob/QueueAdapters/SidekiqAdapter.html", "", "<p>Sidekiq adapter for Active Job\n<p>Simple, efficient background processing for Ruby. Sidekiq uses threads …\n"],
      ["ActiveJob::QueueAdapters::SneakersAdapter", "", "classes/ActiveJob/QueueAdapters/SneakersAdapter.html", "", "<p>Sneakers adapter for Active Job\n<p>A high-performance RabbitMQ background processing framework for Ruby. …\n"],
      ["ActiveJob::QueueAdapters::SuckerPunchAdapter", "", "classes/ActiveJob/QueueAdapters/SuckerPunchAdapter.html", "", "<p>Sucker Punch adapter for Active Job\n<p>Sucker Punch is a single-process Ruby asynchronous processing library. …\n"],
      ["ActiveJob::QueueAdapters::TestAdapter", "", "classes/ActiveJob/QueueAdapters/TestAdapter.html", "", "<p>Test adapter for Active Job\n<p>The test adapter should be used only in testing. Along with\n<code>ActiveJob::TestCase</code> …\n"],
      ["ActiveJob::QueueName", "", "classes/ActiveJob/QueueName.html", "", ""],
      ["ActiveJob::QueueName::ClassMethods", "", "classes/ActiveJob/QueueName/ClassMethods.html", "", "<p>Includes the ability to override the default queue name and prefix.\n"],
      ["ActiveJob::QueuePriority", "", "classes/ActiveJob/QueuePriority.html", "", ""],
      ["ActiveJob::QueuePriority::ClassMethods", "", "classes/ActiveJob/QueuePriority/ClassMethods.html", "", "<p>Includes the ability to override the default queue priority.\n"],
      ["ActiveJob::SerializationError", "", "classes/ActiveJob/SerializationError.html", "", "<p>Raised when an unsupported argument type is set as a job argument. We\ncurrently support NilClass, Integer …\n"],
      ["ActiveJob::TestCase", "", "classes/ActiveJob/TestCase.html", "", ""],
      ["ActiveJob::TestHelper", "", "classes/ActiveJob/TestHelper.html", "", "<p>Provides helper methods for testing Active Job\n"],
      ["ActiveJob::TestHelper::TestQueueAdapter", "", "classes/ActiveJob/TestHelper/TestQueueAdapter.html", "", ""],
      ["ActiveJob::TestHelper::TestQueueAdapter::ClassMethods", "", "classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html", "", ""],
      ["ActiveJob::VERSION", "", "classes/ActiveJob/VERSION.html", "", ""],
      ["ActiveModel", "", "classes/ActiveModel.html", "", ""],
      ["ActiveModel::AttributeAssignment", "", "classes/ActiveModel/AttributeAssignment.html", "", ""],
      ["ActiveModel::AttributeMethods", "", "classes/ActiveModel/AttributeMethods.html", "", "<p>Active Model Attribute Methods\n<p>Provides a way to add prefixes and suffixes to your methods as well as …\n"],
      ["ActiveModel::AttributeMethods::ClassMethods", "", "classes/ActiveModel/AttributeMethods/ClassMethods.html", "", ""],
      ["ActiveModel::Callbacks", "", "classes/ActiveModel/Callbacks.html", "", "<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],
      ["ActiveModel::Conversion", "", "classes/ActiveModel/Conversion.html", "", "<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],
      ["ActiveModel::Dirty", "", "classes/ActiveModel/Dirty.html", "", "<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],
      ["ActiveModel::Errors", "", "classes/ActiveModel/Errors.html", "", "<p>Active Model Errors\n<p>Provides a modified <code>Hash</code> that you can include in your object\nfor handling error messages …\n"],
      ["ActiveModel::ForbiddenAttributesError", "", "classes/ActiveModel/ForbiddenAttributesError.html", "", "<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre><code>class Person &lt; ActiveRecord::Base\nend\n ...</code></pre>\n"],
      ["ActiveModel::Lint", "", "classes/ActiveModel/Lint.html", "", ""],
      ["ActiveModel::Lint::Tests", "", "classes/ActiveModel/Lint/Tests.html", "", "<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],
      ["ActiveModel::MissingAttributeError", "", "classes/ActiveModel/MissingAttributeError.html", "", "<p>Raised when an attribute is not defined.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = ...</code></pre>\n"],
      ["ActiveModel::Model", "", "classes/ActiveModel/Model.html", "", "<p>Active Model Basic Model\n<p>Includes the required interface for an object to interact with Action Pack\nand …\n"],
      ["ActiveModel::Name", "", "classes/ActiveModel/Name.html", "", ""],
      ["ActiveModel::Naming", "", "classes/ActiveModel/Naming.html", "", "<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],
      ["ActiveModel::RangeError", "", "classes/ActiveModel/RangeError.html", "", "<p>Raised when attribute values are out of range.\n"],
      ["ActiveModel::SecurePassword", "", "classes/ActiveModel/SecurePassword.html", "", ""],
      ["ActiveModel::SecurePassword::ClassMethods", "", "classes/ActiveModel/SecurePassword/ClassMethods.html", "", ""],
      ["ActiveModel::SecurePassword::InstanceMethodsOnActivation", "", "classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html", "", ""],
      ["ActiveModel::Serialization", "", "classes/ActiveModel/Serialization.html", "", "<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your objects.\n<p>A minimal …\n"],
      ["ActiveModel::Serializers", "", "classes/ActiveModel/Serializers.html", "", ""],
      ["ActiveModel::Serializers::JSON", "", "classes/ActiveModel/Serializers/JSON.html", "", "<p>Active Model JSON Serializer\n"],
      ["ActiveModel::StrictValidationFailed", "", "classes/ActiveModel/StrictValidationFailed.html", "", "<p>Raised when a validation cannot be corrected by end users and are\nconsidered exceptional.\n\n<pre><code>class Person ...</code></pre>\n"],
      ["ActiveModel::Translation", "", "classes/ActiveModel/Translation.html", "", "<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],
      ["ActiveModel::Type", "", "classes/ActiveModel/Type.html", "", ""],
      ["ActiveModel::Type::Boolean", "", "classes/ActiveModel/Type/Boolean.html", "", "<p>Active Model Type Boolean\n<p>A class that behaves like a boolean type, including rules for coercion of\nuser …\n"],
      ["ActiveModel::Type::Helpers", "", "classes/ActiveModel/Type/Helpers.html", "", ""],
      ["ActiveModel::Type::Helpers::AcceptsMultiparameterTime", "", "classes/ActiveModel/Type/Helpers/AcceptsMultiparameterTime.html", "", ""],
      ["ActiveModel::Type::Helpers::Mutable", "", "classes/ActiveModel/Type/Helpers/Mutable.html", "", ""],
      ["ActiveModel::Type::Helpers::Numeric", "", "classes/ActiveModel/Type/Helpers/Numeric.html", "", ""],
      ["ActiveModel::Type::Helpers::TimeValue", "", "classes/ActiveModel/Type/Helpers/TimeValue.html", "", ""],
      ["ActiveModel::Type::Registration", "", "classes/ActiveModel/Type/Registration.html", "", ""],
      ["ActiveModel::Type::Registry", "", "classes/ActiveModel/Type/Registry.html", "", ""],
      ["ActiveModel::Type::Value", "", "classes/ActiveModel/Type/Value.html", "", ""],
      ["ActiveModel::UnknownAttributeError", "", "classes/ActiveModel/UnknownAttributeError.html", "", "<p>Raised when unknown attributes are supplied via mass assignment.\n\n<pre><code>class Person\n  include ActiveModel::AttributeAssignment ...</code></pre>\n"],
      ["ActiveModel::VERSION", "", "classes/ActiveModel/VERSION.html", "", ""],
      ["ActiveModel::ValidationError", "", "classes/ActiveModel/ValidationError.html", "", "<p>Active Model ValidationError\n<p>Raised by <code>validate!</code> when the model is invalid. Use the\n<code>model</code> method to retrieve …\n"],
      ["ActiveModel::Validations", "", "classes/ActiveModel/Validations.html", "", "<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],
      ["ActiveModel::Validations::AcceptanceValidator", "", "classes/ActiveModel/Validations/AcceptanceValidator.html", "", ""],
      ["ActiveModel::Validations::AcceptanceValidator::AttributeDefinition", "", "classes/ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html", "", ""],
      ["ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes", "", "classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html", "", ""],
      ["ActiveModel::Validations::Callbacks", "", "classes/ActiveModel/Validations/Callbacks.html", "", "<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code>\nand <code>after_validation</code> …\n"],
      ["ActiveModel::Validations::Callbacks::ClassMethods", "", "classes/ActiveModel/Validations/Callbacks/ClassMethods.html", "", ""],
      ["ActiveModel::Validations::ClassMethods", "", "classes/ActiveModel/Validations/ClassMethods.html", "", ""],
      ["ActiveModel::Validations::HelperMethods", "", "classes/ActiveModel/Validations/HelperMethods.html", "", ""],
      ["ActiveModel::Validator", "", "classes/ActiveModel/Validator.html", "", "<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],
      ["ActiveRecord", "", "classes/ActiveRecord.html", "", ""],
      ["ActiveRecord::ActiveRecordError", "", "classes/ActiveRecord/ActiveRecordError.html", "", "<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],
      ["ActiveRecord::AdapterNotFound", "", "classes/ActiveRecord/AdapterNotFound.html", "", "<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],
      ["ActiveRecord::AdapterNotSpecified", "", "classes/ActiveRecord/AdapterNotSpecified.html", "", "<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],
      ["ActiveRecord::Aggregations", "", "classes/ActiveRecord/Aggregations.html", "", "<p>See ActiveRecord::Aggregations::ClassMethods for documentation\n"],
      ["ActiveRecord::Aggregations::ClassMethods", "", "classes/ActiveRecord/Aggregations/ClassMethods.html", "", "<p>Active Record implements aggregation through a macro-like class method\ncalled #composed_of for representing …\n"],
      ["ActiveRecord::AssociationRelation", "", "classes/ActiveRecord/AssociationRelation.html", "", ""],
      ["ActiveRecord::AssociationTypeMismatch", "", "classes/ActiveRecord/AssociationTypeMismatch.html", "", "<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre><code>class Ticket &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["ActiveRecord::Associations", "", "classes/ActiveRecord/Associations.html", "", "<p>Active Record Belongs To Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],
      ["ActiveRecord::Associations::ClassMethods", "", "classes/ActiveRecord/Associations/ClassMethods.html", "", "<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],
      ["ActiveRecord::Associations::CollectionProxy", "", "classes/ActiveRecord/Associations/CollectionProxy.html", "", "<p>Association proxies in Active Record are middlemen between the object that\nholds the association, known …\n"],
      ["ActiveRecord::AttributeAssignment", "", "classes/ActiveRecord/AttributeAssignment.html", "", ""],
      ["ActiveRecord::AttributeAssignmentError", "", "classes/ActiveRecord/AttributeAssignmentError.html", "", "<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the ActiveRecord::Base#attributes= …\n"],
      ["ActiveRecord::AttributeMethods", "", "classes/ActiveRecord/AttributeMethods.html", "", "<p>Active Record Attribute Methods\n"],
      ["ActiveRecord::AttributeMethods::BeforeTypeCast", "", "classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html", "", "<p>Active Record Attribute Methods Before Type Cast\n<p>ActiveRecord::AttributeMethods::BeforeTypeCast provides …\n"],
      ["ActiveRecord::AttributeMethods::ClassMethods", "", "classes/ActiveRecord/AttributeMethods/ClassMethods.html", "", ""],
      ["ActiveRecord::AttributeMethods::PrimaryKey", "", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html", "", ""],
      ["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods", "", "classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html", "", ""],
      ["ActiveRecord::AttributeMethods::Query", "", "classes/ActiveRecord/AttributeMethods/Query.html", "", ""],
      ["ActiveRecord::AttributeMethods::Read", "", "classes/ActiveRecord/AttributeMethods/Read.html", "", ""],
      ["ActiveRecord::AttributeMethods::Read::ClassMethods", "", "classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html", "", ""],
      ["ActiveRecord::AttributeMethods::Serialization", "", "classes/ActiveRecord/AttributeMethods/Serialization.html", "", ""],
      ["ActiveRecord::AttributeMethods::Serialization::ClassMethods", "", "classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html", "", ""],
      ["ActiveRecord::AttributeMethods::TimeZoneConversion", "", "classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html", "", ""],
      ["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods", "", "classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html", "", ""],
      ["ActiveRecord::AttributeMethods::Write", "", "classes/ActiveRecord/AttributeMethods/Write.html", "", ""],
      ["ActiveRecord::AttributeMethods::Write::ClassMethods", "", "classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html", "", ""],
      ["ActiveRecord::Attributes", "", "classes/ActiveRecord/Attributes.html", "", "<p>See ActiveRecord::Attributes::ClassMethods for documentation\n"],
      ["ActiveRecord::Attributes::ClassMethods", "", "classes/ActiveRecord/Attributes/ClassMethods.html", "", ""],
      ["ActiveRecord::AutosaveAssociation", "", "classes/ActiveRecord/AutosaveAssociation.html", "", "<p>Active Record Autosave Association\n<p>AutosaveAssociation is a module that takes care of automatically saving …\n"],
      ["ActiveRecord::Base", "", "classes/ActiveRecord/Base.html", "", "<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them …\n"],
      ["ActiveRecord::Batches", "", "classes/ActiveRecord/Batches.html", "", ""],
      ["ActiveRecord::Batches::BatchEnumerator", "", "classes/ActiveRecord/Batches/BatchEnumerator.html", "", ""],
      ["ActiveRecord::Calculations", "", "classes/ActiveRecord/Calculations.html", "", ""],
      ["ActiveRecord::Callbacks", "", "classes/ActiveRecord/Callbacks.html", "", "<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],
      ["ActiveRecord::CollectionCacheKey", "", "classes/ActiveRecord/CollectionCacheKey.html", "", ""],
      ["ActiveRecord::ConfigurationError", "", "classes/ActiveRecord/ConfigurationError.html", "", "<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],
      ["ActiveRecord::ConnectionAdapters", "", "classes/ActiveRecord/ConnectionAdapters.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::AbstractAdapter", "", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html", "", "<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],
      ["ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector", "", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/BindCollector.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString", "", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SQLString.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::AbstractAdapter::Version", "", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter", "", "classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::StatementPool", "", "classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/StatementPool.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::Column", "", "classes/ActiveRecord/ConnectionAdapters/Column.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::ColumnDumper", "", "classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html", "", "<p>The goal of this module is to move Adapter specific column definitions to\nthe Adapter instead of having …\n"],
      ["ActiveRecord::ConnectionAdapters::ColumnMethods", "", "classes/ActiveRecord/ConnectionAdapters/ColumnMethods.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::ConnectionHandler", "", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html", "", "<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],
      ["ActiveRecord::ConnectionAdapters::ConnectionPool", "", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html", "", "<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],
      ["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html", "", "<p>Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool with\nwhich it shares a Monitor.  But …\n"],
      ["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper", "", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html", "", "<p>Every <code>frequency</code> seconds, the reaper will call\n<code>reap</code> on <code>pool</code>. A reaper instantiated with a\n<code>nil</code> frequency …\n"],
      ["ActiveRecord::ConnectionAdapters::DatabaseLimits", "", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::DatabaseStatements", "", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor", "", "classes/ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::MySQL", "", "classes/ActiveRecord/ConnectionAdapters/MySQL.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements", "", "classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::MySQL::Table", "", "classes/ActiveRecord/ConnectionAdapters/MySQL/Table.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::MySQL::TableDefinition", "", "classes/ActiveRecord/ConnectionAdapters/MySQL/TableDefinition.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::Mysql2Adapter", "", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::NullColumn", "", "classes/ActiveRecord/ConnectionAdapters/NullColumn.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::OID", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Json", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Json.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::Table", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Table.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html", "", "<p>The PostgreSQL adapter works with the native C (bitbucket.org/ged/ruby-pg)\ndriver.\n<p>Options:\n<p><code>:host</code> - Defaults …\n"],
      ["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::QueryCache", "", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration", "", "classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::Quoting", "", "classes/ActiveRecord/ConnectionAdapters/Quoting.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::RealTransaction", "", "classes/ActiveRecord/ConnectionAdapters/RealTransaction.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SQLite3", "", "classes/ActiveRecord/ConnectionAdapters/SQLite3.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SQLite3::ColumnMethods", "", "classes/ActiveRecord/ConnectionAdapters/SQLite3/ColumnMethods.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SQLite3::Table", "", "classes/ActiveRecord/ConnectionAdapters/SQLite3/Table.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SQLite3::TableDefinition", "", "classes/ActiveRecord/ConnectionAdapters/SQLite3/TableDefinition.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SQLite3Adapter", "", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html", "", "<p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby\ndrivers (available as gem from …\n"],
      ["ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool", "", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SavepointTransaction", "", "classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::Savepoints", "", "classes/ActiveRecord/ConnectionAdapters/Savepoints.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SchemaCache", "", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SchemaStatements", "", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::SqlTypeMetadata", "", "classes/ActiveRecord/ConnectionAdapters/SqlTypeMetadata.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::Table", "", "classes/ActiveRecord/ConnectionAdapters/Table.html", "", "<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and connection.create_table …\n"],
      ["ActiveRecord::ConnectionAdapters::TableDefinition", "", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html", "", "<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],
      ["ActiveRecord::ConnectionAdapters::TransactionState", "", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html", "", ""],
      ["ActiveRecord::ConnectionAdapters::Type", "", "classes/ActiveRecord/ConnectionAdapters/Type.html", "", ""],
      ["ActiveRecord::ConnectionHandling", "", "classes/ActiveRecord/ConnectionHandling.html", "", ""],
      ["ActiveRecord::ConnectionNotEstablished", "", "classes/ActiveRecord/ConnectionNotEstablished.html", "", "<p>Raised when connection to the database could not been established (for\nexample when ActiveRecord::Base.connection= …\n"],
      ["ActiveRecord::ConnectionTimeoutError", "", "classes/ActiveRecord/ConnectionTimeoutError.html", "", "<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period: because …\n"],
      ["ActiveRecord::Core", "", "classes/ActiveRecord/Core.html", "", ""],
      ["ActiveRecord::Core::ClassMethods", "", "classes/ActiveRecord/Core/ClassMethods.html", "", ""],
      ["ActiveRecord::CounterCache", "", "classes/ActiveRecord/CounterCache.html", "", "<p>Active Record Counter Cache\n"],
      ["ActiveRecord::CounterCache::ClassMethods", "", "classes/ActiveRecord/CounterCache/ClassMethods.html", "", ""],
      ["ActiveRecord::DangerousAttributeError", "", "classes/ActiveRecord/DangerousAttributeError.html", "", "<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],
      ["ActiveRecord::Deadlocked", "", "classes/ActiveRecord/Deadlocked.html", "", "<p>Deadlocked will be raised when a transaction is rolled back by the database\nwhen a deadlock is encountered. …\n"],
      ["ActiveRecord::DefineCallbacks", "", "classes/ActiveRecord/DefineCallbacks.html", "", "<p>This module exists because `ActiveRecord::AttributeMethods::Dirty` needs to\ndefine callbacks, but continue …\n"],
      ["ActiveRecord::DynamicMatchers", "", "classes/ActiveRecord/DynamicMatchers.html", "", ""],
      ["ActiveRecord::DynamicMatchers::FindBy", "", "classes/ActiveRecord/DynamicMatchers/FindBy.html", "", ""],
      ["ActiveRecord::DynamicMatchers::FindByBang", "", "classes/ActiveRecord/DynamicMatchers/FindByBang.html", "", ""],
      ["ActiveRecord::DynamicMatchers::Method", "", "classes/ActiveRecord/DynamicMatchers/Method.html", "", ""],
      ["ActiveRecord::EagerLoadPolymorphicError", "", "classes/ActiveRecord/EagerLoadPolymorphicError.html", "", "<p>This error is raised when trying to eager load a polymorphic association\nusing a JOIN. Eager loading …\n"],
      ["ActiveRecord::Enum", "", "classes/ActiveRecord/Enum.html", "", "<p>Declare an enum attribute where the values map to integers in the database,\nbut can be queried by name. …\n"],
      ["ActiveRecord::EnvironmentMismatchError", "", "classes/ActiveRecord/EnvironmentMismatchError.html", "", ""],
      ["ActiveRecord::ExclusiveConnectionTimeoutError", "", "classes/ActiveRecord/ExclusiveConnectionTimeoutError.html", "", "<p>Raised when a pool was unable to get ahold of all its connections to\nperform a “group” action …\n"],
      ["ActiveRecord::Explain", "", "classes/ActiveRecord/Explain.html", "", ""],
      ["ActiveRecord::FinderMethods", "", "classes/ActiveRecord/FinderMethods.html", "", ""],
      ["ActiveRecord::FixtureSet", "", "classes/ActiveRecord/FixtureSet.html", "", "<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],
      ["ActiveRecord::FixtureSet::ClassCache", "", "classes/ActiveRecord/FixtureSet/ClassCache.html", "", ""],
      ["ActiveRecord::ImmutableRelation", "", "classes/ActiveRecord/ImmutableRelation.html", "", "<p>Raised when a relation cannot be mutated because it&#39;s already loaded.\n\n<pre><code>class Task &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["ActiveRecord::Inheritance", "", "classes/ActiveRecord/Inheritance.html", "", "<p>Single table inheritance\n<p>Active Record allows inheritance by storing the name of the class in a\ncolumn …\n"],
      ["ActiveRecord::Inheritance::ClassMethods", "", "classes/ActiveRecord/Inheritance/ClassMethods.html", "", ""],
      ["ActiveRecord::Integration", "", "classes/ActiveRecord/Integration.html", "", ""],
      ["ActiveRecord::Integration::ClassMethods", "", "classes/ActiveRecord/Integration/ClassMethods.html", "", ""],
      ["ActiveRecord::InvalidForeignKey", "", "classes/ActiveRecord/InvalidForeignKey.html", "", "<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],
      ["ActiveRecord::IrreversibleMigration", "", "classes/ActiveRecord/IrreversibleMigration.html", "", "<p>Exception that can be raised to stop migrations from being rolled back. For\nexample the following migration …\n"],
      ["ActiveRecord::IrreversibleOrderError", "", "classes/ActiveRecord/IrreversibleOrderError.html", "", "<p>IrreversibleOrderError is raised when a relation&#39;s order is too complex\nfor <code>reverse_order</code> to automatically …\n"],
      ["ActiveRecord::LegacyYamlAdapter", "", "classes/ActiveRecord/LegacyYamlAdapter.html", "", ""],
      ["ActiveRecord::LegacyYamlAdapter::Rails41", "", "classes/ActiveRecord/LegacyYamlAdapter/Rails41.html", "", ""],
      ["ActiveRecord::LegacyYamlAdapter::Rails420", "", "classes/ActiveRecord/LegacyYamlAdapter/Rails420.html", "", ""],
      ["ActiveRecord::Locking", "", "classes/ActiveRecord/Locking.html", "", ""],
      ["ActiveRecord::Locking::Optimistic", "", "classes/ActiveRecord/Locking/Optimistic.html", "", "<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],
      ["ActiveRecord::Locking::Optimistic::ClassMethods", "", "classes/ActiveRecord/Locking/Optimistic/ClassMethods.html", "", ""],
      ["ActiveRecord::Locking::Pessimistic", "", "classes/ActiveRecord/Locking/Pessimistic.html", "", "<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],
      ["ActiveRecord::LogSubscriber", "", "classes/ActiveRecord/LogSubscriber.html", "", ""],
      ["ActiveRecord::Migration", "", "classes/ActiveRecord/Migration.html", "", "<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],
      ["ActiveRecord::Migration::CheckPending", "", "classes/ActiveRecord/Migration/CheckPending.html", "", "<p>This class is used to verify that all migrations have been run before\nloading a web page if <code>config.active_record.migration_error</code> …\n"],
      ["ActiveRecord::Migration::CommandRecorder", "", "classes/ActiveRecord/Migration/CommandRecorder.html", "", "<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse …\n"],
      ["ActiveRecord::Migration::CommandRecorder::StraightReversions", "", "classes/ActiveRecord/Migration/CommandRecorder/StraightReversions.html", "", ""],
      ["ActiveRecord::Migration::Compatibility", "", "classes/ActiveRecord/Migration/Compatibility.html", "", ""],
      ["ActiveRecord::Migration::Compatibility::V4_2", "", "classes/ActiveRecord/Migration/Compatibility/V4_2.html", "", ""],
      ["ActiveRecord::Migration::Compatibility::V4_2::TableDefinition", "", "classes/ActiveRecord/Migration/Compatibility/V4_2/TableDefinition.html", "", ""],
      ["ActiveRecord::Migration::Compatibility::V5_0", "", "classes/ActiveRecord/Migration/Compatibility/V5_0.html", "", ""],
      ["ActiveRecord::Migration::Compatibility::V5_0::TableDefinition", "", "classes/ActiveRecord/Migration/Compatibility/V5_0/TableDefinition.html", "", ""],
      ["ActiveRecord::MismatchedForeignKey", "", "classes/ActiveRecord/MismatchedForeignKey.html", "", "<p>Raised when a foreign key constraint cannot be added because the column\ntype does not match the referenced …\n"],
      ["ActiveRecord::ModelSchema", "", "classes/ActiveRecord/ModelSchema.html", "", ""],
      ["ActiveRecord::ModelSchema::ClassMethods", "", "classes/ActiveRecord/ModelSchema/ClassMethods.html", "", ""],
      ["ActiveRecord::MultiparameterAssignmentErrors", "", "classes/ActiveRecord/MultiparameterAssignmentErrors.html", "", "<p>Raised when there are multiple errors while doing a mass assignment through\nthe ActiveRecord::Base#attributes= …\n"],
      ["ActiveRecord::NestedAttributes", "", "classes/ActiveRecord/NestedAttributes.html", "", ""],
      ["ActiveRecord::NestedAttributes::ClassMethods", "", "classes/ActiveRecord/NestedAttributes/ClassMethods.html", "", "<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],
      ["ActiveRecord::NestedAttributes::TooManyRecords", "", "classes/ActiveRecord/NestedAttributes/TooManyRecords.html", "", ""],
      ["ActiveRecord::NoDatabaseError", "", "classes/ActiveRecord/NoDatabaseError.html", "", "<p>Raised when a given database does not exist.\n"],
      ["ActiveRecord::NoTouching", "", "classes/ActiveRecord/NoTouching.html", "", "<p>Active Record No Touching\n"],
      ["ActiveRecord::NoTouching::ClassMethods", "", "classes/ActiveRecord/NoTouching/ClassMethods.html", "", ""],
      ["ActiveRecord::NotNullViolation", "", "classes/ActiveRecord/NotNullViolation.html", "", "<p>Raised when a record cannot be inserted or updated because it would violate\na not null constraint.\n"],
      ["ActiveRecord::Persistence", "", "classes/ActiveRecord/Persistence.html", "", "<p>Active Record Persistence\n"],
      ["ActiveRecord::Persistence::ClassMethods", "", "classes/ActiveRecord/Persistence/ClassMethods.html", "", ""],
      ["ActiveRecord::PreparedStatementCacheExpired", "", "classes/ActiveRecord/PreparedStatementCacheExpired.html", "", "<p>Raised when Postgres returns &#39;cached plan must not change result\ntype&#39; and we cannot retry gracefully …\n"],
      ["ActiveRecord::PreparedStatementInvalid", "", "classes/ActiveRecord/PreparedStatementInvalid.html", "", "<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using\nActiveRecord::Base.find …\n"],
      ["ActiveRecord::QueryCache", "", "classes/ActiveRecord/QueryCache.html", "", "<p>Active Record Query Cache\n"],
      ["ActiveRecord::QueryCache::ClassMethods", "", "classes/ActiveRecord/QueryCache/ClassMethods.html", "", ""],
      ["ActiveRecord::QueryMethods", "", "classes/ActiveRecord/QueryMethods.html", "", ""],
      ["ActiveRecord::QueryMethods::WhereChain", "", "classes/ActiveRecord/QueryMethods/WhereChain.html", "", "<p>WhereChain objects act as placeholder for queries in which #where does not\nhave any parameter. In this …\n"],
      ["ActiveRecord::Querying", "", "classes/ActiveRecord/Querying.html", "", ""],
      ["ActiveRecord::Railtie", "", "classes/ActiveRecord/Railtie.html", "", ""],
      ["ActiveRecord::Railtie::Rails", "", "classes/ActiveRecord/Railtie/Rails.html", "", ""],
      ["ActiveRecord::RangeError", "", "classes/ActiveRecord/RangeError.html", "", "<p>Raised when values that executed are out of range.\n"],
      ["ActiveRecord::ReadOnlyRecord", "", "classes/ActiveRecord/ReadOnlyRecord.html", "", "<p>Raised on attempt to update record that is instantiated as read only.\n"],
      ["ActiveRecord::ReadonlyAttributes", "", "classes/ActiveRecord/ReadonlyAttributes.html", "", ""],
      ["ActiveRecord::ReadonlyAttributes::ClassMethods", "", "classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html", "", ""],
      ["ActiveRecord::RecordInvalid", "", "classes/ActiveRecord/RecordInvalid.html", "", "<p>Active Record RecordInvalid\n<p>Raised by ActiveRecord::Base#save! and ActiveRecord::Base#create! when the\n…\n"],
      ["ActiveRecord::RecordNotDestroyed", "", "classes/ActiveRecord/RecordNotDestroyed.html", "", "<p>Raised by ActiveRecord::Base#destroy! when a call to #destroy would return\nfalse.\n\n<pre><code>begin\n  complex_operation_that_internally_calls_destroy! ...</code></pre>\n"],
      ["ActiveRecord::RecordNotFound", "", "classes/ActiveRecord/RecordNotFound.html", "", "<p>Raised when Active Record cannot find a record by given id or set of ids.\n"],
      ["ActiveRecord::RecordNotSaved", "", "classes/ActiveRecord/RecordNotSaved.html", "", "<p>Raised by ActiveRecord::Base#save! and ActiveRecord::Base.create! methods\nwhen a record is invalid and …\n"],
      ["ActiveRecord::RecordNotUnique", "", "classes/ActiveRecord/RecordNotUnique.html", "", "<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],
      ["ActiveRecord::Reflection", "", "classes/ActiveRecord/Reflection.html", "", ""],
      ["ActiveRecord::Reflection::ClassMethods", "", "classes/ActiveRecord/Reflection/ClassMethods.html", "", "<p>Reflection enables the ability to examine the associations and aggregations\nof Active Record classes …\n"],
      ["ActiveRecord::Reflection::MacroReflection", "", "classes/ActiveRecord/Reflection/MacroReflection.html", "", "<p>Base class for AggregateReflection and AssociationReflection. Objects of\nAggregateReflection and AssociationReflection …\n"],
      ["ActiveRecord::Relation", "", "classes/ActiveRecord/Relation.html", "", "<p>Active Record Relation\n"],
      ["ActiveRecord::Relation::RecordFetchWarning", "", "classes/ActiveRecord/Relation/RecordFetchWarning.html", "", ""],
      ["ActiveRecord::Result", "", "classes/ActiveRecord/Result.html", "", "<p>This class encapsulates a result returned from calling #exec_query on any\ndatabase connection adapter. …\n"],
      ["ActiveRecord::Rollback", "", "classes/ActiveRecord/Rollback.html", "", "<p>ActiveRecord::Base.transaction uses this exception to distinguish a\ndeliberate rollback from other exceptional …\n"],
      ["ActiveRecord::Sanitization", "", "classes/ActiveRecord/Sanitization.html", "", ""],
      ["ActiveRecord::Sanitization::ClassMethods", "", "classes/ActiveRecord/Sanitization/ClassMethods.html", "", ""],
      ["ActiveRecord::Schema", "", "classes/ActiveRecord/Schema.html", "", "<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],
      ["ActiveRecord::Scoping", "", "classes/ActiveRecord/Scoping.html", "", "<p>Active Record Named Scopes\n"],
      ["ActiveRecord::Scoping::ClassMethods", "", "classes/ActiveRecord/Scoping/ClassMethods.html", "", ""],
      ["ActiveRecord::Scoping::Default", "", "classes/ActiveRecord/Scoping/Default.html", "", ""],
      ["ActiveRecord::Scoping::Default::ClassMethods", "", "classes/ActiveRecord/Scoping/Default/ClassMethods.html", "", ""],
      ["ActiveRecord::Scoping::Named", "", "classes/ActiveRecord/Scoping/Named.html", "", ""],
      ["ActiveRecord::Scoping::Named::ClassMethods", "", "classes/ActiveRecord/Scoping/Named/ClassMethods.html", "", ""],
      ["ActiveRecord::SecureToken", "", "classes/ActiveRecord/SecureToken.html", "", ""],
      ["ActiveRecord::SecureToken::ClassMethods", "", "classes/ActiveRecord/SecureToken/ClassMethods.html", "", ""],
      ["ActiveRecord::Serialization", "", "classes/ActiveRecord/Serialization.html", "", "<p>Active Record Serialization\n"],
      ["ActiveRecord::SerializationFailure", "", "classes/ActiveRecord/SerializationFailure.html", "", "<p>SerializationFailure will be raised when a transaction is rolled back by\nthe database due to a serialization …\n"],
      ["ActiveRecord::SerializationTypeMismatch", "", "classes/ActiveRecord/SerializationTypeMismatch.html", "", "<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],
      ["ActiveRecord::SpawnMethods", "", "classes/ActiveRecord/SpawnMethods.html", "", ""],
      ["ActiveRecord::StaleObjectError", "", "classes/ActiveRecord/StaleObjectError.html", "", "<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],
      ["ActiveRecord::StatementInvalid", "", "classes/ActiveRecord/StatementInvalid.html", "", "<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>cause</code>.\n"],
      ["ActiveRecord::Store", "", "classes/ActiveRecord/Store.html", "", "<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],
      ["ActiveRecord::Store::ClassMethods", "", "classes/ActiveRecord/Store/ClassMethods.html", "", ""],
      ["ActiveRecord::SubclassNotFound", "", "classes/ActiveRecord/SubclassNotFound.html", "", "<p>Raised when the single-table inheritance mechanism fails to locate the\nsubclass (for example due to improper …\n"],
      ["ActiveRecord::Suppressor", "", "classes/ActiveRecord/Suppressor.html", "", "<p>ActiveRecord::Suppressor prevents the receiver from being saved during a\ngiven block.\n<p>For example, here&#39;s …\n"],
      ["ActiveRecord::Suppressor::ClassMethods", "", "classes/ActiveRecord/Suppressor/ClassMethods.html", "", ""],
      ["ActiveRecord::Tasks", "", "classes/ActiveRecord/Tasks.html", "", ""],
      ["ActiveRecord::Tasks::DatabaseTasks", "", "classes/ActiveRecord/Tasks/DatabaseTasks.html", "", "<p>ActiveRecord::Tasks::DatabaseTasks is a utility class, which encapsulates\nlogic behind common tasks used …\n"],
      ["ActiveRecord::TestFixtures", "", "classes/ActiveRecord/TestFixtures.html", "", ""],
      ["ActiveRecord::TestFixtures::ClassMethods", "", "classes/ActiveRecord/TestFixtures/ClassMethods.html", "", ""],
      ["ActiveRecord::Timestamp", "", "classes/ActiveRecord/Timestamp.html", "", "<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],
      ["ActiveRecord::TouchLater", "", "classes/ActiveRecord/TouchLater.html", "", "<p>Active Record Touch Later\n"],
      ["ActiveRecord::TransactionIsolationError", "", "classes/ActiveRecord/TransactionIsolationError.html", "", "<p>TransactionIsolationError will be raised under the following conditions:\n<p>The adapter does not support …\n"],
      ["ActiveRecord::TransactionRollbackError", "", "classes/ActiveRecord/TransactionRollbackError.html", "", "<p>TransactionRollbackError will be raised when a transaction is rolled back\nby the database due to a serialization …\n"],
      ["ActiveRecord::Transactions", "", "classes/ActiveRecord/Transactions.html", "", "<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],
      ["ActiveRecord::Transactions::ClassMethods", "", "classes/ActiveRecord/Transactions/ClassMethods.html", "", "<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],
      ["ActiveRecord::Translation", "", "classes/ActiveRecord/Translation.html", "", ""],
      ["ActiveRecord::Type", "", "classes/ActiveRecord/Type.html", "", ""],
      ["ActiveRecord::Type::AdapterSpecificRegistry", "", "classes/ActiveRecord/Type/AdapterSpecificRegistry.html", "", ""],
      ["ActiveRecord::Type::BigInteger", "", "classes/ActiveModel/Type/BigInteger.html", "", ""],
      ["ActiveRecord::Type::Binary", "", "classes/ActiveModel/Type/Binary.html", "", ""],
      ["ActiveRecord::Type::Boolean", "", "classes/ActiveModel/Type/Boolean.html", "", "<p>Active Model Type Boolean\n<p>A class that behaves like a boolean type, including rules for coercion of\nuser …\n"],
      ["ActiveRecord::Type::Date", "", "classes/ActiveRecord/Type/Date.html", "", ""],
      ["ActiveRecord::Type::DateTime", "", "classes/ActiveRecord/Type/DateTime.html", "", ""],
      ["ActiveRecord::Type::Decimal", "", "classes/ActiveModel/Type/Decimal.html", "", ""],
      ["ActiveRecord::Type::DecorationRegistration", "", "classes/ActiveRecord/Type/DecorationRegistration.html", "", ""],
      ["ActiveRecord::Type::Float", "", "classes/ActiveModel/Type/Float.html", "", ""],
      ["ActiveRecord::Type::Helpers", "", "classes/ActiveModel/Type/Helpers.html", "", ""],
      ["ActiveRecord::Type::Integer", "", "classes/ActiveModel/Type/Integer.html", "", ""],
      ["ActiveRecord::Type::Internal", "", "classes/ActiveRecord/Type/Internal.html", "", ""],
      ["ActiveRecord::Type::Internal::Timezone", "", "classes/ActiveRecord/Type/Internal/Timezone.html", "", ""],
      ["ActiveRecord::Type::Registration", "", "classes/ActiveRecord/Type/Registration.html", "", ""],
      ["ActiveRecord::Type::String", "", "classes/ActiveModel/Type/String.html", "", ""],
      ["ActiveRecord::Type::Time", "", "classes/ActiveRecord/Type/Time.html", "", ""],
      ["ActiveRecord::Type::Value", "", "classes/ActiveModel/Type/Value.html", "", ""],
      ["ActiveRecord::TypeConflictError", "", "classes/ActiveRecord/TypeConflictError.html", "", ""],
      ["ActiveRecord::UnknownAttributeError", "", "classes/ActiveModel/UnknownAttributeError.html", "", "<p>Raised when unknown attributes are supplied via mass assignment.\n\n<pre><code>class Person\n  include ActiveModel::AttributeAssignment ...</code></pre>\n"],
      ["ActiveRecord::UnknownPrimaryKey", "", "classes/ActiveRecord/UnknownPrimaryKey.html", "", "<p>Raised when a primary key is needed, but not specified in the schema or\nmodel.\n"],
      ["ActiveRecord::VERSION", "", "classes/ActiveRecord/VERSION.html", "", ""],
      ["ActiveRecord::Validations", "", "classes/ActiveRecord/Validations.html", "", "<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\nActiveModel::Validations …\n"],
      ["ActiveRecord::Validations::ClassMethods", "", "classes/ActiveRecord/Validations/ClassMethods.html", "", ""],
      ["ActiveRecord::ValueTooLong", "", "classes/ActiveRecord/ValueTooLong.html", "", "<p>Raised when a record cannot be inserted or updated because a value too long\nfor a column type.\n"],
      ["ActiveRecord::WrappedDatabaseException", "", "classes/ActiveRecord/WrappedDatabaseException.html", "", "<p>Defunct wrapper class kept for compatibility. StatementInvalid wraps the\noriginal exception now.\n"],
      ["ActiveSupport", "", "classes/ActiveSupport.html", "", "<p>The JSON gem adds a few modules to Ruby core classes containing :to_json\ndefinition, overwriting their …\n"],
      ["ActiveSupport::ArrayInquirer", "", "classes/ActiveSupport/ArrayInquirer.html", "", "<p>Wrapping an array in an <code>ArrayInquirer</code> gives a friendlier way\nto check its string-like contents:\n\n<pre><code>variants ...</code></pre>\n"],
      ["ActiveSupport::Autoload", "", "classes/ActiveSupport/Autoload.html", "", "<p>Autoload and eager load conveniences for your library.\n<p>This module allows you to define autoloads based …\n"],
      ["ActiveSupport::BacktraceCleaner", "", "classes/ActiveSupport/BacktraceCleaner.html", "", "<p>Backtraces often include many lines that are not relevant for the context\nunder review. This makes it …\n"],
      ["ActiveSupport::Benchmarkable", "", "classes/ActiveSupport/Benchmarkable.html", "", ""],
      ["ActiveSupport::Cache", "", "classes/ActiveSupport/Cache.html", "", "<p>See ActiveSupport::Cache::Store for documentation.\n"],
      ["ActiveSupport::Cache::FileStore", "", "classes/ActiveSupport/Cache/FileStore.html", "", "<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],
      ["ActiveSupport::Cache::MemCacheStore", "", "classes/ActiveSupport/Cache/MemCacheStore.html", "", "<p>A cache store implementation which stores data in Memcached: memcached.org/\n<p>This is currently the most …\n"],
      ["ActiveSupport::Cache::MemoryStore", "", "classes/ActiveSupport/Cache/MemoryStore.html", "", "<p>A cache store implementation which stores everything into memory in the\nsame process. If you&#39;re running …\n"],
      ["ActiveSupport::Cache::NullStore", "", "classes/ActiveSupport/Cache/NullStore.html", "", "<p>A cache store implementation which doesn&#39;t actually store anything.\nUseful in development and test …\n"],
      ["ActiveSupport::Cache::Store", "", "classes/ActiveSupport/Cache/Store.html", "", "<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],
      ["ActiveSupport::Cache::Strategy", "", "classes/ActiveSupport/Cache/Strategy.html", "", ""],
      ["ActiveSupport::Cache::Strategy::LocalCache", "", "classes/ActiveSupport/Cache/Strategy/LocalCache.html", "", "<p>Caches that implement LocalCache will be backed by an in-memory cache for\nthe duration of a block. Repeated …\n"],
      ["ActiveSupport::Cache::Strategy::LocalCache::LocalStore", "", "classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html", "", "<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],
      ["ActiveSupport::CachingKeyGenerator", "", "classes/ActiveSupport/CachingKeyGenerator.html", "", "<p>CachingKeyGenerator is a wrapper around KeyGenerator which allows users to\navoid re-executing the key …\n"],
      ["ActiveSupport::Callbacks", "", "classes/ActiveSupport/Callbacks.html", "", "<p>Callbacks are code hooks that are run at key points in an object&#39;s life\ncycle. The typical use case …\n"],
      ["ActiveSupport::Callbacks::ClassMethods", "", "classes/ActiveSupport/Callbacks/ClassMethods.html", "", ""],
      ["ActiveSupport::Callbacks::Conditionals", "", "classes/ActiveSupport/Callbacks/Conditionals.html", "", ""],
      ["ActiveSupport::Callbacks::Conditionals::Value", "", "classes/ActiveSupport/Callbacks/Conditionals/Value.html", "", ""],
      ["ActiveSupport::Callbacks::Filters", "", "classes/ActiveSupport/Callbacks/Filters.html", "", ""],
      ["ActiveSupport::Callbacks::Filters::After", "", "classes/ActiveSupport/Callbacks/Filters/After.html", "", ""],
      ["ActiveSupport::Callbacks::Filters::Before", "", "classes/ActiveSupport/Callbacks/Filters/Before.html", "", ""],
      ["ActiveSupport::Concern", "", "classes/ActiveSupport/Concern.html", "", "<p>A typical module looks like this:\n\n<pre><code>module M\n  def self.included(base)\n    base.extend ClassMethods\n    ...</code></pre>\n"],
      ["ActiveSupport::Concurrency", "", "classes/ActiveSupport/Concurrency.html", "", ""],
      ["ActiveSupport::Concurrency::ShareLock", "", "classes/ActiveSupport/Concurrency/ShareLock.html", "", "<p>A share/exclusive lock, otherwise known as a read/write lock.\n<p>en.wikipedia.org/wiki/Readers%E2%80%93writer_lock …\n"],
      ["ActiveSupport::Configurable", "", "classes/ActiveSupport/Configurable.html", "", "<p>Configurable provides a <code>config</code> method to store and retrieve\nconfiguration options as an <code>OrderedHash</code>. …\n"],
      ["ActiveSupport::Configurable::ClassMethods", "", "classes/ActiveSupport/Configurable/ClassMethods.html", "", ""],
      ["ActiveSupport::Configurable::Configuration", "", "classes/ActiveSupport/Configurable/Configuration.html", "", ""],
      ["ActiveSupport::Dependencies", "", "classes/ActiveSupport/Dependencies.html", "", ""],
      ["ActiveSupport::Dependencies::ClassCache", "", "classes/ActiveSupport/Dependencies/ClassCache.html", "", ""],
      ["ActiveSupport::Dependencies::Interlock", "", "classes/ActiveSupport/Dependencies/Interlock.html", "", ""],
      ["ActiveSupport::Dependencies::WatchStack", "", "classes/ActiveSupport/Dependencies/WatchStack.html", "", "<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],
      ["ActiveSupport::Deprecation", "", "classes/ActiveSupport/Deprecation.html", "", "<p>Deprecation specifies the API used by Rails to deprecate methods, instance\nvariables, objects and constants. …\n"],
      ["ActiveSupport::Deprecation::Behavior", "", "classes/ActiveSupport/Deprecation/Behavior.html", "", "<p>Behavior module allows to determine how to display deprecation messages.\nYou can create a custom behavior …\n"],
      ["ActiveSupport::Deprecation::DeprecatedConstantAccessor", "", "classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html", "", "<p>DeprecatedConstantAccessor transforms a constant into a deprecated one by\nhooking <code>const_missing</code>.\n<p>It takes …\n"],
      ["ActiveSupport::Deprecation::DeprecatedConstantProxy", "", "classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html", "", "<p>DeprecatedConstantProxy transforms a constant into a deprecated one. It\ntakes the names of an old (deprecated) …\n"],
      ["ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy", "", "classes/ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html", "", "<p>DeprecatedInstanceVariableProxy transforms an instance variable into a\ndeprecated one. It takes an instance …\n"],
      ["ActiveSupport::Deprecation::DeprecatedObjectProxy", "", "classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html", "", "<p>DeprecatedObjectProxy transforms an object into a deprecated one. It takes\nan object, a deprecation message …\n"],
      ["ActiveSupport::Deprecation::MethodWrapper", "", "classes/ActiveSupport/Deprecation/MethodWrapper.html", "", ""],
      ["ActiveSupport::Deprecation::Reporting", "", "classes/ActiveSupport/Deprecation/Reporting.html", "", ""],
      ["ActiveSupport::DeprecationException", "", "classes/ActiveSupport/DeprecationException.html", "", "<p>Raised when <code>ActiveSupport::Deprecation::Behavior#behavior</code> is\nset with <code>:raise</code>. You would set <code>:raise</code>, as …\n"],
      ["ActiveSupport::DescendantsTracker", "", "classes/ActiveSupport/DescendantsTracker.html", "", "<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],
      ["ActiveSupport::Duration", "", "classes/ActiveSupport/Duration.html", "", "<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],
      ["ActiveSupport::Duration::ISO8601Parser", "", "classes/ActiveSupport/Duration/ISO8601Parser.html", "", ""],
      ["ActiveSupport::Duration::ISO8601Parser::ParsingError", "", "classes/ActiveSupport/Duration/ISO8601Parser/ParsingError.html", "", ""],
      ["ActiveSupport::EventedFileUpdateChecker", "", "classes/ActiveSupport/EventedFileUpdateChecker.html", "", ""],
      ["ActiveSupport::EventedFileUpdateChecker::PathHelper", "", "classes/ActiveSupport/EventedFileUpdateChecker/PathHelper.html", "", ""],
      ["ActiveSupport::ExecutionWrapper", "", "classes/ActiveSupport/ExecutionWrapper.html", "", ""],
      ["ActiveSupport::ExecutionWrapper::Concurrent", "", "classes/ActiveSupport/ExecutionWrapper/Concurrent.html", "", ""],
      ["ActiveSupport::Executor", "", "classes/ActiveSupport/Executor.html", "", ""],
      ["ActiveSupport::FileUpdateChecker", "", "classes/ActiveSupport/FileUpdateChecker.html", "", "<p>FileUpdateChecker specifies the API used by Rails to watch files and\ncontrol reloading. The API depends …\n"],
      ["ActiveSupport::Gzip", "", "classes/ActiveSupport/Gzip.html", "", "<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],
      ["ActiveSupport::Gzip::Stream", "", "classes/ActiveSupport/Gzip/Stream.html", "", ""],
      ["ActiveSupport::HashWithIndifferentAccess", "", "classes/ActiveSupport/HashWithIndifferentAccess.html", "", "<p>Implements a hash where keys <code>:foo</code> and\n<code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre><code>rgb = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["ActiveSupport::HashWithIndifferentAccess", "", "classes/ActiveSupport/HashWithIndifferentAccess.html", "", "<p>Implements a hash where keys <code>:foo</code> and\n<code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre><code>rgb = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["ActiveSupport::Inflector", "", "classes/ActiveSupport/Inflector.html", "", "<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],
      ["ActiveSupport::Inflector::Inflections", "", "classes/ActiveSupport/Inflector/Inflections.html", "", "<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],
      ["ActiveSupport::Inflector::Inflections::Concurrent", "", "classes/ActiveSupport/Inflector/Inflections/Concurrent.html", "", ""],
      ["ActiveSupport::Inflector::Inflections::Uncountables", "", "classes/ActiveSupport/Inflector/Inflections/Uncountables.html", "", ""],
      ["ActiveSupport::InheritableOptions", "", "classes/ActiveSupport/InheritableOptions.html", "", "<p><code>InheritableOptions</code> provides a constructor to build an\n<code>OrderedOptions</code> hash inherited from another hash. …\n"],
      ["ActiveSupport::JSON", "", "classes/ActiveSupport/JSON.html", "", ""],
      ["ActiveSupport::KeyGenerator", "", "classes/ActiveSupport/KeyGenerator.html", "", "<p>KeyGenerator is a simple wrapper around OpenSSL&#39;s implementation of\nPBKDF2. It can be used to derive …\n"],
      ["ActiveSupport::LazyLoadHooks", "", "classes/ActiveSupport/LazyLoadHooks.html", "", "<p>lazy_load_hooks allows Rails to lazily load a lot of components and thus\nmaking the app boot faster. …\n"],
      ["ActiveSupport::LogSubscriber", "", "classes/ActiveSupport/LogSubscriber.html", "", "<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with the sole purpose …\n"],
      ["ActiveSupport::LogSubscriber::TestHelper", "", "classes/ActiveSupport/LogSubscriber/TestHelper.html", "", "<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],
      ["ActiveSupport::LogSubscriber::TestHelper::MockLogger", "", "classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html", "", ""],
      ["ActiveSupport::Logger", "", "classes/ActiveSupport/Logger.html", "", ""],
      ["ActiveSupport::Logger::SimpleFormatter", "", "classes/ActiveSupport/Logger/SimpleFormatter.html", "", "<p>Simple formatter which only displays the message.\n"],
      ["ActiveSupport::MessageEncryptor", "", "classes/ActiveSupport/MessageEncryptor.html", "", "<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don&#39;t trust.\n<p>The …\n"],
      ["ActiveSupport::MessageEncryptor::InvalidMessage", "", "classes/ActiveSupport/MessageEncryptor/InvalidMessage.html", "", ""],
      ["ActiveSupport::MessageVerifier", "", "classes/ActiveSupport/MessageVerifier.html", "", "<p><code>MessageVerifier</code> makes it easy to generate and verify messages\nwhich are signed to prevent tampering. …\n"],
      ["ActiveSupport::MessageVerifier::InvalidSignature", "", "classes/ActiveSupport/MessageVerifier/InvalidSignature.html", "", ""],
      ["ActiveSupport::Multibyte", "", "classes/ActiveSupport/Multibyte.html", "", ""],
      ["ActiveSupport::Multibyte::Chars", "", "classes/ActiveSupport/Multibyte/Chars.html", "", "<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],
      ["ActiveSupport::Multibyte::Unicode", "", "classes/ActiveSupport/Multibyte/Unicode.html", "", ""],
      ["ActiveSupport::Multibyte::Unicode::Codepoint", "", "classes/ActiveSupport/Multibyte/Unicode/Codepoint.html", "", "<p>Holds data about a codepoint in the Unicode database.\n"],
      ["ActiveSupport::Multibyte::Unicode::UnicodeDatabase", "", "classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html", "", "<p>Holds static data from the Unicode database.\n"],
      ["ActiveSupport::Notifications", "", "classes/ActiveSupport/Notifications.html", "", "<p>Notifications\n<p><code>ActiveSupport::Notifications</code> provides an instrumentation API\nfor Ruby.\n<p>Instrumenters\n"],
      ["ActiveSupport::Notifications::Event", "", "classes/ActiveSupport/Notifications/Event.html", "", ""],
      ["ActiveSupport::Notifications::Fanout", "", "classes/ActiveSupport/Notifications/Fanout.html", "", "<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],
      ["ActiveSupport::Notifications::Instrumenter", "", "classes/ActiveSupport/Notifications/Instrumenter.html", "", "<p>Instrumenters are stored in a thread local.\n"],
      ["ActiveSupport::NumberHelper", "", "classes/ActiveSupport/NumberHelper.html", "", ""],
      ["ActiveSupport::NumericWithFormat", "", "classes/ActiveSupport/NumericWithFormat.html", "", ""],
      ["ActiveSupport::OrderedHash", "", "classes/ActiveSupport/OrderedHash.html", "", "<p>DEPRECATED: <code>ActiveSupport::OrderedHash</code> implements a hash that\npreserves insertion order.\n\n<pre><code>oh = ActiveSupport::OrderedHash.new ...</code></pre>\n"],
      ["ActiveSupport::OrderedOptions", "", "classes/ActiveSupport/OrderedOptions.html", "", "<p>Usually key value pairs are handled something like this:\n\n<pre><code>h = {}\nh[:boy] = &#39;John&#39;\nh[:girl] = &#39;Mary&#39;\nh[:boy] ...</code></pre>\n"],
      ["ActiveSupport::PerThreadRegistry", "", "classes/ActiveSupport/PerThreadRegistry.html", "", "<p>NOTE: This approach has been deprecated for end-user code in favor of\nthread_mattr_accessor and friends. …\n"],
      ["ActiveSupport::ProxyObject", "", "classes/ActiveSupport/ProxyObject.html", "", "<p>A class with no predefined methods that behaves similarly to Builder&#39;s\nBlankSlate. Used for proxy …\n"],
      ["ActiveSupport::Railtie", "", "classes/ActiveSupport/Railtie.html", "", ""],
      ["ActiveSupport::Railtie::TZInfo", "", "classes/ActiveSupport/Railtie/TZInfo.html", "", ""],
      ["ActiveSupport::RangeWithFormat", "", "classes/ActiveSupport/RangeWithFormat.html", "", ""],
      ["ActiveSupport::Reloader", "", "classes/ActiveSupport/Reloader.html", "", ""],
      ["ActiveSupport::Rescuable", "", "classes/ActiveSupport/Rescuable.html", "", "<p>Rescuable module adds support for easier exception handling.\n"],
      ["ActiveSupport::Rescuable::ClassMethods", "", "classes/ActiveSupport/Rescuable/ClassMethods.html", "", ""],
      ["ActiveSupport::SafeBuffer", "", "classes/ActiveSupport/SafeBuffer.html", "", ""],
      ["ActiveSupport::SafeBuffer::SafeConcatError", "", "classes/ActiveSupport/SafeBuffer/SafeConcatError.html", "", "<p>Raised when <code>ActiveSupport::SafeBuffer#safe_concat</code> is called on\nunsafe buffers.\n"],
      ["ActiveSupport::SecurityUtils", "", "classes/ActiveSupport/SecurityUtils.html", "", ""],
      ["ActiveSupport::StringInquirer", "", "classes/ActiveSupport/StringInquirer.html", "", "<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],
      ["ActiveSupport::Subscriber", "", "classes/ActiveSupport/Subscriber.html", "", "<p>ActiveSupport::Subscriber is an object set to consume\nActiveSupport::Notifications. The subscriber dispatches …\n"],
      ["ActiveSupport::TaggedLogging", "", "classes/ActiveSupport/TaggedLogging.html", "", "<p>Wraps any standard Logger object to provide tagging capabilities.\n\n<pre><code>logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) ...</code></pre>\n"],
      ["ActiveSupport::TestCase", "", "classes/ActiveSupport/TestCase.html", "", ""],
      ["ActiveSupport::Testing", "", "classes/ActiveSupport/Testing.html", "", ""],
      ["ActiveSupport::Testing::Assertions", "", "classes/ActiveSupport/Testing/Assertions.html", "", ""],
      ["ActiveSupport::Testing::ConstantLookup", "", "classes/ActiveSupport/Testing/ConstantLookup.html", "", "<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre><code>describe WidgetsController, ...</code></pre>\n"],
      ["ActiveSupport::Testing::Declarative", "", "classes/ActiveSupport/Testing/Declarative.html", "", ""],
      ["ActiveSupport::Testing::FileFixtures", "", "classes/ActiveSupport/Testing/FileFixtures.html", "", "<p>Adds simple access to sample files called file fixtures. File fixtures are\nnormal files stored in\n<code>ActiveSupport::TestCase.file_fixture_path</code> …\n"],
      ["ActiveSupport::Testing::Isolation", "", "classes/ActiveSupport/Testing/Isolation.html", "", ""],
      ["ActiveSupport::Testing::Isolation::Forking", "", "classes/ActiveSupport/Testing/Isolation/Forking.html", "", ""],
      ["ActiveSupport::Testing::Isolation::Subprocess", "", "classes/ActiveSupport/Testing/Isolation/Subprocess.html", "", ""],
      ["ActiveSupport::Testing::SetupAndTeardown", "", "classes/ActiveSupport/Testing/SetupAndTeardown.html", "", "<p>Adds support for <code>setup</code> and <code>teardown</code> callbacks.\nThese callbacks serve as a replacement to overwriting …\n"],
      ["ActiveSupport::Testing::SetupAndTeardown::ClassMethods", "", "classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html", "", ""],
      ["ActiveSupport::Testing::TimeHelpers", "", "classes/ActiveSupport/Testing/TimeHelpers.html", "", "<p>Contains helpers that help you test passage of time.\n"],
      ["ActiveSupport::TimeWithZone", "", "classes/ActiveSupport/TimeWithZone.html", "", "<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],
      ["ActiveSupport::TimeZone", "", "classes/ActiveSupport/TimeZone.html", "", "<p>The TimeZone class serves as a wrapper around TZInfo::Timezone instances.\nIt allows us to do the following: …\n"],
      ["ActiveSupport::TimeZone::Concurrent", "", "classes/ActiveSupport/TimeZone/Concurrent.html", "", ""],
      ["ActiveSupport::VERSION", "", "classes/ActiveSupport/VERSION.html", "", ""],
      ["ActiveSupport::XMLConverter", "", "classes/ActiveSupport/XMLConverter.html", "", ""],
      ["ActiveSupport::XMLConverter::DisallowedType", "", "classes/ActiveSupport/XMLConverter/DisallowedType.html", "", "<p>Raised if the XML contains attributes with type=“yaml” or type=“symbol”.\nRead Hash#from_xml …\n"],
      ["ActiveSupport::XmlMini", "", "classes/ActiveSupport/XmlMini.html", "", "<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre><code>gem &#39;libxml-ruby&#39;, &#39;=0.9.7&#39;\nXmlMini.backend = &#39;LibXML&#39;\n</code></pre>\n"],
      ["ActiveSupport::XmlMini_LibXMLSAX", "", "classes/ActiveSupport/XmlMini_LibXMLSAX.html", "", ""],
      ["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html", "", "<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],
      ["ActiveSupport::XmlMini_Nokogiri", "", "classes/ActiveSupport/XmlMini_Nokogiri.html", "", ""],
      ["ActiveSupport::XmlMini_Nokogiri::Nokogiri", "", "classes/ActiveSupport/XmlMini_Nokogiri/Nokogiri.html", "", ""],
      ["ActiveSupport::XmlMini_Nokogiri::Nokogiri::XML", "", "classes/ActiveSupport/XmlMini_Nokogiri/Nokogiri/XML.html", "", ""],
      ["ActiveSupport::XmlMini_NokogiriSAX", "", "classes/ActiveSupport/XmlMini_NokogiriSAX.html", "", ""],
      ["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html", "", "<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],
      ["Array", "", "classes/Array.html", "", ""],
      ["Benchmark", "", "classes/Benchmark.html", "", ""],
      ["BigDecimal", "", "classes/BigDecimal.html", "", ""],
      ["Class", "", "classes/Class.html", "", ""],
      ["Complex", "", "classes/Complex.html", "", ""],
      ["Date", "", "classes/Date.html", "", ""],
      ["DateAndTime", "", "classes/DateAndTime.html", "", ""],
      ["DateAndTime::Calculations", "", "classes/DateAndTime/Calculations.html", "", ""],
      ["DateAndTime::Compatibility", "", "classes/DateAndTime/Compatibility.html", "", ""],
      ["DateAndTime::Zones", "", "classes/DateAndTime/Zones.html", "", ""],
      ["DateTime", "", "classes/DateTime.html", "", ""],
      ["Delegator", "", "classes/Delegator.html", "", ""],
      ["Digest", "", "classes/Digest.html", "", ""],
      ["Digest::UUID", "", "classes/Digest/UUID.html", "", ""],
      ["ERB", "", "classes/ERB.html", "", ""],
      ["ERB::Util", "", "classes/ERB/Util.html", "", ""],
      ["Encoding", "", "classes/Encoding.html", "", ""],
      ["Enumerable", "", "classes/Enumerable.html", "", ""],
      ["Exception", "", "classes/Exception.html", "", ""],
      ["FalseClass", "", "classes/FalseClass.html", "", ""],
      ["File", "", "classes/File.html", "", ""],
      ["Float", "", "classes/Float.html", "", ""],
      ["Hash", "", "classes/Hash.html", "", ""],
      ["Integer", "", "classes/Integer.html", "", ""],
      ["Kernel", "", "classes/Kernel.html", "", ""],
      ["LoadError", "", "classes/LoadError.html", "", ""],
      ["LoggerSilence", "", "classes/LoggerSilence.html", "", ""],
      ["Method", "", "classes/Method.html", "", ""],
      ["Mime", "", "classes/Mime.html", "", ""],
      ["Mime::AllType", "", "classes/Mime/AllType.html", "", ""],
      ["Mime::Mimes", "", "classes/Mime/Mimes.html", "", ""],
      ["Mime::NullType", "", "classes/Mime/NullType.html", "", ""],
      ["Mime::Type", "", "classes/Mime/Type.html", "", "<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre><code>class PostsController ...</code></pre>\n"],
      ["Module", "", "classes/Module.html", "", "<p>Extends the module object with class/module and instance accessors for\nclass/module attributes, just …\n"],
      ["Module::Concerning", "", "classes/Module/Concerning.html", "", "<p>Bite-sized separation of concerns\n<p>We often find ourselves with a medium-sized chunk of behavior that we&#39;d\n…\n"],
      ["Module::DelegationError", "", "classes/Module/DelegationError.html", "", "<p>Error generated by <code>delegate</code> when a method is called on\n<code>nil</code> and <code>allow_nil</code> option is not used.\n"],
      ["Mysql2", "", "classes/Mysql2.html", "", ""],
      ["NameError", "", "classes/NameError.html", "", ""],
      ["NilClass", "", "classes/NilClass.html", "", ""],
      ["Numeric", "", "classes/Numeric.html", "", ""],
      ["Object", "", "classes/Object.html", "", ""],
      ["Process", "", "classes/Process.html", "", ""],
      ["Rails", "", "classes/Rails.html", "", ""],
      ["Rails::API", "", "classes/Rails/API.html", "", ""],
      ["Rails::API::EdgeTask", "", "classes/Rails/API/EdgeTask.html", "", ""],
      ["Rails::API::RepoTask", "", "classes/Rails/API/RepoTask.html", "", ""],
      ["Rails::API::StableTask", "", "classes/Rails/API/StableTask.html", "", ""],
      ["Rails::API::Task", "", "classes/Rails/API/Task.html", "", ""],
      ["Rails::AppBuilder", "", "classes/Rails/AppBuilder.html", "", "<p>The application builder allows you to override elements of the application\ngenerator without being forced …\n"],
      ["Rails::Application", "", "classes/Rails/Application.html", "", "<p>An Engine with the responsibility of coordinating the whole boot process.\n<p>Initialization\n<p>Rails::Application …\n"],
      ["Rails::Application::Bootstrap", "", "classes/Rails/Application/Bootstrap.html", "", ""],
      ["Rails::Application::Bootstrap::Rack", "", "classes/Rails/Application/Bootstrap/Rack.html", "", ""],
      ["Rails::Application::Configuration", "", "classes/Rails/Application/Configuration.html", "", ""],
      ["Rails::Application::DefaultMiddlewareStack", "", "classes/Rails/Application/DefaultMiddlewareStack.html", "", ""],
      ["Rails::Application::Finisher", "", "classes/Rails/Application/Finisher.html", "", ""],
      ["Rails::Application::Finisher::InterlockHook", "", "classes/Rails/Application/Finisher/InterlockHook.html", "", ""],
      ["Rails::Application::Finisher::MutexHook", "", "classes/Rails/Application/Finisher/MutexHook.html", "", ""],
      ["Rails::Application::RoutesReloader", "", "classes/Rails/Application/RoutesReloader.html", "", ""],
      ["Rails::BacktraceCleaner", "", "classes/Rails/BacktraceCleaner.html", "", ""],
      ["Rails::Command", "", "classes/Rails/Command.html", "", ""],
      ["Rails::Command::Actions", "", "classes/Rails/Command/Actions.html", "", ""],
      ["Rails::Command::Base", "", "classes/Rails/Command/Base.html", "", ""],
      ["Rails::Configuration", "", "classes/Rails/Configuration.html", "", ""],
      ["Rails::Configuration::MiddlewareStackProxy", "", "classes/Rails/Configuration/MiddlewareStackProxy.html", "", "<p>MiddlewareStackProxy is a proxy for the Rails middleware stack that allows\nyou to configure middlewares …\n"],
      ["Rails::Console", "", "classes/Rails/Console.html", "", ""],
      ["Rails::Console::BacktraceCleaner", "", "classes/Rails/Console/BacktraceCleaner.html", "", ""],
      ["Rails::ConsoleMethods", "", "classes/Rails/ConsoleMethods.html", "", ""],
      ["Rails::DBConsole", "", "classes/Rails/DBConsole.html", "", ""],
      ["Rails::Engine", "", "classes/Rails/Engine.html", "", "<p><code>Rails::Engine</code> allows you to wrap a specific Rails application\nor subset of functionality and share it …\n"],
      ["Rails::Engine::Configuration", "", "classes/Rails/Engine/Configuration.html", "", ""],
      ["Rails::Engine::Railties", "", "classes/Rails/Engine/Railties.html", "", ""],
      ["Rails::Engine::Rake", "", "classes/Rails/Engine/Rake.html", "", ""],
      ["Rails::Engine::Updater", "", "classes/Rails/Engine/Updater.html", "", ""],
      ["Rails::Generators", "", "classes/Rails/Generators.html", "", ""],
      ["Rails::Generators::Actions", "", "classes/Rails/Generators/Actions.html", "", ""],
      ["Rails::Generators::ActiveModel", "", "classes/Rails/Generators/ActiveModel.html", "", "<p>ActiveModel is a class to be implemented by each ORM to allow Rails to\ngenerate customized controller …\n"],
      ["Rails::Generators::AppBase", "", "classes/Rails/Generators/AppBase.html", "", ""],
      ["Rails::Generators::AppBase::GemfileEntry", "", "classes/Rails/Generators/AppBase/GemfileEntry.html", "", ""],
      ["Rails::Generators::Base", "", "classes/Rails/Generators/Base.html", "", ""],
      ["Rails::Generators::EncryptedSecretsGenerator", "", "classes/Rails/Generators/EncryptedSecretsGenerator.html", "", ""],
      ["Rails::Generators::Migration", "", "classes/Rails/Generators/Migration.html", "", "<p>Holds common methods for migrations. It assumes that migrations have the\n[0-9]*_name format and can be …\n"],
      ["Rails::Generators::NamedBase", "", "classes/Rails/Generators/NamedBase.html", "", ""],
      ["Rails::Generators::TestCase", "", "classes/Rails/Generators/TestCase.html", "", "<p>This class provides a TestCase for testing generators. To setup, you need\njust to configure the destination …\n"],
      ["Rails::Generators::Testing", "", "classes/Rails/Generators/Testing.html", "", ""],
      ["Rails::Generators::Testing::Assertions", "", "classes/Rails/Generators/Testing/Assertions.html", "", ""],
      ["Rails::Generators::Testing::Behaviour", "", "classes/Rails/Generators/Testing/Behaviour.html", "", ""],
      ["Rails::Generators::Testing::Behaviour::ClassMethods", "", "classes/Rails/Generators/Testing/Behaviour/ClassMethods.html", "", ""],
      ["Rails::Generators::Testing::SetupAndTeardown", "", "classes/Rails/Generators/Testing/SetupAndTeardown.html", "", ""],
      ["Rails::Info", "", "classes/Rails/Info.html", "", "<p>This module helps build the runtime properties that are displayed in\nRails::InfoController responses. …\n"],
      ["Rails::Info::Gem", "", "classes/Rails/Info/Gem.html", "", ""],
      ["Rails::Initializable", "", "classes/Rails/Initializable.html", "", ""],
      ["Rails::Initializable::ClassMethods", "", "classes/Rails/Initializable/ClassMethods.html", "", ""],
      ["Rails::Initializable::Collection", "", "classes/Rails/Initializable/Collection.html", "", ""],
      ["Rails::Initializable::Initializer", "", "classes/Rails/Initializable/Initializer.html", "", ""],
      ["Rails::Paths", "", "classes/Rails/Paths.html", "", ""],
      ["Rails::Paths::Path", "", "classes/Rails/Paths/Path.html", "", ""],
      ["Rails::Paths::Root", "", "classes/Rails/Paths/Root.html", "", "<p>This object is an extended hash that behaves as root of the\n<code>Rails::Paths</code> system. It allows you to collect …\n"],
      ["Rails::PluginBuilder", "", "classes/Rails/PluginBuilder.html", "", "<p>The plugin builder allows you to override elements of the plugin generator\nwithout being forced to reverse …\n"],
      ["Rails::Rack", "", "classes/Rails/Rack.html", "", ""],
      ["Rails::Rack::Logger", "", "classes/Rails/Rack/Logger.html", "", "<p>Sets log tags, logs the request, calls the app, and flushes the logs.\n<p>Log tags (<code>taggers</code>) can be an Array …\n"],
      ["Rails::Railtie", "", "classes/Rails/Railtie.html", "", "<p><code>Rails::Railtie</code> is the core of the Rails framework and provides\nseveral hooks to extend Rails and/or modify …\n"],
      ["Rails::Railtie::Configurable", "", "classes/Rails/Railtie/Configurable.html", "", ""],
      ["Rails::Railtie::Configurable::ClassMethods", "", "classes/Rails/Railtie/Configurable/ClassMethods.html", "", ""],
      ["Rails::Railtie::Configuration", "", "classes/Rails/Railtie/Configuration.html", "", ""],
      ["Rails::Secrets", "", "classes/Rails/Secrets.html", "", ""],
      ["Rails::Secrets::MissingKeyError", "", "classes/Rails/Secrets/MissingKeyError.html", "", ""],
      ["Rails::Server", "", "classes/Rails/Server.html", "", ""],
      ["Rails::Server::Options", "", "classes/Rails/Server/Options.html", "", ""],
      ["Rails::VERSION", "", "classes/Rails/VERSION.html", "", ""],
      ["Range", "", "classes/Range.html", "", ""],
      ["Rational", "", "classes/Rational.html", "", ""],
      ["SecureRandom", "", "classes/SecureRandom.html", "", ""],
      ["SourceAnnotationExtractor", "", "classes/SourceAnnotationExtractor.html", "", "<p>Implements the logic behind the rake tasks for annotations like\n\n<pre><code>rails notes\nrails notes:optimize\n</code></pre>\n<p>and friends. …\n"],
      ["String", "", "classes/String.html", "", "<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],
      ["Symbol", "", "classes/Symbol.html", "", ""],
      ["Time", "", "classes/Time.html", "", ""],
      ["TrueClass", "", "classes/TrueClass.html", "", ""],
      ["URI", "", "classes/URI.html", "", ""],
      ["!~", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-21-7E", "", "<p>Equivalent to <code>String#!~</code>. Match the class name against the\ngiven regexp. Returns <code>true</code> if there is no match, …\n"],
      ["%", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-25", "(args)", ""],
      ["*", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-2A", "(other)", "<p>Multiplies this Duration by a Numeric and returns a new Duration.\n"],
      ["+", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-2B", "(other)", "<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],
      ["+", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-2B", "(other)", ""],
      ["+", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-2B", "(other)", "<p>Adds an interval of time to the current object&#39;s time and returns that\nvalue as a new TimeWithZone …\n"],
      ["+", "Rails::Initializable::Collection", "classes/Rails/Initializable/Collection.html#method-i-2B", "(other)", ""],
      ["-", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-2D", "(other)", "<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],
      ["-", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-2D", "(other)", "<p>Returns a new TimeWithZone object that represents the difference between\nthe current object&#39;s time …\n"],
      ["-", "Rails::Engine::Railties", "classes/Rails/Engine/Railties.html#method-i-2D", "(others)", ""],
      ["-", "Time", "classes/Time.html#method-i-2D", "(other)", ""],
      ["/", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-2F", "(other)", "<p>Divides this Duration by a Numeric and returns a new Duration.\n"],
      ["<<", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-3C-3C", "(*records)", "<p>Adds one or more <code>records</code> to the collection by setting their\nforeign keys to the association&#39;s primary …\n"],
      ["<<", "ActiveSupport::Inflector::Inflections::Uncountables", "classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-3C-3C", "(*word)", ""],
      ["<<", "ActiveSupport::Notifications::Event", "classes/ActiveSupport/Notifications/Event.html#method-i-3C-3C", "(event)", ""],
      ["<<", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-3C-3C", "(value)", ""],
      ["<<", "Mime::Mimes", "classes/Mime/Mimes.html#method-i-3C-3C", "(type)", ""],
      ["<<", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-3C-3C", "(path)", ""],
      ["<=>", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-3C-3D-3E", "", "<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; ...</code></pre>\n"],
      ["<=>", "ActiveRecord::ConnectionAdapters::AbstractAdapter::Version", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-i-3C-3D-3E", "(version_string)", ""],
      ["<=>", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-3C-3D-3E", "(other_object)", "<p>Allows sort on objects\n"],
      ["<=>", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-3C-3D-3E", "(other)", "<p>Compares one Duration with another or a Numeric to this Duration. Numeric\nvalues are treated as seconds. …\n"],
      ["<=>", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E", "(other)", "<p>Use the time in UTC for comparisons.\n"],
      ["<=>", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-3C-3D-3E", "(zone)", "<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],
      ["<=>", "Date", "classes/Date.html#method-i-3C-3D-3E", "(other)", ""],
      ["<=>", "DateTime", "classes/DateTime.html#method-i-3C-3D-3E", "(other)", "<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],
      ["<=>", "Time", "classes/Time.html#method-i-3C-3D-3E", "(other)", ""],
      ["==", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-3D-3D", "(other)", "<p>Returns true if another <code>Parameters</code> object contains the same\ncontent and permitted flag.\n"],
      ["==", "ActionDispatch::MiddlewareStack::Middleware", "classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D", "(middleware)", ""],
      ["==", "ActionView::FileSystemResolver", "classes/ActionView/FileSystemResolver.html#method-i-3D-3D", "(resolver)", ""],
      ["==", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-i-3D-3D", "(type)", ""],
      ["==", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-3D-3D", "", "<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the\nclass name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre><code>class BlogPost ...</code></pre>\n"],
      ["==", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-3D-3D", "(other)", ""],
      ["==", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-3D-3D", "(other)", ""],
      ["==", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-i-3D-3D", "(other)", ""],
      ["==", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-3D-3D", "(other)", "<p>Equivalent to <code>Array#==</code>. Returns <code>true</code> if the two\narrays contain the same number of elements and if each …\n"],
      ["==", "ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-3D-3D", "(other)", ""],
      ["==", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-3D-3D", "(comparison_object)", "<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],
      ["==", "ActiveRecord::Reflection::MacroReflection", "classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D", "(other_aggregation)", "<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],
      ["==", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-3D-3D", "(other)", "<p>Compares two relations for equality.\n"],
      ["==", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-3D-3D", "(other)", "<p>Returns <code>true</code> if <code>other</code> is also a Duration instance\nwith the same <code>value</code>, or if <code>other == value</code>.\n"],
      ["==", "Mime::Type", "classes/Mime/Type.html#method-i-3D-3D", "(mime_type)", ""],
      ["===", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-3D-3D-3D", "", "<p>Equivalent to <code>#==</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === &#39;BlogPost&#39; ...</code></pre>\n"],
      ["===", "ActiveRecord::Core::ClassMethods", "classes/ActiveRecord/Core/ClassMethods.html#method-i-3D-3D-3D", "(object)", "<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],
      ["===", "ActiveSupport::Multibyte::Unicode::UnicodeDatabase", "classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D", "(other)", ""],
      ["===", "Mime::Type", "classes/Mime/Type.html#method-i-3D-3D-3D", "(list)", ""],
      ["===", "Time", "classes/Time.html#method-c-3D-3D-3D", "(other)", "<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],
      ["=~", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-3D-7E", "", "<p>Equivalent to <code>String#=~</code>. Match the class name against the\ngiven regexp. Returns the position where the …\n"],
      ["=~", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-3D-7E", "(re)", "<p>Compare #name and TZInfo identifier to a supplied regexp, returning\n<code>true</code> if a match is found.\n"],
      ["=~", "Mime::Type", "classes/Mime/Type.html#method-i-3D-7E", "(mime_type)", ""],
      ["GET", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-GET", "()", "<p>Override Rack&#39;s GET method to support indifferent access\n"],
      ["POST", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-POST", "()", "<p>Override Rack&#39;s POST method to support indifferent access\n"],
      ["[]", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-5B-5D", "(key)", "<p>Returns a parameter for the given <code>key</code>. If not found, returns\n<code>nil</code>.\n\n<pre><code>params = ActionController::Parameters.new(person: ...</code></pre>\n"],
      ["[]", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D", "(k)", ""],
      ["[]", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-5B-5D", "(key)", "<p>Returns the value for the given key mapped to @env.\n"],
      ["[]", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-5B-5D", "(i)", ""],
      ["[]", "ActionView::Template::Types", "classes/ActionView/Template/Types.html#method-c-5B-5D", "(type)", ""],
      ["[]", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-c-5B-5D", "(type)", ""],
      ["[]", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-5B-5D", "(attribute)", "<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre><code>person.errors[:name] ...</code></pre>\n"],
      ["[]", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D", "(attr_name)", "<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],
      ["[]", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D", "(name)", "<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],
      ["[]", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-i-5B-5D", "(x)", ""],
      ["[]", "ActiveRecord::FixtureSet::ClassCache", "classes/ActiveRecord/FixtureSet/ClassCache.html#method-i-5B-5D", "(fs_name)", ""],
      ["[]", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-5B-5D", "(version)", ""],
      ["[]", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-5B-5D", "(idx)", ""],
      ["[]", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D", "(key)", ""],
      ["[]", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D", "(*args)", ""],
      ["[]", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D", "(key)", "<p>Same as <code>Hash#[]</code> where the key passed as argument can be either\na string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["[]", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D", "(*args)", ""],
      ["[]", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D", "(key)", "<p>Same as <code>Hash#[]</code> where the key passed as argument can be either\na string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["[]", "ActiveSupport::OrderedOptions", "classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D", "(key)", ""],
      ["[]", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-5B-5D", "(*args)", ""],
      ["[]", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-5B-5D", "(arg)", "<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],
      ["[]", "Mime", "classes/Mime.html#method-c-5B-5D", "(type)", ""],
      ["[]", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-5B-5D", "(path)", ""],
      ["[]=", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-5B-5D-3D", "(key, value)", "<p>Assigns a value to a given <code>key</code>. The given key may still get\nfiltered out when <code>permit</code> is called.\n"],
      ["[]=", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D-3D", "(k, v)", ""],
      ["[]=", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-5B-5D-3D", "(key, value)", "<p>Sets the given value for the key mapped to @env.\n"],
      ["[]=", "ActionMailer::Base::LateAttachmentsProxy", "classes/ActionMailer/Base/LateAttachmentsProxy.html#method-i-5B-5D-3D", "(_name, _content)", ""],
      ["[]=", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D", "(attr_name, value)", "<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected #write_attribute …\n"],
      ["[]=", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D", "(sql, key)", ""],
      ["[]=", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-i-5B-5D-3D", "(k, v)", ""],
      ["[]=", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D", "(key, value)", "<p>Assigns a new value to the hash:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;\n</code></pre>\n"],
      ["[]=", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D", "(key, value)", "<p>Assigns a new value to the hash:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;\n</code></pre>\n"],
      ["[]=", "ActiveSupport::OrderedOptions", "classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D", "(key, value)", ""],
      ["[]=", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-5B-5D-3D", "(path, value)", ""],
      ["_get", "ActiveSupport::OrderedOptions", "classes/ActiveSupport/OrderedOptions.html#method-i-_get", "(key)", ""],
      ["_insert_callbacks", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks", "(callbacks, block = nil)", "<p>Take callback names and an optional callback proc, normalize them, then\ncall the block with each callback. …\n"],
      ["_layout_for", "ActionView::Context", "classes/ActionView/Context.html#method-i-_layout_for", "(name = nil)", "<p>Encapsulates the interaction with the view flow so it returns the correct\nbuffer on <code>yield</code>. This is usually …\n"],
      ["_layout_for", "ActionView::Helpers::RenderingHelper", "classes/ActionView/Helpers/RenderingHelper.html#method-i-_layout_for", "(*args, &block)", "<p>Overwrites _layout_for in the context object so it supports the case a\nblock is passed to a partial. …\n"],
      ["_normalize_args", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-_normalize_args", "(action = nil, options = {})", "<p>Normalize args by converting <code>render &quot;foo&quot;</code> to\n<code>render :action =&gt; &quot;foo&quot;</code> and <code>render</code> …\n"],
      ["_normalize_callback_options", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options", "(options)", "<p>If <code>:only</code> or <code>:except</code> are used, convert the options\ninto the <code>:if</code> and <code>:unless</code> options of\nActiveSupport::Callbacks …\n"],
      ["_normalize_options", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-_normalize_options", "(options)", "<p>Normalize options. :api: plugin\n"],
      ["_normalize_render", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-_normalize_render", "(*args, &block)", "<p>Normalize args and options. :api: private\n"],
      ["_original_sum_with_required_identity", "Enumerable", "classes/Enumerable.html#method-i-_original_sum_with_required_identity", "(identity = nil, &block)", "<p>doesn&#39;t work well bugs.ruby-lang.org/issues/13446\n"],
      ["_prepare_context", "ActionView::Context", "classes/ActionView/Context.html#method-i-_prepare_context", "()", "<p>Prepares the context by setting the appropriate instance variables. :api:\nplugin\n"],
      ["_process_format", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-_process_format", "(format)", "<p>Process the rendered format. :api: private\n"],
      ["_process_options", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-_process_options", "(options)", "<p>Process extra options. :api: plugin\n"],
      ["_process_variant", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-_process_variant", "(options)", ""],
      ["_read_attribute", "ActiveRecord::AttributeMethods::Read", "classes/ActiveRecord/AttributeMethods/Read.html#method-i-_read_attribute", "(attr_name, &block)", "<p>This form is significantly faster on JRuby, and this is one of our biggest\nhotspots. github.com/jruby/jruby/pull/2562 …\n"],
      ["_render_to_body_with_renderer", "ActionController::Renderers", "classes/ActionController/Renderers.html#method-i-_render_to_body_with_renderer", "(options)", ""],
      ["_render_with_renderer_method_name", "ActionController::Renderers", "classes/ActionController/Renderers.html#method-c-_render_with_renderer_method_name", "(key)", ""],
      ["_routes", "AbstractController::UrlFor", "classes/AbstractController/UrlFor.html#method-i-_routes", "()", ""],
      ["_routes", "AbstractController::UrlFor::ClassMethods", "classes/AbstractController/UrlFor/ClassMethods.html#method-i-_routes", "()", ""],
      ["_routes", "ActionView::TestCase::Behavior", "classes/ActionView/TestCase/Behavior.html#method-i-_routes", "()", ""],
      ["_routes_context", "ActionDispatch::Routing::UrlFor", "classes/ActionDispatch/Routing/UrlFor.html#method-i-_routes_context", "()", ""],
      ["_set_detail", "ActionView::LookupContext::DetailsCache", "classes/ActionView/LookupContext/DetailsCache.html#method-i-_set_detail", "(key, value)", ""],
      ["_set_wrapper_options", "ActionController::ParamsWrapper::ClassMethods", "classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-_set_wrapper_options", "(options)", ""],
      ["_to_partial_path", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-c-_to_partial_path", "()", ""],
      ["_url_for_modules", "ActionView::Helpers::UrlHelper::ClassMethods", "classes/ActionView/Helpers/UrlHelper/ClassMethods.html#method-i-_url_for_modules", "()", ""],
      ["_with_routes", "ActionDispatch::Routing::UrlFor", "classes/ActionDispatch/Routing/UrlFor.html#method-i-_with_routes", "(routes)", ""],
      ["abort", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-abort", "()", ""],
      ["abstract!", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-abstract-21", "()", "<p>Define a controller as abstract. See internal_methods for more details.\n"],
      ["abstract_class?", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F", "()", "<p>Returns whether this class is an abstract class or not.\n"],
      ["abstract_railtie?", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-abstract_railtie-3F", "()", ""],
      ["accept", "ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor", "classes/ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html#method-i-accept", "(*)", ""],
      ["accept=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-accept-3D", "(mime_types)", ""],
      ["accept_header", "ActionDispatch::RequestEncoder::IdentityEncoder", "classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-accept_header", "()", ""],
      ["accepts", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-accepts", "()", "<p>Returns the accepted MIME type for the request.\n"],
      ["accepts_nested_attributes_for", "ActiveRecord::NestedAttributes::ClassMethods", "classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for", "(*attr_names)", "<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, …\n"],
      ["accessed_fields", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-accessed_fields", "()", "<p>Returns the name of all database fields which have been read from this\nmodel. This can be useful in development …\n"],
      ["acronym", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-acronym", "(word)", "<p>Specifies a new acronym. An acronym must be specified as it will appear in\na camelized string. An underscore …\n"],
      ["action", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-action", "(name)", "<p>Returns a Rack endpoint for the given action name.\n"],
      ["action", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-action", "()", ""],
      ["action=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-action-3D", "(action_name)", ""],
      ["action_cable_meta_tag", "ActionCable::Helpers::ActionCableHelper", "classes/ActionCable/Helpers/ActionCableHelper.html#method-i-action_cable_meta_tag", "()", "<p>Returns an “action-cable-url” meta tag with the value of the URL specified\nin your configuration. …\n"],
      ["action_has_layout?", "ActionView::Layouts", "classes/ActionView/Layouts.html#method-i-action_has_layout-3F", "()", "<p>Controls whether an action should be rendered using a layout. If you want\nto disable any <code>layout</code> settings …\n"],
      ["action_methods", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-action_methods", "()", "<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],
      ["action_methods", "AbstractController::Base", "classes/AbstractController/Base.html#method-i-action_methods", "()", "<p>Delegates to the class&#39; ::action_methods\n"],
      ["action_methods", "AbstractController::UrlFor::ClassMethods", "classes/AbstractController/UrlFor/ClassMethods.html#method-i-action_methods", "()", ""],
      ["action_methods", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-c-action_methods", "()", "<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],
      ["active?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F", "()", "<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],
      ["active?", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F", "()", ""],
      ["active?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F", "()", "<p>Is this connection alive and ready for queries?\n"],
      ["active?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F", "()", ""],
      ["active_connection?", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F", "()", "<p>Returns true if there is an open connection being used for the current\nthread.\n<p>This method only works …\n"],
      ["active_connections?", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F", "()", "<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],
      ["acts_like?", "Object", "classes/Object.html#method-i-acts_like-3F", "(duck)", "<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an <code>acts_like_date?</code> method, …\n"],
      ["acts_like_date?", "Date", "classes/Date.html#method-i-acts_like_date-3F", "()", "<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],
      ["acts_like_date?", "DateTime", "classes/DateTime.html#method-i-acts_like_date-3F", "()", "<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],
      ["acts_like_string?", "String", "classes/String.html#method-i-acts_like_string-3F", "()", "<p>Enables more predictable duck-typing on String-like classes. See\n<code>Object#acts_like?</code>.\n"],
      ["acts_like_time?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F", "()", "<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],
      ["acts_like_time?", "DateTime", "classes/DateTime.html#method-i-acts_like_time-3F", "()", "<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],
      ["acts_like_time?", "Time", "classes/Time.html#method-i-acts_like_time-3F", "()", "<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],
      ["adapter_name", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name", "()", "<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],
      ["add", "ActionController::Renderers", "classes/ActionController/Renderers.html#method-c-add", "(key, &block)", "<p>Adds a new renderer to call within controller actions. A renderer is\ninvoked by passing its name as an …\n"],
      ["add", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-add", "(key, value)", "<p>Add a value to a multivalued header like Vary or Accept-Encoding.\n"],
      ["add", "ActionView::TestCase::Behavior::RenderedViewsCollection", "classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-add", "(view, locals)", ""],
      ["add", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-add", "(attribute, message = :invalid, options = {})", "<p>Adds <code>message</code> to the error messages and used validator type to\n<code>details</code> on <code>attribute</code>. More than one error …\n"],
      ["add", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add", "(element)", "<p>Add <code>element</code> to the queue.  Never blocks.\n"],
      ["add", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add", "(table_name)", "<p>Add internal cache for table with <code>table_name</code>.\n"],
      ["add", "ActiveSupport::Inflector::Inflections::Uncountables", "classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-add", "(words)", ""],
      ["add", "ActiveSupport::Logger", "classes/ActiveSupport/Logger.html#method-i-add", "(severity, message = nil, progname = nil, &block)", ""],
      ["add", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-add", "(path, options = {})", ""],
      ["add_belongs_to", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to", "(table_name, ref_name, **options)", ""],
      ["add_channel", "ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-add_channel", "(channel, on_success)", ""],
      ["add_channel", "ActionCable::SubscriptionAdapter::Redis::Listener", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-add_channel", "(channel, on_success)", ""],
      ["add_channel", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-add_channel", "(channel, on_success)", ""],
      ["add_column", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column", "(table_name, column_name, type, options = {})", "<p>Add a new <code>type</code> column named <code>column_name</code> to\n<code>table_name</code>.\n<p>The <code>type</code> parameter is normally one of the migrations …\n"],
      ["add_delivery_method", "ActionMailer::DeliveryMethods::ClassMethods", "classes/ActionMailer/DeliveryMethods/ClassMethods.html#method-i-add_delivery_method", "(symbol, klass, default_options = {})", "<p>Adds a new delivery method through the given class using the given symbol\nas alias and the default options …\n"],
      ["add_encrypted_secrets_file", "Rails::Generators::EncryptedSecretsGenerator", "classes/Rails/Generators/EncryptedSecretsGenerator.html#method-i-add_encrypted_secrets_file", "()", ""],
      ["add_event_subscriber", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-c-add_event_subscriber", "(event)", ""],
      ["add_filter", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-i-add_filter", "(&block)", "<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],
      ["add_flash_types", "ActionController::Flash::ClassMethods", "classes/ActionController/Flash/ClassMethods.html#method-i-add_flash_types", "(*types)", "<p>Creates new flash types. You can pass as many types as you want to create\nflash types other than the …\n"],
      ["add_foreign_key", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_foreign_key", "(from_table, to_table, options = {})", "<p>Adds a new foreign key. <code>from_table</code> is the table with the key\ncolumn, <code>to_table</code> contains the referenced …\n"],
      ["add_index", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index", "(table_name, column_name, options = {})", "<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],
      ["add_reference", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference", "(table_name, ref_name, **options)", "<p>Adds a reference. The reference column is an integer by default, the\n<code>:type</code> option can be used to specify …\n"],
      ["add_renderer", "ActionController", "classes/ActionController.html#method-c-add_renderer", "(key, &block)", "<p>See <code>Renderers.add</code>\n"],
      ["add_secrets_key_file", "Rails::Generators::EncryptedSecretsGenerator", "classes/Rails/Generators/EncryptedSecretsGenerator.html#method-i-add_secrets_key_file", "()", ""],
      ["add_shebang_option!", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-add_shebang_option-21", "()", "<p>Small macro to add ruby as an option to the generator with proper default\nvalue plus an instance helper …\n"],
      ["add_silencer", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-i-add_silencer", "(&block)", "<p>Adds a silencer from the block provided. If the silencer returns\n<code>true</code> for a given line, it will be excluded …\n"],
      ["add_source", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-add_source", "(source, options = {}, &block)", "<p>Add the given source to <code>Gemfile</code>\n<p>If block is given, gem entries in block are wrapped into the source group.\n…\n"],
      ["add_subscriber", "ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap", "classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-i-add_subscriber", "(*)", ""],
      ["add_subscriber", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-add_subscriber", "(channel, subscriber, on_success)", ""],
      ["add_tags", "ActionCable::Connection::TaggedLoggerProxy", "classes/ActionCable/Connection/TaggedLoggerProxy.html#method-i-add_tags", "(*tags)", ""],
      ["add_timestamps", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps", "(table_name, options = {})", "<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to <code>table_name</code>. Additional options (like\n<code>:null</code>) are …\n"],
      ["add_transaction_record", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record", "(record)", "<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],
      ["added?", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-added-3F", "(attribute, message = :invalid, options = {})", "<p>Returns <code>true</code> if an error on the attribute with the given\nmessage is present, or <code>false</code> otherwise. <code>message</code> …\n"],
      ["advance", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-advance", "(options)", "<p>Uses Date to provide precise Time calculations for years, months, and days\naccording to the proleptic …\n"],
      ["advance", "Date", "classes/Date.html#method-i-advance", "(options)", "<p>Provides precise Date calculations for years, months, and days. The\n<code>options</code> parameter takes a hash with …\n"],
      ["advance", "DateTime", "classes/DateTime.html#method-i-advance", "(options)", "<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],
      ["advance", "Time", "classes/Time.html#method-i-advance", "(options)", "<p>Uses Date to provide precise Time calculations for years, months, and days\naccording to the proleptic …\n"],
      ["after", "ActionDispatch::Callbacks", "classes/ActionDispatch/Callbacks.html#method-c-after", "(*args, &block)", ""],
      ["after", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-after", "(time = ::Time.current)", ""],
      ["after", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-i-after", "()", ""],
      ["after_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-after_action", "", "<p>Append a callback after actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["after_bundle", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-after_bundle", "(&block)", "<p>Registers a callback to be executed after bundle and spring binstubs have\nrun.\n\n<pre><code>after_bundle do\n  git add: ...</code></pre>\n"],
      ["after_class_unload", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-c-after_class_unload", "(*args, &block)", ""],
      ["after_commit", "ActiveRecord::Transactions::ClassMethods", "classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit", "(*args, &block)", "<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],
      ["after_create_commit", "ActiveRecord::Transactions::ClassMethods", "classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_create_commit", "(*args, &block)", "<p>Shortcut for <code>after_commit :hook, on: :create</code>.\n"],
      ["after_destroy_commit", "ActiveRecord::Transactions::ClassMethods", "classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_destroy_commit", "(*args, &block)", "<p>Shortcut for <code>after_commit :hook, on: :destroy</code>.\n"],
      ["after_enqueue", "ActiveJob::Callbacks::ClassMethods", "classes/ActiveJob/Callbacks/ClassMethods.html#method-i-after_enqueue", "(*filters, &blk)", "<p>Defines a callback that will get called right after the job is enqueued.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],
      ["after_initialize", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-after_initialize", "(&block)", "<p>Last configurable block to run. Called after frameworks initialize.\n"],
      ["after_perform", "ActiveJob::Callbacks::ClassMethods", "classes/ActiveJob/Callbacks/ClassMethods.html#method-i-after_perform", "(*filters, &blk)", "<p>Defines a callback that will get called right after the job&#39;s perform\nmethod has finished.\n\n<pre><code>class VideoProcessJob ...</code></pre>\n"],
      ["after_rollback", "ActiveRecord::Transactions::ClassMethods", "classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback", "(*args, &block)", "<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],
      ["after_subscribe", "ActionCable::Channel::Callbacks", "classes/ActionCable/Channel/Callbacks.html#method-i-after_subscribe", "(*methods, &block)", ""],
      ["after_unsubscribe", "ActionCable::Channel::Callbacks", "classes/ActionCable/Channel/Callbacks.html#method-i-after_unsubscribe", "(*methods, &block)", ""],
      ["after_update_commit", "ActiveRecord::Transactions::ClassMethods", "classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_update_commit", "(*args, &block)", "<p>Shortcut for <code>after_commit :hook, on: :update</code>.\n"],
      ["after_validation", "ActiveModel::Validations::Callbacks::ClassMethods", "classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation", "(*args, &block)", "<p>Defines a callback that will get called right after validation.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],
      ["ago", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-ago", "(time = ::Time.current)", "<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],
      ["ago", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-ago", "(other)", "<p>Subtracts an interval of time from the current object&#39;s time and\nreturns the result as a new TimeWithZone …\n"],
      ["ago", "Date", "classes/Date.html#method-i-ago", "(seconds)", "<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],
      ["ago", "DateTime", "classes/DateTime.html#method-i-ago", "(seconds)", "<p>Returns a new DateTime representing the time a number of seconds ago. Do\nnot use this method in combination …\n"],
      ["ago", "Time", "classes/Time.html#method-i-ago", "(seconds)", "<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],
      ["alert", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-alert", "()", "<p>Convenience accessor for <code>flash[:alert]</code>.\n"],
      ["alert=", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-alert-3D", "(message)", "<p>Convenience accessor for <code>flash[:alert]=</code>.\n"],
      ["alias_attribute", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute", "(new_name, old_name)", "<p>Allows you to make aliases for attributes.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor ...</code></pre>\n"],
      ["alias_attribute", "Module", "classes/Module.html#method-i-alias_attribute", "(new_name, old_name)", "<p>Allows you to make aliases for attributes, which includes getter, setter,\nand a predicate.\n\n<pre><code>class Content ...</code></pre>\n"],
      ["alive?", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-i-alive-3F", "()", ""],
      ["all", "ActionController::MimeResponds::Collector", "classes/ActionController/MimeResponds/Collector.html#method-i-all", "(*args, &block)", ""],
      ["all", "ActionMailer::Collector", "classes/ActionMailer/Collector.html#method-i-all", "(*args, &block)", ""],
      ["all", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-all", "()", "<p>Returns all mailer preview classes.\n"],
      ["all", "ActiveRecord::Scoping::Named::ClassMethods", "classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all", "()", "<p>Returns an ActiveRecord::Relation scope object.\n\n<pre><code>posts = Post.all\nposts.size # Fires &quot;select count(*) from ...\n</code></pre>\n"],
      ["all", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-all", "()", "<p>Returns an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many …\n"],
      ["all", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-c-all", "(klass)", "<p>GET index\n"],
      ["all?", "Mime::AllType", "classes/Mime/AllType.html#method-i-all-3F", "()", ""],
      ["all?", "Mime::Type", "classes/Mime/Type.html#method-i-all-3F", "()", ""],
      ["all_day", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-all_day", "()", "<p>Returns a Range representing the whole day of the current date/time.\n"],
      ["all_helpers_from_path", "ActionController::Helpers::ClassMethods", "classes/ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path", "(path)", "<p>Returns a list of helper names in a given path.\n\n<pre><code>ActionController::Base.all_helpers_from_path &#39;app/helpers&#39; ...</code></pre>\n"],
      ["all_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-all_month", "()", "<p>Returns a Range representing the whole month of the current date/time.\n"],
      ["all_paths", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-all_paths", "()", ""],
      ["all_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-all_quarter", "()", "<p>Returns a Range representing the whole quarter of the current date/time.\n"],
      ["all_timestamp_attributes_in_model", "ActiveRecord::Timestamp", "classes/ActiveRecord/Timestamp.html#method-i-all_timestamp_attributes_in_model", "()", ""],
      ["all_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-all_week", "(start_day = Date.beginning_of_week)", "<p>Returns a Range representing the whole week of the current date/time. Week\nstarts on start_day, default …\n"],
      ["all_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-all_year", "()", "<p>Returns a Range representing the whole year of the current date/time.\n"],
      ["allocate", "ActiveRecord::Core::ClassMethods", "classes/ActiveRecord/Core/ClassMethods.html#method-i-allocate", "()", ""],
      ["allowed_index_name_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-allowed_index_name_length", "()", "<p>Returns the maximum allowed length for an index name. This limit is\nenforced by Rails and is less than …\n"],
      ["allowed_index_name_length", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-allowed_index_name_length", "()", "<p>Returns 62. SQLite supports index names up to 64 characters. The rest is\nused by Rails internally to …\n"],
      ["annotations", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-annotations", "()", ""],
      ["announce", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-announce", "(message)", ""],
      ["anonymous?", "Module", "classes/Module.html#method-i-anonymous-3F", "()", "<p>A module may or may not have a name.\n\n<pre><code>module M; end\nM.name # =&gt; &quot;M&quot;\n\nm = Module.new\nm.name # =&gt; nil\n</code></pre>\n<p><code>anonymous?</code> …\n"],
      ["any", "ActionController::MimeResponds::Collector", "classes/ActionController/MimeResponds/Collector.html#method-i-any", "(*args, &block)", ""],
      ["any", "ActionMailer::Collector", "classes/ActionMailer/Collector.html#method-i-any", "(*args, &block)", ""],
      ["any?", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-any-3F", "(name, prefixes = [], partial = false)", ""],
      ["any?", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F", "", "<p>Returns <code>true</code> if the collection is not empty.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</code></pre>\n"],
      ["any?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-any-3F", "()", "<p>Returns true if there are any records.\n"],
      ["any?", "ActiveSupport::ArrayInquirer", "classes/ActiveSupport/ArrayInquirer.html#method-i-any-3F", "(*candidates)", "<p>Passes each element of <code>candidates</code> collection to ArrayInquirer\ncollection. The method returns true if …\n"],
      ["any_templates?", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-any_templates-3F", "(name, prefixes = [], partial = false)", ""],
      ["any_waiting?", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F", "()", "<p>Test if any threads are currently waiting on the queue.\n"],
      ["api_dir", "Rails::API::RepoTask", "classes/Rails/API/RepoTask.html#method-i-api_dir", "()", ""],
      ["api_main", "Rails::API::Task", "classes/Rails/API/Task.html#method-i-api_main", "()", ""],
      ["api_only!", "Rails::Generators", "classes/Rails/Generators.html#method-c-api_only-21", "()", "<p>Configure generators for API only applications. It basically hides\neverything that is usually browser …\n"],
      ["api_only=", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-api_only-3D", "(value)", ""],
      ["api_only?", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-api_only-3F", "()", ""],
      ["app", "ActionDispatch::IntegrationTest::Behavior", "classes/ActionDispatch/IntegrationTest/Behavior.html#method-i-app", "()", ""],
      ["app", "ActionDispatch::IntegrationTest::Behavior::ClassMethods", "classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html#method-i-app", "()", ""],
      ["app", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-app", "()", ""],
      ["app", "Rails::ConsoleMethods", "classes/Rails/ConsoleMethods.html#method-i-app", "(create = false)", "<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],
      ["app", "Rails::Engine", "classes/Rails/Engine.html#method-i-app", "()", "<p>Returns the underlying Rack application for this engine.\n"],
      ["app", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-app", "()", ""],
      ["app", "Rails::Server", "classes/Rails/Server.html#method-i-app", "()", "<p>TODO: this is no longer required but we keep it for the moment to support\nolder config.ru files.\n"],
      ["app=", "ActionDispatch::IntegrationTest::Behavior::ClassMethods", "classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html#method-i-app-3D", "(app)", ""],
      ["app_generators", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-app_generators", "()", "<p>This allows you to modify application&#39;s generators from Railties.\n<p>Values set on app_generators will …\n"],
      ["app_middleware", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-app_middleware", "()", "<p>This allows you to modify the application&#39;s middlewares from Engines.\n<p>All operations you run on the …\n"],
      ["append", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-append", "(*records)", ""],
      ["append_after_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_after_action", "", "<p>Append a callback after actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["append_around_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_around_action", "", "<p>Append a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["append_before_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_before_action", "", "<p>Append a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["append_features", "ActiveSupport::Concern", "classes/ActiveSupport/Concern.html#method-i-append_features", "(base)", ""],
      ["append_view_path", "ActionView::ViewPaths", "classes/ActionView/ViewPaths.html#method-i-append_view_path", "(path)", "<p>Append a path to the list of view paths for the current\n<code>LookupContext</code>.\n<p>Parameters\n<p><code>path</code> - If a String is …\n"],
      ["append_view_path", "ActionView::ViewPaths::ClassMethods", "classes/ActionView/ViewPaths/ClassMethods.html#method-i-append_view_path", "(path)", "<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],
      ["application", "Rails", "classes/Rails.html#method-c-application", "()", ""],
      ["application", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-application", "(data = nil, options = {})", ""],
      ["application_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-application_name", "()", "<p>Tries to retrieve the application name or simply return application.\n"],
      ["application_trace", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-application_trace", "()", ""],
      ["arguments", "Rails::Generators::Testing::Behaviour::ClassMethods", "classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-arguments", "(array)", "<p>Sets default arguments on generator invocation. This can be overwritten\nwhen invoking it.\n\n<pre><code>arguments %w(app_name ...</code></pre>\n"],
      ["around_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-around_action", "", "<p>Append a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["around_enqueue", "ActiveJob::Callbacks::ClassMethods", "classes/ActiveJob/Callbacks/ClassMethods.html#method-i-around_enqueue", "(*filters, &blk)", "<p>Defines a callback that will get called around the enqueueing of the job.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],
      ["around_perform", "ActiveJob::Callbacks::ClassMethods", "classes/ActiveJob/Callbacks/ClassMethods.html#method-i-around_perform", "(*filters, &blk)", "<p>Defines a callback that will get called around the job&#39;s perform\nmethod.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],
      ["as_json", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-as_json", "", "<p>Returns a hash that can be used as the JSON representation for the\nparameters.\n"],
      ["as_json", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-as_json", "(options = nil)", "<p>Returns a Hash that can be used as the JSON representation for this object.\nYou can pass the <code>:full_messages</code> …\n"],
      ["as_json", "ActiveModel::Serializers::JSON", "classes/ActiveModel/Serializers/JSON.html#method-i-as_json", "(options = nil)", "<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],
      ["as_json", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-as_json", "(options = nil)", "<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:%S …\n"],
      ["as_json", "Exception", "classes/Exception.html#method-i-as_json", "(options = nil)", ""],
      ["assert_changes", "ActiveSupport::Testing::Assertions", "classes/ActiveSupport/Testing/Assertions.html#method-i-assert_changes", "(expression, message = nil, from: UNTRACKED, to: UNTRACKED, &block)", "<p>Assertion that the result of evaluating an expression is changed before and\nafter invoking the passed …\n"],
      ["assert_class_method", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_class_method", "(method, content, &block)", "<p>Asserts the given class method exists in the given content. This method\ndoes not detect class methods …\n"],
      ["assert_difference", "ActiveSupport::Testing::Assertions", "classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference", "(expression, difference = 1, message = nil, &block)", "<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],
      ["assert_directory", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_directory", "(relative, *contents)", ""],
      ["assert_emails", "ActionMailer::TestHelper", "classes/ActionMailer/TestHelper.html#method-i-assert_emails", "(number)", "<p>Asserts that the number of emails sent matches the given number.\n\n<pre><code>def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver_now ...</code></pre>\n"],
      ["assert_enqueued_emails", "ActionMailer::TestHelper", "classes/ActionMailer/TestHelper.html#method-i-assert_enqueued_emails", "(number, &block)", "<p>Asserts that the number of emails enqueued for later delivery matches the\ngiven number.\n\n<pre><code>def test_emails ...</code></pre>\n"],
      ["assert_enqueued_jobs", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-assert_enqueued_jobs", "(number, only: nil, queue: nil)", "<p>Asserts that the number of enqueued jobs matches the given number.\n\n<pre><code>def test_jobs\n  assert_enqueued_jobs ...</code></pre>\n"],
      ["assert_enqueued_with", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-assert_enqueued_with", "(job: nil, args: nil, at: nil, queue: nil)", "<p>Asserts that the job passed in the block has been enqueued with the given\narguments.\n\n<pre><code>def test_assert_enqueued_with ...</code></pre>\n"],
      ["assert_field_default_value", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_default_value", "(attribute_type, value)", "<p>Asserts the given attribute type gets a proper default value:\n\n<pre><code>assert_field_default_value :string, &quot;MyString&quot;\n</code></pre>\n"],
      ["assert_field_type", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_type", "(attribute_type, field_type)", "<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre><code>assert_field_type :date, :date_select\n</code></pre>\n"],
      ["assert_file", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_file", "(relative, *contents)", "<p>Asserts a given file exists. You need to supply an absolute path or a path\nrelative to the configured …\n"],
      ["assert_generates", "ActionDispatch::Assertions::RoutingAssertions", "classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates", "(expected_path, options, defaults = {}, extras = {}, message = nil)", "<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],
      ["assert_instance_method", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_instance_method", "(method, content)", "<p>Asserts the given method exists in the given content. When a block is\ngiven, it yields the content of …\n"],
      ["assert_method", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_method", "(method, content)", ""],
      ["assert_migration", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_migration", "(relative, *contents, &block)", "<p>Asserts a given migration exists. You need to supply an absolute path or a\npath relative to the configured …\n"],
      ["assert_no_changes", "ActiveSupport::Testing::Assertions", "classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_changes", "(expression, message = nil, &block)", "<p>Assertion that the result of evaluating an expression is changed before and\nafter invoking the passed …\n"],
      ["assert_no_difference", "ActiveSupport::Testing::Assertions", "classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference", "(expression, message = nil, &block)", "<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],
      ["assert_no_directory", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_directory", "(relative)", ""],
      ["assert_no_emails", "ActionMailer::TestHelper", "classes/ActionMailer/TestHelper.html#method-i-assert_no_emails", "(&block)", "<p>Asserts that no emails have been sent.\n\n<pre><code>def test_emails\n  assert_no_emails\n  ContactMailer.welcome.deliver_now ...</code></pre>\n"],
      ["assert_no_enqueued_emails", "ActionMailer::TestHelper", "classes/ActionMailer/TestHelper.html#method-i-assert_no_enqueued_emails", "(&block)", "<p>Asserts that no emails are enqueued for later delivery.\n\n<pre><code>def test_no_emails\n  assert_no_enqueued_emails ...</code></pre>\n"],
      ["assert_no_enqueued_jobs", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-assert_no_enqueued_jobs", "(only: nil, &block)", "<p>Asserts that no jobs have been enqueued.\n\n<pre><code>def test_jobs\n  assert_no_enqueued_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...</code></pre>\n"],
      ["assert_no_file", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_file", "(relative)", "<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],
      ["assert_no_migration", "Rails::Generators::Testing::Assertions", "classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_migration", "(relative)", "<p>Asserts a given migration does not exist. You need to supply an absolute\npath or a path relative to the …\n"],
      ["assert_no_performed_jobs", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-assert_no_performed_jobs", "(only: nil, &block)", "<p>Asserts that no jobs have been performed.\n\n<pre><code>def test_jobs\n  assert_no_performed_jobs\n\n  perform_enqueued_jobs ...</code></pre>\n"],
      ["assert_not", "ActiveSupport::Testing::Assertions", "classes/ActiveSupport/Testing/Assertions.html#method-i-assert_not", "(object, message = nil)", "<p>Asserts that an expression is not truthy. Passes if <code>object</code> is\n<code>nil</code> or <code>false</code>. “Truthy” means …\n"],
      ["assert_nothing_raised", "ActiveSupport::Testing::Assertions", "classes/ActiveSupport/Testing/Assertions.html#method-i-assert_nothing_raised", "()", "<p>Assertion that the block should not raise an exception.\n<p>Passes if evaluated code in the yielded block …\n"],
      ["assert_performed_jobs", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-assert_performed_jobs", "(number, only: nil)", "<p>Asserts that the number of performed jobs matches the given number. If no\nblock is passed, <code>perform_enqueued_jobs</code> …\n"],
      ["assert_performed_with", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-assert_performed_with", "(job: nil, args: nil, at: nil, queue: nil)", "<p>Asserts that the job passed in the block has been performed with the given\narguments.\n\n<pre><code>def test_assert_performed_with ...</code></pre>\n"],
      ["assert_recognizes", "ActionDispatch::Assertions::RoutingAssertions", "classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes", "(expected_options, path, extras = {}, msg = nil)", "<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],
      ["assert_redirected_to", "ActionDispatch::Assertions::ResponseAssertions", "classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to", "(options = {}, message = nil)", "<p>Asserts that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],
      ["assert_response", "ActionDispatch::Assertions::ResponseAssertions", "classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response", "(type, message = nil)", "<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],
      ["assert_routing", "ActionDispatch::Assertions::RoutingAssertions", "classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing", "(path, options, defaults = {}, extras = {}, message = nil)", "<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],
      ["assert_template", "ActionController::TemplateAssertions", "classes/ActionController/TemplateAssertions.html#method-i-assert_template", "(options = {}, message = nil)", ""],
      ["assert_valid_keys", "Hash", "classes/Hash.html#method-i-assert_valid_keys", "(*valid_keys)", "<p>Validates all keys in a hash match <code>*valid_keys</code>, raising\n<code>ArgumentError</code> on a mismatch.\n<p>Note that keys are …\n"],
      ["assert_valid_value", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-assert_valid_value", "(*)", ""],
      ["assert_valid_value", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-assert_valid_value", "(*)", ""],
      ["asset_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_path", "(source, options = {})", "<p>This is the entry point for all assets. When using the asset pipeline (i.e.\nsprockets and sprockets-rails), …\n"],
      ["asset_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_url", "(source, options = {})", "<p>Computes the full URL to an asset in the public directory. This will use\n<code>asset_path</code> internally, so most …\n"],
      ["assets_manifest", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-assets_manifest", "()", ""],
      ["assign_attributes", "ActiveModel::AttributeAssignment", "classes/ActiveModel/AttributeAssignment.html#method-i-assign_attributes", "(new_attributes)", "<p>Allows you to set all the attributes by passing in a hash of attributes\nwith keys matching the attribute …\n"],
      ["assigns", "ActionDispatch::TestProcess", "classes/ActionDispatch/TestProcess.html#method-i-assigns", "(key = nil)", ""],
      ["assume_migrated_upto_version", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version", "(version, migrations_paths)", ""],
      ["at", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-at", "(secs)", "<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],
      ["at", "String", "classes/String.html#method-i-at", "(position)", "<p>If you pass a single integer, returns a substring of one character at that\nposition. The first character …\n"],
      ["at", "Time", "classes/Time.html#method-c-at", "(*args)", ""],
      ["at_beginning_of_day", "Date", "classes/Date.html#method-i-at_beginning_of_day", "()", ""],
      ["at_beginning_of_day", "DateTime", "classes/DateTime.html#method-i-at_beginning_of_day", "()", ""],
      ["at_beginning_of_day", "Time", "classes/Time.html#method-i-at_beginning_of_day", "()", ""],
      ["at_beginning_of_hour", "DateTime", "classes/DateTime.html#method-i-at_beginning_of_hour", "()", ""],
      ["at_beginning_of_hour", "Time", "classes/Time.html#method-i-at_beginning_of_hour", "()", ""],
      ["at_beginning_of_minute", "DateTime", "classes/DateTime.html#method-i-at_beginning_of_minute", "()", ""],
      ["at_beginning_of_minute", "Time", "classes/Time.html#method-i-at_beginning_of_minute", "()", ""],
      ["at_beginning_of_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_beginning_of_month", "()", ""],
      ["at_beginning_of_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_beginning_of_quarter", "()", ""],
      ["at_beginning_of_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_beginning_of_week", "(start_day = Date.beginning_of_week)", ""],
      ["at_beginning_of_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_beginning_of_year", "()", ""],
      ["at_end_of_day", "Date", "classes/Date.html#method-i-at_end_of_day", "()", ""],
      ["at_end_of_day", "DateTime", "classes/DateTime.html#method-i-at_end_of_day", "()", ""],
      ["at_end_of_day", "Time", "classes/Time.html#method-i-at_end_of_day", "()", ""],
      ["at_end_of_hour", "DateTime", "classes/DateTime.html#method-i-at_end_of_hour", "()", ""],
      ["at_end_of_hour", "Time", "classes/Time.html#method-i-at_end_of_hour", "()", ""],
      ["at_end_of_minute", "DateTime", "classes/DateTime.html#method-i-at_end_of_minute", "()", ""],
      ["at_end_of_minute", "Time", "classes/Time.html#method-i-at_end_of_minute", "()", ""],
      ["at_end_of_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_end_of_month", "()", ""],
      ["at_end_of_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_end_of_quarter", "()", ""],
      ["at_end_of_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_end_of_week", "(start_day = Date.beginning_of_week)", ""],
      ["at_end_of_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-at_end_of_year", "()", ""],
      ["at_midday", "Date", "classes/Date.html#method-i-at_midday", "()", ""],
      ["at_midday", "DateTime", "classes/DateTime.html#method-i-at_midday", "()", ""],
      ["at_midday", "Time", "classes/Time.html#method-i-at_midday", "()", ""],
      ["at_middle_of_day", "Date", "classes/Date.html#method-i-at_middle_of_day", "()", ""],
      ["at_middle_of_day", "DateTime", "classes/DateTime.html#method-i-at_middle_of_day", "()", ""],
      ["at_middle_of_day", "Time", "classes/Time.html#method-i-at_middle_of_day", "()", ""],
      ["at_midnight", "Date", "classes/Date.html#method-i-at_midnight", "()", ""],
      ["at_midnight", "DateTime", "classes/DateTime.html#method-i-at_midnight", "()", ""],
      ["at_midnight", "Time", "classes/Time.html#method-i-at_midnight", "()", ""],
      ["at_noon", "Date", "classes/Date.html#method-i-at_noon", "()", ""],
      ["at_noon", "DateTime", "classes/DateTime.html#method-i-at_noon", "()", ""],
      ["at_noon", "Time", "classes/Time.html#method-i-at_noon", "()", ""],
      ["at_with_coercion", "Time", "classes/Time.html#method-c-at_with_coercion", "(*args)", "<p>Layers additional behavior on Time.at so that ActiveSupport::TimeWithZone\nand DateTime instances can …\n"],
      ["at_without_coercion", "Time", "classes/Time.html#method-c-at_without_coercion", "(*args)", ""],
      ["atom_feed", "ActionView::Helpers::AtomFeedHelper", "classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed", "(options = {}, &block)", "<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERB …\n"],
      ["atomic_write", "File", "classes/File.html#method-c-atomic_write", "(file_name, temp_dir = dirname(file_name))", "<p>Write to a file atomically. Useful for situations where you don&#39;t want\nother processes or threads …\n"],
      ["attach", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-i-attach", "(io, stream)", ""],
      ["attach_to", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-c-attach_to", "(namespace, subscriber = new, notifier = ActiveSupport::Notifications)", "<p>Attach the subscriber to a namespace.\n"],
      ["attachments", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-i-attachments", "()", "<p>Allows you to add attachments to an email, like so:\n\n<pre><code>mail.attachments[&#39;filename.jpg&#39;] = File.read(&#39;/path/to/filename.jpg&#39;)\n</code></pre>\n"],
      ["attachments", "ActionMailer::MailHelper", "classes/ActionMailer/MailHelper.html#method-i-attachments", "()", "<p>Access the message attachments list.\n"],
      ["attr_internal", "Module", "classes/Module.html#method-i-attr_internal", "(*attrs)", ""],
      ["attr_internal_accessor", "Module", "classes/Module.html#method-i-attr_internal_accessor", "(*attrs)", "<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],
      ["attr_internal_reader", "Module", "classes/Module.html#method-i-attr_internal_reader", "(*attrs)", "<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],
      ["attr_internal_writer", "Module", "classes/Module.html#method-i-attr_internal_writer", "(*attrs)", "<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],
      ["attr_readonly", "ActiveRecord::ReadonlyAttributes::ClassMethods", "classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly", "(*attributes)", "<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],
      ["attribute", "ActiveRecord::Attributes::ClassMethods", "classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute", "(name, cast_type = Type::Value.new, **options)", "<p>Defines an attribute with a type on this model. It will override the type\nof existing attributes if needed. …\n"],
      ["attribute_alias", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias", "(name)", "<p>Returns the original name for the alias <code>name</code>\n"],
      ["attribute_alias?", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias-3F", "(new_name)", "<p>Is <code>new_name</code> an alias?\n"],
      ["attribute_for_inspect", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect", "(attr_name)", "<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],
      ["attribute_method?", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F", "(attribute)", "<p>Returns <code>true</code> if <code>attribute</code> is an attribute method,\n<code>false</code> otherwise.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],
      ["attribute_method?", "ActiveRecord::AttributeMethods::ClassMethods", "classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F", "(attribute)", "<p>Returns <code>true</code> if <code>attribute</code> is an attribute method\nand table exists, <code>false</code> otherwise.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["attribute_method_affix", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix", "(*affixes)", "<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],
      ["attribute_method_prefix", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix", "(*prefixes)", "<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],
      ["attribute_method_suffix", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix", "(*suffixes)", "<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],
      ["attribute_missing", "ActiveModel::AttributeMethods", "classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing", "(match, *args, &block)", "<p><code>attribute_missing</code> is like <code>method_missing</code>, but for\nattributes. When <code>method_missing</code> is called we check …\n"],
      ["attribute_names", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-attribute_names", "()", "<p>Returns an array of names for the attributes available on this object.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["attribute_names", "ActiveRecord::AttributeMethods::ClassMethods", "classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names", "()", "<p>Returns an array of column names as strings if it&#39;s not an abstract\nclass and table exists. Otherwise …\n"],
      ["attribute_present?", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F", "(attribute)", "<p>Returns <code>true</code> if the specified <code>attribute</code> has been\nset by the user or by a database load and is neither …\n"],
      ["attributes", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-attributes", "()", "<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],
      ["attributes=", "ActiveRecord::AttributeAssignment", "classes/ActiveRecord/AttributeAssignment.html#method-i-attributes-3D", "(attributes)", "<p>Alias for ActiveModel::AttributeAssignment#assign_attributes. See\nActiveModel::AttributeAssignment.\n"],
      ["attributes_before_type_cast", "ActiveRecord::AttributeMethods::BeforeTypeCast", "classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast", "()", "<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre><code>class Task &lt; ActiveRecord::Base\nend ...</code></pre>\n"],
      ["attributes_for_hash", "ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-attributes_for_hash", "()", ""],
      ["attributes_names", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-attributes_names", "()", ""],
      ["audio_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_path", "(source, options = {})", "<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],
      ["audio_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag", "(*sources)", "<p>Returns an HTML audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],
      ["audio_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_url", "(source, options = {})", "<p>Computes the full URL to an audio asset in the public audios directory.\nThis will use <code>audio_path</code> internally, …\n"],
      ["auth_param", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-auth_param", "(request)", ""],
      ["auth_scheme", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-auth_scheme", "(request)", ""],
      ["authenticate", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-authenticate", "(request, &login_procedure)", ""],
      ["authenticate", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-authenticate", "(request, realm, &password_procedure)", "<p>Returns false on a valid response, true otherwise\n"],
      ["authenticate", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-authenticate", "(controller, &login_procedure)", "<p>If token Authorization header is present, call the login procedure with the\npresent token and options. …\n"],
      ["authenticate", "ActiveModel::SecurePassword::InstanceMethodsOnActivation", "classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate", "(unencrypted_password)", "<p>Returns <code>self</code> if the password is correct, otherwise\n<code>false</code>.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_secure_password ...</code></pre>\n"],
      ["authenticate_or_request_with_http_basic", "ActionController::HttpAuthentication::Basic::ControllerMethods", "classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic", "(realm = \"Application\", message = nil, &login_procedure)", ""],
      ["authenticate_or_request_with_http_digest", "ActionController::HttpAuthentication::Digest::ControllerMethods", "classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest", "(realm = \"Application\", message = nil, &password_procedure)", ""],
      ["authenticate_or_request_with_http_token", "ActionController::HttpAuthentication::Token::ControllerMethods", "classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token", "(realm = \"Application\", message = nil, &login_procedure)", ""],
      ["authenticate_with_http_basic", "ActionController::HttpAuthentication::Basic::ControllerMethods", "classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic", "(&login_procedure)", ""],
      ["authenticate_with_http_digest", "ActionController::HttpAuthentication::Digest::ControllerMethods", "classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest", "(realm = \"Application\", &password_procedure)", "<p>Authenticate with HTTP Digest, returns true or false\n"],
      ["authenticate_with_http_token", "ActionController::HttpAuthentication::Token::ControllerMethods", "classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token", "(&login_procedure)", ""],
      ["authentication_header", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_header", "(controller, realm)", ""],
      ["authentication_request", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-authentication_request", "(controller, realm, message)", ""],
      ["authentication_request", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_request", "(controller, realm, message = nil)", ""],
      ["authentication_request", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-authentication_request", "(controller, realm, message = nil)", "<p>Sets a WWW-Authenticate header to let the client know a token is desired.\n<p>controller - ActionController::Base …\n"],
      ["authorization", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-authorization", "()", "<p>Returns the authorization header regardless of whether it was specified\ndirectly or through one of the …\n"],
      ["auto_discovery_link_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag", "(type = :rss, url_options = {}, tag_options = {})", "<p>Returns a link tag that browsers and feed readers can use to auto-detect an\nRSS or Atom feed. The <code>type</code> …\n"],
      ["autoload", "ActiveSupport::Autoload", "classes/ActiveSupport/Autoload.html#method-i-autoload", "(const_name, path = @_at_path)", ""],
      ["autoload_at", "ActiveSupport::Autoload", "classes/ActiveSupport/Autoload.html#method-i-autoload_at", "(path)", ""],
      ["autoload_once", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-autoload_once", "()", ""],
      ["autoload_once_paths", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths", "()", ""],
      ["autoload_paths", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-i-autoload_paths", "()", ""],
      ["autoload_paths", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-autoload_paths", "()", ""],
      ["autoload_under", "ActiveSupport::Autoload", "classes/ActiveSupport/Autoload.html#method-i-autoload_under", "(path)", ""],
      ["autoloads", "ActiveSupport::Autoload", "classes/ActiveSupport/Autoload.html#method-i-autoloads", "()", ""],
      ["autosave=", "ActiveRecord::Reflection::MacroReflection", "classes/ActiveRecord/Reflection/MacroReflection.html#method-i-autosave-3D", "(autosave)", ""],
      ["available_action?", "AbstractController::Base", "classes/AbstractController/Base.html#method-i-available_action-3F", "(action_name)", "<p>Returns true if a method for the action is available and can be dispatched,\nfalse otherwise.\n<p>Notice that …\n"],
      ["average", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-average", "(column_name)", "<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere&#39;s no row. See #calculate for …\n"],
      ["await_commit", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-await_commit", "()", ""],
      ["await_sent", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-await_sent", "()", ""],
      ["backend", "ActiveSupport::XmlMini", "classes/ActiveSupport/XmlMini.html#method-i-backend", "()", ""],
      ["backend=", "ActiveSupport::XmlMini", "classes/ActiveSupport/XmlMini.html#method-i-backend-3D", "(name)", ""],
      ["backtrace_cleaner", "Rails", "classes/Rails.html#method-c-backtrace_cleaner", "()", ""],
      ["banner", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-banner", "(*)", "<p>Use Rails&#39; default banner.\n"],
      ["banner", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-banner", "()", "<p>Use Rails default banner.\n"],
      ["base58", "SecureRandom", "classes/SecureRandom.html#method-c-base58", "(n = 16)", "<p>SecureRandom.base58 generates a random base58 string.\n<p>The argument <em>n</em> specifies the length, of the random …\n"],
      ["base_class", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class", "()", "<p>Returns the class descending directly from ActiveRecord::Base, or an\nabstract class, if any, in the inheritance …\n"],
      ["base_name", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-base_name", "()", "<p>Sets the base_name taking into account the current class namespace.\n\n<pre><code>Rails::Command::TestCommand.base_name ...</code></pre>\n"],
      ["base_name", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-base_name", "()", "<p>Sets the base_name taking into account the current class namespace.\n"],
      ["base_root", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-base_root", "()", "<p>Returns the base root for a common set of generators. This is used to\ndynamically guess the default source …\n"],
      ["beat", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-i-beat", "()", ""],
      ["becomes", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-becomes", "(klass)", "<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],
      ["becomes!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-becomes-21", "(klass)", "<p>Wrapper around #becomes that also changes the instance&#39;s sti column\nvalue. This is especially useful …\n"],
      ["before", "ActionDispatch::Callbacks", "classes/ActionDispatch/Callbacks.html#method-c-before", "(*args, &block)", ""],
      ["before", "ActionView::Digestor::PerExecutionDigestCacheExpiry", "classes/ActionView/Digestor/PerExecutionDigestCacheExpiry.html#method-c-before", "(target)", ""],
      ["before", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-before", "(time = ::Time.current)", ""],
      ["before", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-i-before", "()", ""],
      ["before_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action", "", "<p>Append a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["before_class_unload", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-c-before_class_unload", "(*args, &block)", ""],
      ["before_configuration", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-before_configuration", "(&block)", "<p>First configurable block to run. Called before any initializers are run.\n"],
      ["before_eager_load", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-before_eager_load", "(&block)", "<p>Third configurable block to run. Does not run if\n<code>config.cache_classes</code> set to false.\n"],
      ["before_enqueue", "ActiveJob::Callbacks::ClassMethods", "classes/ActiveJob/Callbacks/ClassMethods.html#method-i-before_enqueue", "(*filters, &blk)", "<p>Defines a callback that will get called right before the job is enqueued.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],
      ["before_filters", "ActionController::Testing::ClassMethods", "classes/ActionController/Testing/ClassMethods.html#method-i-before_filters", "()", ""],
      ["before_initialize", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-before_initialize", "(&block)", "<p>Second configurable block to run. Called before frameworks initialize.\n"],
      ["before_perform", "ActiveJob::Callbacks::ClassMethods", "classes/ActiveJob/Callbacks/ClassMethods.html#method-i-before_perform", "(*filters, &blk)", "<p>Defines a callback that will get called right before the job&#39;s perform\nmethod is executed.\n\n<pre><code>class VideoProcessJob ...</code></pre>\n"],
      ["before_subscribe", "ActionCable::Channel::Callbacks", "classes/ActionCable/Channel/Callbacks.html#method-i-before_subscribe", "(*methods, &block)", ""],
      ["before_unsubscribe", "ActionCable::Channel::Callbacks", "classes/ActionCable/Channel/Callbacks.html#method-i-before_unsubscribe", "(*methods, &block)", ""],
      ["before_validation", "ActiveModel::Validations::Callbacks::ClassMethods", "classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation", "(*args, &block)", "<p>Defines a callback that will get called right before validation.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],
      ["begin_db_transaction", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-begin_db_transaction", "()", ""],
      ["begin_db_transaction", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction", "()", "<p>Begins the transaction (and turns off auto-committing).\n"],
      ["begin_db_transaction", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-begin_db_transaction", "()", "<p>Begins a transaction.\n"],
      ["begin_isolated_db_transaction", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-begin_isolated_db_transaction", "(isolation)", ""],
      ["begin_isolated_db_transaction", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction", "(isolation)", "<p>Begins the transaction with the isolation level set. Raises an error by\ndefault; adapters that support …\n"],
      ["begin_isolated_db_transaction", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-begin_isolated_db_transaction", "(isolation)", ""],
      ["beginning_of_day", "Date", "classes/Date.html#method-i-beginning_of_day", "()", "<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],
      ["beginning_of_day", "DateTime", "classes/DateTime.html#method-i-beginning_of_day", "()", "<p>Returns a new DateTime representing the start of the day (0:00).\n"],
      ["beginning_of_day", "Time", "classes/Time.html#method-i-beginning_of_day", "()", "<p>Returns a new Time representing the start of the day (0:00)\n"],
      ["beginning_of_hour", "DateTime", "classes/DateTime.html#method-i-beginning_of_hour", "()", "<p>Returns a new DateTime representing the start of the hour (hh:00:00).\n"],
      ["beginning_of_hour", "Time", "classes/Time.html#method-i-beginning_of_hour", "()", "<p>Returns a new Time representing the start of the hour (x:00)\n"],
      ["beginning_of_minute", "DateTime", "classes/DateTime.html#method-i-beginning_of_minute", "()", "<p>Returns a new DateTime representing the start of the minute (hh:mm:00).\n"],
      ["beginning_of_minute", "Time", "classes/Time.html#method-i-beginning_of_minute", "()", "<p>Returns a new Time representing the start of the minute (x:xx:00)\n"],
      ["beginning_of_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-beginning_of_month", "()", "<p>Returns a new date/time at the start of the month.\n\n<pre><code>today = Date.today # =&gt; Thu, 18 Jun 2015\ntoday.beginning_of_month ...</code></pre>\n"],
      ["beginning_of_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-beginning_of_quarter", "()", "<p>Returns a new date/time at the start of the quarter.\n\n<pre><code>today = Date.today # =&gt; Fri, 10 Jul 2015\ntoday.beginning_of_quarter ...</code></pre>\n"],
      ["beginning_of_week", "Date", "classes/Date.html#method-c-beginning_of_week", "()", "<p>Returns the week start (e.g. :monday) for the current request, if this has\nbeen set (via Date.beginning_of_week= …\n"],
      ["beginning_of_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-beginning_of_week", "(start_day = Date.beginning_of_week)", "<p>Returns a new date/time representing the start of this week on the given\nday. Week is assumed to start …\n"],
      ["beginning_of_week=", "Date", "classes/Date.html#method-c-beginning_of_week-3D", "(week_start)", "<p>Sets <code>Date.beginning_of_week</code> to a week start (e.g. :monday) for\ncurrent request/thread.\n<p>This method accepts …\n"],
      ["beginning_of_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-beginning_of_year", "()", "<p>Returns a new date/time at the beginning of the year.\n\n<pre><code>today = Date.today # =&gt; Fri, 10 Jul 2015\ntoday.beginning_of_year ...</code></pre>\n"],
      ["behavior", "ActiveSupport::Deprecation::Behavior", "classes/ActiveSupport/Deprecation/Behavior.html#method-i-behavior", "()", "<p>Returns the current behavior or if one isn&#39;t set, defaults to\n<code>:stderr</code>.\n"],
      ["behavior=", "ActiveSupport::Deprecation::Behavior", "classes/ActiveSupport/Deprecation/Behavior.html#method-i-behavior-3D", "(behavior)", "<p>Sets the behavior to the specified value. Can be a single value, array, or\nan object that responds to …\n"],
      ["belongs_to", "ActiveRecord::Associations::ClassMethods", "classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to", "(name, scope = nil, options = {})", "<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],
      ["belongs_to", "ActiveRecord::ConnectionAdapters::SQLite3::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/SQLite3/TableDefinition.html#method-i-belongs_to", "(*args, **options)", ""],
      ["belongs_to", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to", "(*args, **options)", ""],
      ["belongs_to", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to", "(*args, **options)", ""],
      ["belongs_to?", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-i-belongs_to-3F", "(group)", ""],
      ["benchmark", "ActiveSupport::Benchmarkable", "classes/ActiveSupport/Benchmarkable.html#method-i-benchmark", "(message = \"Benchmarking\", options = {})", "<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],
      ["between?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-between-3F", "(min, max)", "<p>Returns true if the current object&#39;s time is within the specified\n<code>min</code> and <code>max</code> time.\n"],
      ["bigserial", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bigserial", "(*args, **options)", ""],
      ["bin", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-bin", "()", ""],
      ["bin", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-bin", "(force = false)", ""],
      ["bin_when_updating", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-bin_when_updating", "()", ""],
      ["binary?", "ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-binary-3F", "()", ""],
      ["bind", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-i-bind", "(context)", ""],
      ["bit", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit", "(*args, **options)", ""],
      ["bit_varying", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit_varying", "(*args, **options)", ""],
      ["blank?", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-blank-3F", "()", ""],
      ["blank?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-blank-3F", "()", "<p>Returns true if relation is blank.\n"],
      ["blank?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-blank-3F", "()", "<p>An instance of ActiveSupport::TimeWithZone is never blank\n"],
      ["blank?", "FalseClass", "classes/FalseClass.html#method-i-blank-3F", "()", "<p><code>false</code> is blank:\n\n<pre><code>false.blank? # =&gt; true\n</code></pre>\n<p>@return [true]\n"],
      ["blank?", "NilClass", "classes/NilClass.html#method-i-blank-3F", "()", "<p><code>nil</code> is blank:\n\n<pre><code>nil.blank? # =&gt; true\n</code></pre>\n<p>@return [true]\n"],
      ["blank?", "Object", "classes/Object.html#method-i-blank-3F", "()", "<p>An object is blank if it&#39;s false, empty, or a whitespace string. For\nexample, <code>false</code>, &#39;&#39;, …\n"],
      ["blank?", "String", "classes/String.html#method-i-blank-3F", "()", "<p>A string is blank if it&#39;s empty or contains whitespaces only:\n\n<pre><code>&#39;&#39;.blank?       # =&gt; true\n&#39;   &#39;.blank? ...</code></pre>\n"],
      ["blank?", "TrueClass", "classes/TrueClass.html#method-i-blank-3F", "()", "<p><code>true</code> is not blank:\n\n<pre><code>true.blank? # =&gt; false\n</code></pre>\n<p>@return [false]\n"],
      ["blob", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-blob", "(*args, **options)", ""],
      ["block_format", "ActionMailer::MailHelper", "classes/ActionMailer/MailHelper.html#method-i-block_format", "(text)", "<p>Take the text and format it, indented two spaces for each line, and wrapped\nat 72 columns:\n\n<pre><code>text = &lt;&lt;-TEXT ...</code></pre>\n"],
      ["body", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-body", "()", "<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],
      ["body", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-body", "()", "<p>Returns the content of the response as a string. This contains the contents\nof any calls to <code>render</code>.\n"],
      ["body", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-i-body", "()", ""],
      ["body=", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-body-3D", "(body)", "<p>Allows you to manually set or override the response body.\n"],
      ["body_parts", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-body_parts", "()", ""],
      ["bound_attributes", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-bound_attributes", "()", ""],
      ["box", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-box", "(*args, **options)", ""],
      ["broadcast", "ActionCable::Server::Broadcasting", "classes/ActionCable/Server/Broadcasting.html#method-i-broadcast", "(broadcasting, message, coder: ActiveSupport::JSON)", "<p>Broadcast a hash directly to a named <code>broadcasting</code>. This will\nlater be JSON encoded.\n"],
      ["broadcast", "ActionCable::Server::Broadcasting::Broadcaster", "classes/ActionCable/Server/Broadcasting/Broadcaster.html#method-i-broadcast", "(message)", ""],
      ["broadcast", "ActionCable::SubscriptionAdapter::Base", "classes/ActionCable/SubscriptionAdapter/Base.html#method-i-broadcast", "(channel, payload)", ""],
      ["broadcast", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-broadcast", "(channel, message)", ""],
      ["broadcast_to", "ActionCable::Channel::Broadcasting", "classes/ActionCable/Channel/Broadcasting.html#method-i-broadcast_to", "(model, message)", "<p>Broadcast a hash to a unique broadcasting for this <code>model</code> in\nthis channel.\n"],
      ["broadcaster_for", "ActionCable::Server::Broadcasting", "classes/ActionCable/Server/Broadcasting.html#method-i-broadcaster_for", "(broadcasting, coder: ActiveSupport::JSON)", "<p>Returns a broadcaster for a named <code>broadcasting</code> that can be\nreused. Useful when you have an object that …\n"],
      ["build", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-build", "(app = Proc.new)", ""],
      ["build", "ActionDispatch::MiddlewareStack::Middleware", "classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-build", "(app)", ""],
      ["build", "ActionView::Resolver::Path", "classes/ActionView/Resolver/Path.html#method-c-build", "(name, prefix, partial)", ""],
      ["build", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-i-build", "(*args, &block)", ""],
      ["build", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-build", "(attributes = {}, &block)", "<p>Returns a new object of the collection type that has been instantiated with\n<code>attributes</code> and linked to …\n"],
      ["build", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-build", "(*args, &block)", ""],
      ["build", "ActiveSupport::Callbacks::Filters::After", "classes/ActiveSupport/Callbacks/Filters/After.html#method-c-build", "(callback_sequence, user_callback, user_conditions, chain_config)", ""],
      ["build", "ActiveSupport::Callbacks::Filters::Before", "classes/ActiveSupport/Callbacks/Filters/Before.html#method-c-build", "(callback_sequence, user_callback, user_conditions, chain_config, filter)", ""],
      ["build", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-c-build", "(klass, params = nil)", "<p>GET new POST create\n"],
      ["build_queue", "ActiveJob::QueueAdapters::QueueClassicAdapter", "classes/ActiveJob/QueueAdapters/QueueClassicAdapter.html#method-i-build_queue", "(queue_name)", "<p>Builds a <code>QC::Queue</code> object to schedule jobs on.\n<p>If you have a custom <code>QC::Queue</code> subclass you&#39;ll need …\n"],
      ["build_response", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-build_response", "(klass)", ""],
      ["build_stack", "Rails::Application::DefaultMiddlewareStack", "classes/Rails/Application/DefaultMiddlewareStack.html#method-i-build_stack", "()", ""],
      ["button", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-button", "(value = nil, options = {}, &block)", "<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],
      ["button_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag", "(content_or_options = nil, options = nil, &block)", "<p>Creates a button element that defines a <code>submit</code> button,\n<code>reset</code> button or a generic button which can be …\n"],
      ["button_to", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-button_to", "(name = nil, options = nil, html_options = nil, &block)", "<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],
      ["byte", "Numeric", "classes/Numeric.html#method-i-byte", "()", ""],
      ["bytes", "Numeric", "classes/Numeric.html#method-i-bytes", "()", "<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n\n<pre><code>2.bytes # =&gt; 2\n</code></pre>\n"],
      ["cache", "AbstractController::Caching", "classes/AbstractController/Caching.html#method-i-cache", "(key, options = {}, &block)", "<p>Convenience accessor.\n"],
      ["cache", "ActionView::Helpers::CacheHelper", "classes/ActionView/Helpers/CacheHelper.html#method-i-cache", "(name = {}, options = {}, &block)", "<p>This helper exposes a method for caching fragments of a view rather than an\nentire action or page. This …\n"],
      ["cache", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache", "()", "<p>Enable the query cache within the block.\n"],
      ["cache", "ActiveRecord::QueryCache::ClassMethods", "classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache", "(&block)", "<p>Enable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],
      ["cache_fixtures", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-cache_fixtures", "(connection, fixtures_map)", ""],
      ["cache_for_connection", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-cache_for_connection", "(connection)", ""],
      ["cache_fragment_name", "ActionView::Helpers::CacheHelper", "classes/ActionView/Helpers/CacheHelper.html#method-i-cache_fragment_name", "(name = {}, skip_digest: nil, virtual_path: nil)", "<p>This helper returns the name of a cache key for a given fragment cache\ncall. By supplying <code>skip_digest:</code> …\n"],
      ["cache_if", "ActionView::Helpers::CacheHelper", "classes/ActionView/Helpers/CacheHelper.html#method-i-cache_if", "(condition, name = {}, options = {}, &block)", "<p>Cache fragments of a view if <code>condition</code> is true\n\n<pre><code>&lt;% cache_if admin?, project do %&gt;\n  &lt;b&gt;All the topics on ...</code></pre>\n"],
      ["cache_key", "ActiveRecord::Integration", "classes/ActiveRecord/Integration.html#method-i-cache_key", "(*timestamp_names)", "<p>Returns a cache key that can be used to identify this record.\n\n<pre><code>Product.new.cache_key     # =&gt; &quot;products/new&quot; ...\n</code></pre>\n"],
      ["cache_key", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-cache_key", "(timestamp_column = :updated_at)", "<p>Returns a cache key that can be used to identify the records fetched by\nthis query. The cache key is …\n"],
      ["cache_message", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-cache_message", "(payload)", ""],
      ["cache_store", "AbstractController::Caching::ConfigMethods", "classes/AbstractController/Caching/ConfigMethods.html#method-i-cache_store", "()", ""],
      ["cache_store=", "AbstractController::Caching::ConfigMethods", "classes/AbstractController/Caching/ConfigMethods.html#method-i-cache_store-3D", "(store)", ""],
      ["cache_template_loading", "ActionView::Base", "classes/ActionView/Base.html#method-c-cache_template_loading", "()", ""],
      ["cache_template_loading=", "ActionView::Base", "classes/ActionView/Base.html#method-c-cache_template_loading-3D", "(value)", ""],
      ["cache_unless", "ActionView::Helpers::CacheHelper", "classes/ActionView/Helpers/CacheHelper.html#method-i-cache_unless", "(condition, name = {}, options = {}, &block)", "<p>Cache fragments of a view unless <code>condition</code> is true\n\n<pre><code>&lt;% cache_unless admin?, project do %&gt;\n  &lt;b&gt;All the ...</code></pre>\n"],
      ["cached_fixtures", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-cached_fixtures", "(connection, keys_to_fetch = nil)", ""],
      ["calculate", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-calculate", "(operation, column_name)", ""],
      ["calculate", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-calculate", "(operation, column_name)", "<p>This calculates aggregate values in the given column. Methods for #count,\n#sum, #average, #minimum, and …\n"],
      ["calculate_ip", "ActionDispatch::RemoteIp::GetIp", "classes/ActionDispatch/RemoteIp/GetIp.html#method-i-calculate_ip", "()", "<p>Sort through the various IP address headers, looking for the IP most likely\nto be the address of the …\n"],
      ["call", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-call", "(env)", "<p>Called by Rack to setup the server.\n"],
      ["call", "ActionDispatch::Callbacks", "classes/ActionDispatch/Callbacks.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::Cookies", "classes/ActionDispatch/Cookies.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::DebugExceptions", "classes/ActionDispatch/DebugExceptions.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::DebugLocks", "classes/ActionDispatch/DebugLocks.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::Executor", "classes/ActionDispatch/Executor.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::FileHandler", "classes/ActionDispatch/FileHandler.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::PublicExceptions", "classes/ActionDispatch/PublicExceptions.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::RemoteIp", "classes/ActionDispatch/RemoteIp.html#method-i-call", "(env)", "<p>Since the IP address may not be needed, we store the object here without\ncalculating the IP to keep from …\n"],
      ["call", "ActionDispatch::RequestId", "classes/ActionDispatch/RequestId.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::SSL", "classes/ActionDispatch/SSL.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::ShowExceptions", "classes/ActionDispatch/ShowExceptions.html#method-i-call", "(env)", ""],
      ["call", "ActionDispatch::Static", "classes/ActionDispatch/Static.html#method-i-call", "(env)", ""],
      ["call", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-call", "(email)", "<p>Returns the mail object for the given email name. The registered preview\ninterceptors will be informed …\n"],
      ["call", "ActionView::Template::Handlers::Builder", "classes/ActionView/Template/Handlers/Builder.html#method-i-call", "(template)", ""],
      ["call", "ActionView::Template::Handlers::ERB", "classes/ActionView/Template/Handlers/ERB.html#method-c-call", "(template)", ""],
      ["call", "ActionView::Template::Handlers::ERB", "classes/ActionView/Template/Handlers/ERB.html#method-i-call", "(template)", ""],
      ["call", "ActionView::Template::Handlers::Html", "classes/ActionView/Template/Handlers/Html.html#method-i-call", "(template)", ""],
      ["call", "ActionView::Template::Handlers::Raw", "classes/ActionView/Template/Handlers/Raw.html#method-i-call", "(template)", ""],
      ["call", "ActiveRecord::Migration::CheckPending", "classes/ActiveRecord/Migration/CheckPending.html#method-i-call", "(env)", ""],
      ["call", "ActiveSupport::Callbacks::Conditionals::Value", "classes/ActiveSupport/Callbacks/Conditionals/Value.html#method-i-call", "(target, value)", ""],
      ["call", "ActiveSupport::Logger::SimpleFormatter", "classes/ActiveSupport/Logger/SimpleFormatter.html#method-i-call", "(severity, timestamp, progname, msg)", "<p>This method is invoked when a log event occurs\n"],
      ["call", "Rails::Engine", "classes/Rails/Engine.html#method-i-call", "(env)", "<p>Define the Rack API for this engine.\n"],
      ["call", "Rails::Rack::Logger", "classes/Rails/Rack/Logger.html#method-i-call", "(env)", ""],
      ["call_app", "Rails::Rack::Logger", "classes/Rails/Rack/Logger.html#method-i-call_app", "(request, env)", ""],
      ["camelcase", "String", "classes/String.html#method-i-camelcase", "(first_letter = :upper)", ""],
      ["camelize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-camelize", "(term, uppercase_first_letter = true)", "<p>Converts strings to UpperCamelCase. If the\n<code>uppercase_first_letter</code> parameter is set to false, then\nproduces …\n"],
      ["camelize", "String", "classes/String.html#method-i-camelize", "(first_letter = :upper)", "<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],
      ["capify!", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-capify-21", "()", "<p>Just run the capify command in root\n\n<pre><code>capify!\n</code></pre>\n"],
      ["capitalize", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-capitalize", "()", "<p>Converts the first character to uppercase and the remainder to lowercase.\n\n<pre><code>&#39;über&#39;.mb_chars.capitalize.to_s ...</code></pre>\n"],
      ["capture", "ActionView::Helpers::CaptureHelper", "classes/ActionView/Helpers/CaptureHelper.html#method-i-capture", "(*args)", "<p>The capture method extracts part of a template as a String object. You can\nthen use this object anywhere …\n"],
      ["cast", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-cast", "(value)", "<p>Type casts a value from user input (e.g. from a setter). This value may be\na string from the form builder, …\n"],
      ["cast", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-cast", "(value)", "<p>Type casts a value from user input (e.g. from a setter). This value may be\na string from the form builder, …\n"],
      ["cast_value", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-cast_value", "(value)", "<p>Convenience method for types which do not need separate type casting\nbehavior for user and database inputs. …\n"],
      ["cast_value", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-cast_value", "(value)", "<p>Convenience method for types which do not need separate type casting\nbehavior for user and database inputs. …\n"],
      ["cattr_accessor", "Module", "classes/Module.html#method-i-cattr_accessor", "(*syms, &blk)", ""],
      ["cattr_reader", "Module", "classes/Module.html#method-i-cattr_reader", "(*syms)", ""],
      ["cattr_writer", "Module", "classes/Module.html#method-i-cattr_writer", "(*syms)", ""],
      ["cdata_block", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block", "(string)", ""],
      ["cdata_section", "ActionView::Helpers::TagHelper", "classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section", "(content)", "<p>Returns a CDATA section with the given <code>content</code>. CDATA sections\nare used to escape blocks of text containing …\n"],
      ["change", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change", "(column_name, type, options = {})", "<p>Changes the column&#39;s definition according to the new options.\n\n<pre><code>t.change(:name, :string, limit: 80) ...</code></pre>\n"],
      ["change", "Date", "classes/Date.html#method-i-change", "(options)", "<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],
      ["change", "DateTime", "classes/DateTime.html#method-i-change", "(options)", "<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],
      ["change", "Time", "classes/Time.html#method-i-change", "(options)", "<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],
      ["change_column", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column", "(table_name, column_name, type, options = {})", "<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],
      ["change_column_default", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default", "(table_name, column_name, default_or_changes)", "<p>Sets a new default value for a column:\n\n<pre><code>change_column_default(:suppliers, :qualification, &#39;new&#39;)\nchange_column_default(:accounts, ...</code></pre>\n"],
      ["change_column_null", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null", "(table_name, column_name, null, default = nil)", "<p>Sets or removes a <code>NOT NULL</code> constraint on a column. The\n<code>null</code> flag indicates whether the value can be  …\n"],
      ["change_default", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default", "(column_name, default_or_changes)", "<p>Sets a new default value for a column.\n\n<pre><code>t.change_default(:qualification, &#39;new&#39;)\nt.change_default(:authorized, ...</code></pre>\n"],
      ["change_table", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table", "(table_name, options = {})", "<p>A block for changing columns in <code>table</code>.\n\n<pre><code># change_table() yields a Table instance\nchange_table(:suppliers) ...</code></pre>\n"],
      ["change_table_comment", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table_comment", "(table_name, comment)", "<p>Changes the comment for a table or removes it if <code>nil</code>.\n"],
      ["changed", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-changed", "()", "<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre><code>person.changed # =&gt; []\nperson.name ...</code></pre>\n"],
      ["changed?", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-changed-3F", "()", "<p>Returns <code>true</code> if any of the attributes have unsaved changes,\n<code>false</code> otherwise.\n\n<pre><code>person.changed? # =&gt; false ...\n</code></pre>\n"],
      ["changed?", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-changed-3F", "(old_value, new_value, _new_value_before_type_cast)", "<p>Determines whether a value has changed for dirty checking.\n<code>old_value</code> and <code>new_value</code> will always be type-cast.\n…\n"],
      ["changed?", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-changed-3F", "(old_value, new_value, _new_value_before_type_cast)", "<p>Determines whether a value has changed for dirty checking.\n<code>old_value</code> and <code>new_value</code> will always be type-cast.\n…\n"],
      ["changed_attributes", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-changed_attributes", "()", "<p>Returns a hash of the attributes with unsaved changes indicating their\noriginal values like <code>attr =&gt;</code> …\n"],
      ["changed_for_autosave?", "ActiveRecord::AutosaveAssociation", "classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F", "()", "<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],
      ["changed_in_place?", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-changed_in_place-3F", "(raw_old_value, new_value)", "<p>Determines whether the mutable value has been modified since it was read.\nReturns <code>false</code> by default.  …\n"],
      ["changed_in_place?", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-changed_in_place-3F", "(raw_old_value, new_value)", "<p>Determines whether the mutable value has been modified since it was read.\nReturns <code>false</code> by default.  …\n"],
      ["changes", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-changes", "()", "<p>Returns a hash of changed attributes indicating their original and new\nvalues like <code>attr =&gt; [original</code> …\n"],
      ["changes_applied", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-changes_applied", "()", "<p>Removes current changes and makes them accessible through\n<code>previous_changes</code>.\n"],
      ["channel_name", "ActionCable::Channel::Naming", "classes/ActionCable/Channel/Naming.html#method-i-channel_name", "()", "<p>Returns the name of the channel, underscored, without the\n<code>Channel</code> ending. If the channel is in a namespace, …\n"],
      ["characters", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters", "(string)", ""],
      ["charset", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-charset", "()", "<p>The charset of the response. HTML wants to know the encoding of the content\nyou&#39;re giving them, so …\n"],
      ["charset", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-charset", "()", "<p>Returns the database character set.\n"],
      ["charset", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset", "(*arguments)", ""],
      ["charset=", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-charset-3D", "(charset)", "<p>Sets the HTTP character set. In case of <code>nil</code> parameter it sets\nthe charset to utf-8.\n\n<pre><code>response.charset = ...</code></pre>\n"],
      ["charset_current", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current", "(environment = env)", ""],
      ["check_box", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-check_box", "(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")", "<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],
      ["check_box", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-check_box", "(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")", "<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],
      ["check_box_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag", "(name, value = \"1\", checked = false, options = {})", "<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use …\n"],
      ["check_class_collision", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-c-check_class_collision", "(options = {})", "<p>Add a class collisions name to be checked on class initialization. You can\nsupply a hash with a :prefix …\n"],
      ["check_pending!", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-check_pending-21", "(connection = Base.connection)", "<p>Raises <code>ActiveRecord::PendingMigrationError</code> error if any\nmigrations are pending.\n"],
      ["check_protected_environments!", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_protected_environments-21", "()", ""],
      ["check_schema_file", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_schema_file", "(filename)", ""],
      ["checkin", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin", "(conn)", "<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],
      ["checkout", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout", "(checkout_timeout = @checkout_timeout)", "<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],
      ["children", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-children", "()", ""],
      ["cidr", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-cidr", "(*args, **options)", ""],
      ["circle", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-circle", "(*args, **options)", ""],
      ["citext", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-citext", "(*args, **options)", ""],
      ["civil_from_format", "DateTime", "classes/DateTime.html#method-c-civil_from_format", "(utc_or_local, year, month = 1, day = 1, hour = 0, min = 0, sec = 0)", "<p>Returns DateTime with local offset for given year if format is local else\noffset is zero.\n\n<pre><code>DateTime.civil_from_format ...</code></pre>\n"],
      ["class", "ActiveSupport::Deprecation::DeprecatedConstantProxy", "classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-class", "()", "<p>Returns the class of the new constant.\n\n<pre><code>PLANETS_POST_2006 = %w(mercury venus earth mars jupiter saturn ...</code></pre>\n"],
      ["class_attribute", "Class", "classes/Class.html#method-i-class_attribute", "(*attrs)", "<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],
      ["class_eval", "Kernel", "classes/Kernel.html#method-i-class_eval", "(*args, &block)", "<p>class_eval on an object acts like singleton_class.class_eval.\n"],
      ["class_methods", "ActiveSupport::Concern", "classes/ActiveSupport/Concern.html#method-i-class_methods", "(&class_methods_module_definition)", ""],
      ["class_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-class_name", "()", ""],
      ["class_path", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-class_path", "()", ""],
      ["classify", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-classify", "(table_name)", "<p>Creates a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],
      ["classify", "String", "classes/String.html#method-i-classify", "()", "<p>Creates a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],
      ["clean", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-i-clean", "(backtrace, kind = :silent)", "<p>Returns the backtrace after all filters and silencers have been run against\nit. Filters run first, then …\n"],
      ["cleanup", "ActiveSupport::Cache::FileStore", "classes/ActiveSupport/Cache/FileStore.html#method-i-cleanup", "(options = nil)", "<p>Preemptively iterates through all stored keys and removes the ones which\nhave expired.\n"],
      ["cleanup", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-cleanup", "(options = nil)", "<p>Preemptively iterates through all stored keys and removes the ones which\nhave expired.\n"],
      ["cleanup", "ActiveSupport::Cache::NullStore", "classes/ActiveSupport/Cache/NullStore.html#method-i-cleanup", "(options = nil)", ""],
      ["cleanup", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-cleanup", "(options = nil)", "<p>Cleanups the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],
      ["clear", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-clear", "()", ""],
      ["clear", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-clear", "()", "<p>Clear the error messages.\n\n<pre><code>person.errors.full_messages # =&gt; [&quot;name cannot be nil&quot;]\nperson.errors.clear ...</code></pre>\n"],
      ["clear", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-clear", "()", "<p>Equivalent to <code>delete_all</code>. The difference is that returns\n<code>self</code>, instead of an array with the deleted objects, …\n"],
      ["clear", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear", "()", "<p>Remove all elements from the queue.\n"],
      ["clear", "ActiveSupport::Cache::FileStore", "classes/ActiveSupport/Cache/FileStore.html#method-i-clear", "(options = nil)", "<p>Deletes all items from the cache. In this case it deletes all the entries\nin the specified file store …\n"],
      ["clear", "ActiveSupport::Cache::MemCacheStore", "classes/ActiveSupport/Cache/MemCacheStore.html#method-i-clear", "(options = nil)", "<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],
      ["clear", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-clear", "(options = nil)", "<p>Delete all data stored in a given cache store.\n"],
      ["clear", "ActiveSupport::Cache::NullStore", "classes/ActiveSupport/Cache/NullStore.html#method-i-clear", "(options = nil)", ""],
      ["clear", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-clear", "(options = nil)", "<p>Clears the entire cache. Be careful with this method since it could affect\nother processes if shared …\n"],
      ["clear", "ActiveSupport::Cache::Strategy::LocalCache::LocalStore", "classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear", "(options = nil)", ""],
      ["clear", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-c-clear", "()", ""],
      ["clear", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-clear", "(scope = :all)", "<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],
      ["clear!", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21", "()", "<p>Clears out internal caches\n"],
      ["clear!", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21", "()", ""],
      ["clear_action_methods!", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-clear_action_methods-21", "()", "<p>action_methods are cached and there is sometimes a need to refresh them.\n::clear_action_methods! allows …\n"],
      ["clear_action_methods!", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-c-clear_action_methods-21", "()", "<p>action_methods are cached and there is sometimes need to refresh them.\n::clear_action_methods! allows …\n"],
      ["clear_active_connections!", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21", "()", "<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],
      ["clear_all_connections!", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21", "()", ""],
      ["clear_attribute_changes", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-clear_attribute_changes", "(attributes)", "<p>Remove changes information for the provided attributes.\n"],
      ["clear_cache", "ActionView::Resolver", "classes/ActionView/Resolver.html#method-i-clear_cache", "()", ""],
      ["clear_cache!", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-clear_cache-21", "()", "<p>Clears the prepared statements cache.\n"],
      ["clear_cache!", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21", "()", "<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],
      ["clear_cache!", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21", "()", "<p>Clears the prepared statements cache.\n"],
      ["clear_cache!", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-clear_cache-21", "()", "<p>Clears the prepared statements cache.\n"],
      ["clear_changes_information", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-clear_changes_information", "()", "<p>Clears all dirty data: current changes and previous changes.\n"],
      ["clear_data_source_cache!", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_data_source_cache-21", "(name)", "<p>Clear out internal caches for the data source <code>name</code>.\n"],
      ["clear_helpers", "AbstractController::Helpers::ClassMethods", "classes/AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers", "()", "<p>Clears up all existing helpers in this class, only keeping the helper with\nthe same name as this class. …\n"],
      ["clear_query_cache", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache", "()", "<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],
      ["clear_reloadable_connections", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections", "(raise_on_acquisition_timeout = true)", "<p>Clears the cache which maps classes and re-connects connections that\nrequire reloading.\n<p>Raises:\n<p>ActiveRecord::ExclusiveConnectionTimeoutError …\n"],
      ["clear_reloadable_connections!", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21", "()", "<p>Clears the cache which maps classes.\n<p>See ConnectionPool#clear_reloadable_connections! for details.\n"],
      ["clear_reloadable_connections!", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21", "()", "<p>Clears the cache which maps classes and re-connects connections that\nrequire reloading.\n<p>The pool first …\n"],
      ["clear_validators!", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21", "()", "<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to …\n"],
      ["client_min_messages", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages", "()", "<p>Returns the current client message level.\n"],
      ["client_min_messages=", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages-3D", "(level)", "<p>Set the client message level.\n"],
      ["clone", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-clone", "", "<p>Identical to Ruby&#39;s clone method.  This is a “shallow” copy.  Be warned\nthat your attributes …\n"],
      ["clone_empty", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-clone_empty", "()", ""],
      ["close", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-i-close", "()", "<p>Close the WebSocket connection.\n"],
      ["close", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-i-close", "()", ""],
      ["close", "ActionController::Live::SSE", "classes/ActionController/Live/SSE.html#method-i-close", "()", ""],
      ["close", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-close", "(unlink_now = false)", "<p>Shortcut for <code>tempfile.close</code>.\n"],
      ["close", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-close", "()", ""],
      ["close", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-i-close", "()", ""],
      ["close", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close", "()", "<p>Check the connection back in to the connection pool\n"],
      ["close", "ActiveSupport::Gzip::Stream", "classes/ActiveSupport/Gzip/Stream.html#method-i-close", "()", ""],
      ["code", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-code", "()", "<p>Returns a string to ensure compatibility with\n<code>Net::HTTPResponse</code>.\n"],
      ["code_and_name", "ActionDispatch::AssertionResponse", "classes/ActionDispatch/AssertionResponse.html#method-i-code_and_name", "()", ""],
      ["collation", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-collation", "()", "<p>Returns the database collation strategy.\n"],
      ["collation", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-collation", "()", "<p>Returns the current database collation.\n"],
      ["collation", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation", "(*arguments)", ""],
      ["collation_current", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current", "(environment = env)", ""],
      ["collection", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection", "()", "<p>To add a route to the collection:\n\n<pre><code>resources :photos do\n  collection do\n    get &#39;search&#39;\n  end\nend\n</code></pre>\n<p>This …\n"],
      ["collection_check_boxes", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes", "(method, collection, value_method, text_method, options = {}, html_options = {}, &block)", "<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_check_boxes for\nform builders:\n\n<pre><code>&lt;%= form_for @post ...</code></pre>\n"],
      ["collection_check_boxes", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes", "(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)", "<p>Returns check box tags for the collection of existing return values of\n<code>method</code> for <code>object</code>&#39;s class. …\n"],
      ["collection_radio_buttons", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-collection_radio_buttons", "(method, collection, value_method, text_method, options = {}, html_options = {}, &block)", "<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_radio_buttons for\nform builders:\n\n<pre><code>&lt;%= form_for ...</code></pre>\n"],
      ["collection_radio_buttons", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons", "(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)", "<p>Returns radio button tags for the collection of existing return values of\n<code>method</code> for <code>object</code>&#39;s class. …\n"],
      ["collection_select", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select", "(method, collection, value_method, text_method, options = {}, html_options = {})", "<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_select for form\nbuilders:\n\n<pre><code>&lt;%= form_for @post do ...</code></pre>\n"],
      ["collection_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select", "(object, method, collection, value_method, text_method, options = {}, html_options = {})", "<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],
      ["collector", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-collector", "()", ""],
      ["color", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-i-color", "(text, color, bold = false)", "<p>Set color by using a symbol or one of the defined constants. If a third\noption is set to <code>true</code>, it also …\n"],
      ["color_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-color_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “color”.\n\n<pre><code>color_field(&quot;car&quot;, &quot;color&quot;)\n# =&gt; &lt;input id=&quot;car_color&quot; ...\n</code></pre>\n"],
      ["color_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-color_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “color”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],
      ["colorize_logging", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-colorize_logging", "()", ""],
      ["colorize_logging=", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D", "(val)", ""],
      ["column", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column", "(column_name, type, options = {})", "<p>Adds a new column to the named table.\n\n<pre><code>t.column(:name, :string)\n</code></pre>\n<p>See TableDefinition#column for details of …\n"],
      ["column", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column", "(name, type, options = {})", "<p>Instantiates a new column for the table. See connection.add_column for\navailable options.\n<p>Additional options …\n"],
      ["column_defaults", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults", "()", "<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],
      ["column_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F", "(table_name, column_name, type = nil, options = {})", "<p>Checks to see if a column exists in a given table.\n\n<pre><code># Check a column exists\ncolumn_exists?(:suppliers, ...</code></pre>\n"],
      ["column_exists?", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F", "(column_name, type = nil, options = {})", "<p>Checks to see if a column exists.\n\n<pre><code>t.string(:name) unless t.column_exists?(:name, :string)\n</code></pre>\n<p>See connection.column_exists? …\n"],
      ["column_for_attribute", "ActiveRecord::AttributeMethods::ClassMethods", "classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-column_for_attribute", "(name)", "<p>Returns the column object for the named attribute. Returns a\n<code>ActiveRecord::ConnectionAdapters::NullColumn</code> …\n"],
      ["column_name_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length", "()", "<p>Returns the maximum length of a column name.\n"],
      ["column_names", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names", "()", "<p>Returns an array of column names as strings.\n"],
      ["column_spec", "ActiveRecord::ConnectionAdapters::ColumnDumper", "classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec", "(column)", ""],
      ["column_spec_for_primary_key", "ActiveRecord::ConnectionAdapters::ColumnDumper", "classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec_for_primary_key", "(column)", ""],
      ["columns", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns", "(table_name)", "<p>Get the columns for a table\n"],
      ["columns", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns", "(table_name)", "<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],
      ["columns", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns", "()", "<p>Returns an array of ColumnDefinition objects for the columns of the table.\n"],
      ["columns", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns", "()", ""],
      ["columns_hash", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash", "(table_name)", "<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],
      ["columns_per_multicolumn_index", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index", "()", "<p>Returns the maximum number of columns in a multicolumn index.\n"],
      ["columns_per_table", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table", "()", "<p>Returns the maximum number of columns per table.\n"],
      ["command_name", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-command_name", "()", "<p>Return command name without namespaces.\n\n<pre><code>Rails::Command::TestCommand.command_name # =&gt; &#39;test&#39;\n</code></pre>\n"],
      ["command_type", "Rails::Command", "classes/Rails/Command.html#method-c-command_type", "()", ""],
      ["command_type", "Rails::Generators", "classes/Rails/Generators.html#method-c-command_type", "()", ""],
      ["commit", "ActiveRecord::ConnectionAdapters::RealTransaction", "classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-commit", "()", ""],
      ["commit", "ActiveRecord::ConnectionAdapters::SavepointTransaction", "classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-commit", "()", ""],
      ["commit!", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-commit-21", "()", ""],
      ["commit_db_transaction", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction", "()", "<p>Commits the transaction (and turns on auto-committing).\n"],
      ["commit_db_transaction", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-commit_db_transaction", "()", "<p>Commits a transaction.\n"],
      ["commit_flash", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-commit_flash", "()", ""],
      ["committed?", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-committed-3F", "()", ""],
      ["committed?", "ActiveRecord::ConnectionAdapters::TransactionState", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F", "()", ""],
      ["compact", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-compact", "()", ""],
      ["compact", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-compact", "()", ""],
      ["compact", "Hash", "classes/Hash.html#method-i-compact", "()", "<p>Returns a hash with non <code>nil</code> values.\n\n<pre><code>hash = { a: true, b: false, c: nil }\nhash.compact        # =&gt; { a: ...\n</code></pre>\n"],
      ["compact!", "Hash", "classes/Hash.html#method-i-compact-21", "()", "<p>Replaces current hash with non <code>nil</code> values. Returns\n<code>nil</code> if no changes were made, otherwise returns the …\n"],
      ["comparable_time", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-comparable_time", "()", ""],
      ["compare_with_coercion", "Date", "classes/Date.html#method-i-compare_with_coercion", "(other)", "<p>Allow Date to be compared with Time by converting to DateTime and relying\non the &lt;=&gt; from there. …\n"],
      ["compare_with_coercion", "Time", "classes/Time.html#method-i-compare_with_coercion", "(other)", "<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],
      ["compare_without_coercion", "Date", "classes/Date.html#method-i-compare_without_coercion", "(other)", ""],
      ["compare_without_coercion", "Time", "classes/Time.html#method-i-compare_without_coercion", "(other)", ""],
      ["compile", "ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/BindCollector.html#method-i-compile", "(bvs, conn)", ""],
      ["compile", "ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SQLString.html#method-i-compile", "(bvs, conn)", ""],
      ["compile_methods!", "ActiveSupport::Configurable::Configuration", "classes/ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21", "()", ""],
      ["compile_methods!", "ActiveSupport::Configurable::Configuration", "classes/ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21", "(keys)", "<p>Compiles reader methods so we don&#39;t have to go through method_missing.\n"],
      ["complete", "ActiveRecord::QueryCache", "classes/ActiveRecord/QueryCache.html#method-c-complete", "((caching_pool, caching_was_enabled))", ""],
      ["complete", "Rails::Application::Finisher::InterlockHook", "classes/Rails/Application/Finisher/InterlockHook.html#method-c-complete", "(_state)", ""],
      ["complete", "Rails::Application::Finisher::MutexHook", "classes/Rails/Application/Finisher/MutexHook.html#method-i-complete", "(_state)", ""],
      ["complete!", "ActiveSupport::ExecutionWrapper", "classes/ActiveSupport/ExecutionWrapper.html#method-i-complete-21", "()", "<p>Complete this in-flight execution. This method <strong>must</strong> be\ncalled exactly once on the result of any call …\n"],
      ["completed?", "ActiveRecord::ConnectionAdapters::TransactionState", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-completed-3F", "()", ""],
      ["component_root_dir", "Rails::API::RepoTask", "classes/Rails/API/RepoTask.html#method-i-component_root_dir", "(component)", ""],
      ["compose", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-compose", "()", "<p>Performs composition on all the characters.\n\n<pre><code>&#39;é&#39;.length                       # =&gt; 3\n&#39;é&#39;.mb_chars.compose.to_s.length ...</code></pre>\n"],
      ["compose", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-compose", "(codepoints)", "<p>Compose decomposed characters to the composed form.\n"],
      ["composed_of", "ActiveRecord::Aggregations::ClassMethods", "classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of", "(part_id, options = {})", "<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],
      ["compress", "ActiveSupport::Gzip", "classes/ActiveSupport/Gzip.html#method-c-compress", "(source, level = Zlib::DEFAULT_COMPRESSION, strategy = Zlib::DEFAULT_STRATEGY)", "<p>Compresses a string using gzip.\n"],
      ["compute_asset_extname", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_extname", "(source, options = {})", "<p>Compute extname to append to asset path. Returns <code>nil</code> if\nnothing should be added.\n"],
      ["compute_asset_host", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_host", "(source = \"\", options = {})", "<p>Pick an asset host for this source. Returns <code>nil</code> if no host is\nset, the host if no wildcard is set, the …\n"],
      ["compute_asset_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_path", "(source, options = {})", "<p>Computes asset path to public directory. Plugins and extensions can\noverride this method to point to …\n"],
      ["compute_class", "ActiveRecord::Reflection::MacroReflection", "classes/ActiveRecord/Reflection/MacroReflection.html#method-i-compute_class", "(name)", ""],
      ["compute_tags", "Rails::Rack::Logger", "classes/Rails/Rack/Logger.html#method-i-compute_tags", "(request)", ""],
      ["compute_type", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type", "(type_name)", "<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],
      ["concat", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-concat", "(string)", "<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],
      ["concat", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-concat", "(*records)", "<p>Add one or more records to the collection by setting their foreign keys to\nthe association&#39;s primary …\n"],
      ["concat", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-concat", "(value)", ""],
      ["concat", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-concat", "(paths)", ""],
      ["concern", "ActionDispatch::Routing::Mapper::Concerns", "classes/ActionDispatch/Routing/Mapper/Concerns.html#method-i-concern", "(name, callable = nil, &block)", "<p>Define a routing concern using a name.\n<p>Concerns may be defined inline, using a block, or handled by another …\n"],
      ["concern", "Kernel", "classes/Kernel.html#method-i-concern", "(topic, &module_definition)", "<p>A shortcut to define a toplevel concern, not within a module.\n<p>See Module::Concerning for more.\n"],
      ["concern", "Module::Concerning", "classes/Module/Concerning.html#method-i-concern", "(topic, &module_definition)", "<p>A low-cruft shortcut to define a concern.\n\n<pre><code>concern :EventTracking do\n  ...\nend</code></pre>\n<p>is equivalent to\n"],
      ["concerning", "Module::Concerning", "classes/Module/Concerning.html#method-i-concerning", "(topic, &block)", "<p>Define a new concern and mix it in.\n"],
      ["concerns", "ActionDispatch::Routing::Mapper::Concerns", "classes/ActionDispatch/Routing/Mapper/Concerns.html#method-i-concerns", "(*args)", "<p>Use the named concerns\n\n<pre><code>resources :posts do\n  concerns :commentable\nend\n</code></pre>\n<p>concerns also work in any routes …\n"],
      ["config", "ActionView::TestCase::Behavior", "classes/ActionView/TestCase/Behavior.html#method-i-config", "()", ""],
      ["config", "ActiveSupport::Configurable", "classes/ActiveSupport/Configurable.html#method-i-config", "()", "<p>Reads and writes attributes from a configuration <code>OrderedHash</code>.\n\n<pre><code>require &#39;active_support/configurable&#39;\n\nclass ...</code></pre>\n"],
      ["config", "ActiveSupport::Configurable::ClassMethods", "classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config", "()", ""],
      ["config", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-config", "()", ""],
      ["config", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-i-config", "()", ""],
      ["config", "Rails::Engine", "classes/Rails/Engine.html#method-i-config", "()", "<p>Define the configuration object for the engine.\n"],
      ["config", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-config", "()", ""],
      ["config", "Rails::Railtie", "classes/Rails/Railtie.html#method-i-config", "()", "<p>This is used to create the <code>config</code> object on Railties, an\ninstance of Railtie::Configuration, that is …\n"],
      ["config_for", "Rails::Application", "classes/Rails/Application.html#method-i-config_for", "(name, env: Rails.env)", "<p>Convenience for loading config/foo.yml for the current Rails env.\n<p>Example:\n\n<pre><code># config/exception_notification.yml: ...\n</code></pre>\n"],
      ["config_when_updating", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-config_when_updating", "()", ""],
      ["configru", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-configru", "()", ""],
      ["configuration", "Rails", "classes/Rails.html#method-c-configuration", "()", "<p>The Configuration instance used to configure the Rails environment\n"],
      ["configurations", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-configurations", "()", "<p>Returns fully resolved configurations hash\n"],
      ["configurations", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-i-configurations", "()", ""],
      ["configurations=", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-configurations-3D", "(config)", "<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],
      ["configure", "ActiveSupport::Configurable::ClassMethods", "classes/ActiveSupport/Configurable/ClassMethods.html#method-i-configure", "()", ""],
      ["configure", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-configure", "(&block)", "<p>Allows you to configure the railtie. This is the same method seen in\nRailtie::Configurable, but this …\n"],
      ["configure", "Rails::Railtie::Configurable::ClassMethods", "classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-configure", "(&block)", ""],
      ["configure_rdoc_files", "Rails::API::Task", "classes/Rails/API/Task.html#method-i-configure_rdoc_files", "()", ""],
      ["configure_sdoc", "Rails::API::RepoTask", "classes/Rails/API/RepoTask.html#method-i-configure_sdoc", "()", ""],
      ["configure_sdoc", "Rails::API::Task", "classes/Rails/API/Task.html#method-i-configure_sdoc", "()", ""],
      ["connected?", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F", "(spec_name)", "<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],
      ["connected?", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F", "()", "<p>Returns true if a connection has already been opened.\n"],
      ["connected?", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-connected-3F", "()", "<p>Returns <code>true</code> if Active Record is connected.\n"],
      ["connection", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection", "()", "<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],
      ["connection", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-connection", "()", "<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],
      ["connection", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-connection", "()", ""],
      ["connection_config", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-connection_config", "()", "<p>Returns the configuration of the associated connection as a hash:\n\n<pre><code>ActiveRecord::Base.connection_config ...</code></pre>\n"],
      ["connection_handler", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-connection_handler", "()", ""],
      ["connection_handler", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-connection_handler", "()", ""],
      ["connection_handler=", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-connection_handler-3D", "(handler)", ""],
      ["connection_identifier", "ActionCable::Connection::Identification", "classes/ActionCable/Connection/Identification.html#method-i-connection_identifier", "()", "<p>Return a single connection identifier that combines the value of all the\nregistered identifiers into …\n"],
      ["connection_identifiers", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-connection_identifiers", "()", "<p>All of the identifiers applied to the connection class associated with this\nserver.\n"],
      ["connection_pool", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-connection_pool", "()", ""],
      ["connection_pool_list", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list", "()", ""],
      ["connection_pools", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools", "()", ""],
      ["connection_specification_name", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-connection_specification_name", "()", "<p>Return the specification name from the current class or its parent.\n"],
      ["console", "Rails::Application", "classes/Rails/Application.html#method-i-console", "(&blk)", "<p>Sends any console called in the instance of a new application up to the\n<code>console</code> method defined in Rails::Railtie …\n"],
      ["console", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-console", "(&blk)", ""],
      ["const_missing", "ActiveSupport::Deprecation::DeprecatedConstantAccessor", "classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-i-const_missing", "(missing_const_name)", ""],
      ["constantize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-constantize", "(camel_cased_word)", "<p>Tries to find a constant with the name specified in the argument string.\n\n<pre><code>constantize(&#39;Module&#39;)   # =&gt; ...\n</code></pre>\n"],
      ["constantize", "String", "classes/String.html#method-i-constantize", "()", "<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError …\n"],
      ["constraints", "ActionDispatch::Routing::Mapper::Scoping", "classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints", "(constraints = {})", "<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For\ninstance, …\n"],
      ["constraints", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-constraints", "()", ""],
      ["consumes?", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F", "(string)", "<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],
      ["content_columns", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns", "()", "<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],
      ["content_for", "ActionView::Helpers::CaptureHelper", "classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for", "(name, content = nil, options = {}, &block)", "<p>Calling content_for stores a block of markup in an identifier for later\nuse. In order to access this …\n"],
      ["content_for?", "ActionView::Helpers::CaptureHelper", "classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F", "(name)", "<p>content_for? checks whether any content has been captured yet using\n`content_for`. Useful to render parts …\n"],
      ["content_length", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-content_length", "()", "<p>Returns the content length of the request as an integer.\n"],
      ["content_mime_type", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type", "()", "<p>The MIME type of the HTTP request, such as Mime.\n<p>For backward compatibility, the post format is extracted …\n"],
      ["content_tag", "ActionView::Helpers::ActiveModelInstanceTag", "classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-content_tag", "(*)", ""],
      ["content_tag", "ActionView::Helpers::TagHelper", "classes/ActionView/Helpers/TagHelper.html#method-i-content_tag", "(name, content_or_options_with_block = nil, options = nil, escape = true, &block)", "<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],
      ["content_tag_for", "ActionView::Helpers::RecordTagHelper", "classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for", "(*)", ""],
      ["content_type", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_type", "()", ""],
      ["content_type", "ActionDispatch::RequestEncoder::IdentityEncoder", "classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-content_type", "()", ""],
      ["content_type", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-content_type", "()", "<p>Sets the HTTP response&#39;s content MIME type. For example, in the\ncontroller you could write this: …\n"],
      ["content_type=", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-content_type-3D", "(content_type)", "<p>Sets the HTTP content type.\n"],
      ["context_class", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-context_class", "()", "<p>Superclass for the evaluation contexts used by ERB fixtures.\n"],
      ["context_class", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-i-context_class", "()", ""],
      ["controller", "ActionDispatch::Routing::Mapper::Scoping", "classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller", "(controller)", "<p>Scopes routes to a specific controller\n\n<pre><code>controller &quot;food&quot; do\n  match &quot;bacon&quot;, action: :bacon, via: :get ...</code></pre>\n"],
      ["controller", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-controller", "()", ""],
      ["controller", "Rails::ConsoleMethods", "classes/Rails/ConsoleMethods.html#method-i-controller", "()", "<p>Gets a new instance of a controller object.\n<p>This method assumes an <code>ApplicationController</code> exists, and it …\n"],
      ["controller_class", "ActionController::TestCase::Behavior::ClassMethods", "classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class", "()", ""],
      ["controller_class", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-controller_class", "()", ""],
      ["controller_class=", "ActionController::TestCase::Behavior::ClassMethods", "classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D", "(new_class)", ""],
      ["controller_class_name", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-controller_class_name", "()", ""],
      ["controller_name", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-controller_name", "()", "<p>Returns the last part of the controller&#39;s name, underscored, without\nthe ending <code>Controller</code>. For instance, …\n"],
      ["controller_name", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-controller_name", "()", "<p>Delegates to the class&#39; <code>controller_name</code>.\n"],
      ["controller_path", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-controller_path", "()", "<p>Returns the full controller name, underscored, without the ending\nController.\n\n<pre><code>class MyApp::MyPostsController ...</code></pre>\n"],
      ["controller_path", "AbstractController::Base", "classes/AbstractController/Base.html#method-i-controller_path", "()", "<p>Delegates to the class&#39; ::controller_path\n"],
      ["controller_path", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-controller_path", "()", ""],
      ["controller_path=", "ActionView::TestCase::TestController", "classes/ActionView/TestCase/TestController.html#method-i-controller_path-3D", "(path)", ""],
      ["convert", "ActiveRecord::LegacyYamlAdapter", "classes/ActiveRecord/LegacyYamlAdapter.html#method-c-convert", "(klass, coder)", ""],
      ["convert", "ActiveRecord::LegacyYamlAdapter::Rails41", "classes/ActiveRecord/LegacyYamlAdapter/Rails41.html#method-c-convert", "(klass, coder)", ""],
      ["convert", "ActiveRecord::LegacyYamlAdapter::Rails420", "classes/ActiveRecord/LegacyYamlAdapter/Rails420.html#method-c-convert", "(klass, coder)", ""],
      ["convert_key", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key", "(key)", ""],
      ["convert_key", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key", "(key)", ""],
      ["convert_value", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value", "(value, options = {})", ""],
      ["convert_value", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value", "(value, options = {})", ""],
      ["converted_arrays", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-converted_arrays", "()", "<p>Attribute that keeps track of converted arrays, if any, to avoid double\nlooping in the common use case …\n"],
      ["cookie_jar", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-cookie_jar", "()", ""],
      ["cookies", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-i-cookies", "()", "<p>The cookies of the request that initiated the WebSocket connection. Useful\nfor performing authorization …\n"],
      ["cookies", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-cookies", "()", "<p>A map of the cookies returned by the last response, and which will be sent\nwith the next request.\n"],
      ["cookies", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-cookies", "()", "<p>Returns the response cookies, converted to a Hash of (name =&gt; value)\npairs\n\n<pre><code>assert_equal &#39;AuthorOfNewPage&#39;, ...</code></pre>\n"],
      ["cookies", "ActionDispatch::TestProcess", "classes/ActionDispatch/TestProcess.html#method-i-cookies", "()", ""],
      ["copy", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-copy", "(destination, sources, options = {})", ""],
      ["count", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-count", "()", ""],
      ["count", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-count", "", "<p>Count all records.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\n# This will perform the count ...\n</code></pre>\n"],
      ["count", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-count", "(column_name = nil)", "<p>Count the records.\n\n<pre><code>Person.count\n# =&gt; the total count of all people\n\nPerson.count(:age)\n# =&gt; returns the ...\n</code></pre>\n"],
      ["count_by_sql", "ActiveRecord::Querying", "classes/ActiveRecord/Querying.html#method-i-count_by_sql", "(sql)", "<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],
      ["country_zones", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-country_zones", "(country_code)", "<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the country specified …\n"],
      ["create", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-c-create", "(status = 200, header = {}, body = [], default_headers: self.default_headers)", ""],
      ["create", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-c-create", "(env = {})", "<p>Create a new test request with default `env` values\n"],
      ["create", "ActionView::Digestor::Node", "classes/ActionView/Digestor/Node.html#method-c-create", "(name, logical_name, template, partial)", ""],
      ["create", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-i-create", "(*args, &block)", ""],
      ["create", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create", "(attributes = {}, &block)", "<p>Returns a new object of the collection type that has been instantiated with\nattributes, linked to this …\n"],
      ["create", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-create", "(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])", ""],
      ["create", "ActiveRecord::Persistence::ClassMethods", "classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create", "(attributes = nil, &block)", "<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],
      ["create", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-create", "(*args, &block)", "<p>Tries to create a new record with the same scoped attributes defined in the\nrelation. Returns the initialized …\n"],
      ["create", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create", "(*arguments)", ""],
      ["create", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-create", "(name)", ""],
      ["create", "Rails::Application", "classes/Rails/Application.html#method-c-create", "(initial_variable_values = {}, &block)", ""],
      ["create!", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-i-create-21", "(*args, &block)", ""],
      ["create!", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create-21", "(attributes = {}, &block)", "<p>Like #create, except that if the record is invalid, raises an exception.\n\n<pre><code>class Person\n  has_many :pets ...</code></pre>\n"],
      ["create!", "ActiveRecord::Persistence::ClassMethods", "classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create-21", "(attributes = nil, &block)", "<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. Raises a  …\n"],
      ["create!", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-create-21", "(*args, &block)", "<p>Similar to #create, but calls create! on the base class. Raises an\nexception if a validation error occurs. …\n"],
      ["create_all", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all", "()", ""],
      ["create_current", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current", "(environment = env)", ""],
      ["create_database", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-create_database", "(name, options = {})", "<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],
      ["create_database", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_database", "(name, options = {})", "<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code> (defaults to utf8),\n<code>:collation</code> …\n"],
      ["create_fixtures", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-create_fixtures", "(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base)", ""],
      ["create_fixtures", "Object", "classes/Object.html#method-i-create_fixtures", "(*fixture_set_names, &block)", ""],
      ["create_generated_attribute", "Rails::Generators::Testing::Behaviour", "classes/Rails/Generators/Testing/Behaviour.html#method-i-create_generated_attribute", "(attribute_type, name = \"test\", index = nil)", "<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute\ntype and, optionally, the attribute …\n"],
      ["create_join_table", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table", "(table_1, table_2, column_options: {}, **options)", "<p>Creates a new join table with the name created using the lexical order of\nthe first two arguments. These …\n"],
      ["create_migration", "Rails::Generators::Migration", "classes/Rails/Generators/Migration.html#method-i-create_migration", "(destination, data, config = {}, &block)", ""],
      ["create_savepoint", "ActiveRecord::ConnectionAdapters::Savepoints", "classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-create_savepoint", "(name = current_savepoint_name)", ""],
      ["create_schema", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_schema", "(schema_name)", "<p>Creates a schema for the given schema name.\n"],
      ["create_session", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-create_session", "(app)", ""],
      ["create_table", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table", "(table_name, comment: nil, **options)", "<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],
      ["create_with", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-create_with", "(value)", "<p>Sets attributes to be used when creating new records from a relation\nobject.\n\n<pre><code>users = User.where(name: ...</code></pre>\n"],
      ["csrf_meta_tag", "ActionView::Helpers::CsrfHelper", "classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag", "()", "<p>For backwards compatibility.\n"],
      ["csrf_meta_tags", "ActionView::Helpers::CsrfHelper", "classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags", "()", "<p>Returns meta tags “csrf-param” and “csrf-token” with the name of the\ncross-site request …\n"],
      ["ctype", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-ctype", "()", "<p>Returns the current database ctype.\n"],
      ["current", "Date", "classes/Date.html#method-c-current", "()", "<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],
      ["current", "DateTime", "classes/DateTime.html#method-c-current", "()", "<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now.to_datetime</code> …\n"],
      ["current", "Time", "classes/Time.html#method-c-current", "()", "<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],
      ["current_config", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-current_config", "(options = {})", ""],
      ["current_cycle", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle", "(name = \"default\")", "<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],
      ["current_database", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-current_database", "()", ""],
      ["current_database", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_database", "()", "<p>Returns the current database name.\n"],
      ["current_hash", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash", "()", ""],
      ["current_hash", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash", "()", ""],
      ["current_page?", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F", "(options, check_parameters: false)", "<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let&#39;s say we&#39;re in …\n"],
      ["current_savepoint_name", "ActiveRecord::ConnectionAdapters::Savepoints", "classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-current_savepoint_name", "()", ""],
      ["current_schema", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_schema", "()", "<p>Returns the current schema name.\n"],
      ["current_time_from_proper_timezone", "ActiveRecord::Timestamp", "classes/ActiveRecord/Timestamp.html#method-i-current_time_from_proper_timezone", "()", ""],
      ["current_version", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-current_version", "()", ""],
      ["custom", "ActionController::MimeResponds::Collector", "classes/ActionController/MimeResponds/Collector.html#method-i-custom", "(mime_type, &block)", ""],
      ["custom", "ActionMailer::Collector", "classes/ActionMailer/Collector.html#method-i-custom", "(mime, options = {})", ""],
      ["cycle", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-cycle", "(first_value, *values)", "<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],
      ["dangerous_attribute_method?", "ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods", "classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F", "(method_name)", ""],
      ["dangerous_class_method?", "ActiveRecord::AttributeMethods::ClassMethods", "classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_class_method-3F", "(method_name)", "<p>A class method is &#39;dangerous&#39; if it is already (re)defined by\nActive Record, but not by any ancestors. …\n"],
      ["dasherize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-dasherize", "(underscored_word)", "<p>Replaces underscores with dashes in the string.\n\n<pre><code>dasherize(&#39;puni_puni&#39;) # =&gt; &quot;puni-puni&quot;\n</code></pre>\n"],
      ["dasherize", "String", "classes/String.html#method-i-dasherize", "()", "<p>Replaces underscores with dashes in the string.\n\n<pre><code>&#39;puni_puni&#39;.dasherize # =&gt; &quot;puni-puni&quot;\n</code></pre>\n"],
      ["data_source_exists?", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-data_source_exists-3F", "(name)", "<p>A cached lookup for table existence.\n"],
      ["data_source_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-data_source_exists-3F", "(name)", "<p>Checks to see if the data source <code>name</code> exists on the database.\n\n<pre><code>data_source_exists?(:ebooks)\n</code></pre>\n"],
      ["data_sources", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-data_sources", "(name)", ""],
      ["data_sources", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-data_sources", "()", "<p>Returns the relation names useable to back Active Record models. For most\nadapters this means all #tables …\n"],
      ["database_configuration", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-database_configuration", "()", "<p>Loads and returns the entire raw configuration of database from values\nstored in `config/database.yml`. …\n"],
      ["database_yml", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-database_yml", "()", ""],
      ["date", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-date", "()", ""],
      ["date=", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-date-3D", "(utc_time)", ""],
      ["date?", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-date-3F", "()", ""],
      ["date_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-date_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “date”.\n\n<pre><code>date_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],
      ["date_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-date_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “date”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],
      ["date_select", "ActionView::FormBuilder", "classes/ActionView/FormBuilder.html#method-i-date_select", "(method, options = {}, html_options = {})", "<p>Wraps ActionView::Helpers::DateHelper#date_select for form builders:\n\n<pre><code>&lt;%= form_for @person do |f| %&gt;\n  ...</code></pre>\n"],
      ["date_select", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-date_select", "(object_name, method, options = {}, html_options = {})", "<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],
      ["daterange", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-daterange", "(*args, **options)", ""],
      ["datetime_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-datetime_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “datetime-local”.\n\n<pre><code>datetime_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input ...\n</code></pre>\n"],
      ["datetime_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “datetime-local”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],
      ["datetime_local_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-datetime_local_field", "(object_name, method, options = {})", ""],
      ["datetime_local_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_local_field_tag", "(name, value = nil, options = {})", ""],
      ["datetime_select", "ActionView::FormBuilder", "classes/ActionView/FormBuilder.html#method-i-datetime_select", "(method, options = {}, html_options = {})", "<p>Wraps ActionView::Helpers::DateHelper#datetime_select for form builders:\n\n<pre><code>&lt;%= form_for @person do |f| %&gt; ...</code></pre>\n"],
      ["datetime_select", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select", "(object_name, method, options = {}, html_options = {})", "<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],
      ["day", "Numeric", "classes/Numeric.html#method-i-day", "()", ""],
      ["days", "Numeric", "classes/Numeric.html#method-i-days", "()", "<p>Returns a Duration instance matching the number of days provided.\n\n<pre><code>2.days # =&gt; 2 days\n</code></pre>\n"],
      ["days_ago", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-days_ago", "(days)", "<p>Returns a new date/time the specified number of days ago.\n"],
      ["days_in_month", "Time", "classes/Time.html#method-c-days_in_month", "(month, year = current.year)", "<p>Returns the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],
      ["days_in_year", "Time", "classes/Time.html#method-c-days_in_year", "(year = current.year)", "<p>Returns the number of days in the given year. If no year is specified, it\nwill use the current year. …\n"],
      ["days_since", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-days_since", "(days)", "<p>Returns a new date/time the specified number of days in the future.\n"],
      ["days_to_week_start", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-days_to_week_start", "(start_day = Date.beginning_of_week)", "<p>Returns the number of days to the start of the week on the given day. Week\nis assumed to start on <code>start_day</code> …\n"],
      ["db", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-db", "()", ""],
      ["db_dir", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-db_dir", "()", ""],
      ["debug", "ActionView::Digestor::NullLogger", "classes/ActionView/Digestor/NullLogger.html#method-c-debug", "(_)", ""],
      ["debug", "ActionView::Helpers::DebugHelper", "classes/ActionView/Helpers/DebugHelper.html#method-i-debug", "(object)", "<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],
      ["debug_exception_response_format", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-debug_exception_response_format", "()", ""],
      ["debug_exception_response_format=", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-debug_exception_response_format-3D", "(value)", ""],
      ["debug_hash", "ActionDispatch::DebugExceptions::DebugView", "classes/ActionDispatch/DebugExceptions/DebugView.html#method-i-debug_hash", "(object)", ""],
      ["debug_headers", "ActionDispatch::DebugExceptions::DebugView", "classes/ActionDispatch/DebugExceptions/DebugView.html#method-i-debug_headers", "(headers)", ""],
      ["debug_params", "ActionDispatch::DebugExceptions::DebugView", "classes/ActionDispatch/DebugExceptions/DebugView.html#method-i-debug_params", "(params)", ""],
      ["decode", "ActiveSupport::JSON", "classes/ActiveSupport/JSON.html#method-c-decode", "(json)", "<p>Parses a JSON string (JavaScript Object Notation) into a hash. See\nwww.json.org for more info.\n\n<pre><code>ActiveSupport::JSON.decode(&quot;{\\&quot;team\\&quot;:\\&quot;rails\\&quot;,\\&quot;players\\&quot;:\\&quot;36\\&quot;}&quot;) ...</code></pre>\n"],
      ["decode_credentials", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials", "(request)", ""],
      ["decode_credentials", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials", "(header)", ""],
      ["decode_credentials_header", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header", "(request)", ""],
      ["decompose", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-decompose", "()", "<p>Performs canonical decomposition on all the characters.\n\n<pre><code>&#39;é&#39;.length                         # =&gt; 2\n&#39;é&#39;.mb_chars.decompose.to_s.length ...</code></pre>\n"],
      ["decompose", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-decompose", "(type, codepoints)", "<p>Decompose composed characters to the decomposed form.\n"],
      ["decompress", "ActiveSupport::Gzip", "classes/ActiveSupport/Gzip.html#method-c-decompress", "(source)", "<p>Decompresses a gzipped string.\n"],
      ["deconstantize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-deconstantize", "(path)", "<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre><code>deconstantize(&#39;Net::HTTP&#39;)  ...</code></pre>\n"],
      ["deconstantize", "String", "classes/String.html#method-i-deconstantize", "()", "<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre><code>&#39;Net::HTTP&#39;.deconstantize   ...</code></pre>\n"],
      ["decrement", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-decrement", "(attribute, by = 1)", "<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],
      ["decrement", "ActiveSupport::Cache::FileStore", "classes/ActiveSupport/Cache/FileStore.html#method-i-decrement", "(name, amount = 1, options = nil)", "<p>Decrements an already existing integer value that is stored in the cache.\nIf the key is not found nothing …\n"],
      ["decrement", "ActiveSupport::Cache::MemCacheStore", "classes/ActiveSupport/Cache/MemCacheStore.html#method-i-decrement", "(name, amount = 1, options = nil)", "<p>Decrement a cached value. This method uses the memcached decr atomic\noperator and can only be used on …\n"],
      ["decrement", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-decrement", "(name, amount = 1, options = nil)", "<p>Decrement an integer value in the cache.\n"],
      ["decrement", "ActiveSupport::Cache::NullStore", "classes/ActiveSupport/Cache/NullStore.html#method-i-decrement", "(name, amount = 1, options = nil)", ""],
      ["decrement", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-decrement", "(name, amount = 1, options = nil)", "<p>Decrements an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],
      ["decrement!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-decrement-21", "(attribute, by = 1, touch: nil)", "<p>Wrapper around #decrement that writes the update to the database. Only\n<code>attribute</code> is updated; the record …\n"],
      ["decrement_counter", "ActiveRecord::CounterCache::ClassMethods", "classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter", "(counter_name, id, touch: nil)", "<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as #increment_counter but …\n"],
      ["decrypt_and_verify", "ActiveSupport::MessageEncryptor", "classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify", "(value)", "<p>Decrypt and verify a message. We need to verify the message in order to\navoid padding attacks. Reference: …\n"],
      ["deep_dup", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-deep_dup", "()", "<p>Returns duplicate of object including all parameters.\n"],
      ["deep_dup", "Array", "classes/Array.html#method-i-deep_dup", "()", "<p>Returns a deep copy of array.\n\n<pre><code>array = [1, [2, 3]]\ndup   = array.deep_dup\ndup[1][2] = 4\n\narray[1][2] # ...\n</code></pre>\n"],
      ["deep_dup", "Hash", "classes/Hash.html#method-i-deep_dup", "()", "<p>Returns a deep copy of hash.\n\n<pre><code>hash = { a: { b: &#39;b&#39; } }\ndup  = hash.deep_dup\ndup[:a][:c] = &#39;c&#39;\n\nhash[:a][:c] ...</code></pre>\n"],
      ["deep_dup", "Object", "classes/Object.html#method-i-deep_dup", "()", "<p>Returns a deep copy of object if it&#39;s duplicable. If it&#39;s not\nduplicable, returns <code>self</code>.\n\n<pre><code>object ...</code></pre>\n"],
      ["deep_merge", "Hash", "classes/Hash.html#method-i-deep_merge", "(other_hash, &block)", "<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n\n<pre><code>h1 = { a: true, b: { c: [1, 2, 3] } } ...</code></pre>\n"],
      ["deep_merge!", "Hash", "classes/Hash.html#method-i-deep_merge-21", "(other_hash, &block)", "<p>Same as <code>deep_merge</code>, but modifies <code>self</code>.\n"],
      ["deep_stringify_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys", "()", ""],
      ["deep_stringify_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys", "()", ""],
      ["deep_stringify_keys", "Hash", "classes/Hash.html#method-i-deep_stringify_keys", "()", "<p>Returns a new hash with all keys converted to strings. This includes the\nkeys from the root hash and …\n"],
      ["deep_stringify_keys!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21", "()", ""],
      ["deep_stringify_keys!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21", "()", ""],
      ["deep_stringify_keys!", "Hash", "classes/Hash.html#method-i-deep_stringify_keys-21", "()", "<p>Destructively converts all keys to strings. This includes the keys from the\nroot hash and from all nested …\n"],
      ["deep_symbolize_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys", "()", ""],
      ["deep_symbolize_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys", "()", ""],
      ["deep_symbolize_keys", "Hash", "classes/Hash.html#method-i-deep_symbolize_keys", "()", "<p>Returns a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>. This includes …\n"],
      ["deep_symbolize_keys!", "Hash", "classes/Hash.html#method-i-deep_symbolize_keys-21", "()", "<p>Destructively converts all keys to symbols, as long as they respond to\n<code>to_sym</code>. This includes the keys …\n"],
      ["deep_transform_keys", "Hash", "classes/Hash.html#method-i-deep_transform_keys", "(&block)", "<p>Returns a new hash with all keys converted by the block operation. This\nincludes the keys from the root …\n"],
      ["deep_transform_keys!", "Hash", "classes/Hash.html#method-i-deep_transform_keys-21", "(&block)", "<p>Destructively converts all keys by using the block operation. This includes\nthe keys from the root hash …\n"],
      ["default", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-default", "(value = nil)", "<p>Sets the defaults through app configuration:\n\n<pre><code>config.action_mailer.default(from: &quot;no-reply@example.org&quot;)\n</code></pre>\n"],
      ["default", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default", "(*args)", ""],
      ["default", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default", "(*args)", ""],
      ["default_aliases_for_option", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-default_aliases_for_option", "(name, options)", "<p>Returns default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n"],
      ["default_command_root", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-default_command_root", "()", "<p>Default file root to place extra files a command might need, placed one\nfolder above the command file. …\n"],
      ["default_for_option", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-default_for_option", "(config, name, options, default)", "<p>Returns default for the option name given doing a lookup in config.\n"],
      ["default_form_builder", "ActionController::FormBuilder", "classes/ActionController/FormBuilder.html#method-i-default_form_builder", "()", "<p>Default form builder for the controller\n"],
      ["default_form_builder", "ActionController::FormBuilder::ClassMethods", "classes/ActionController/FormBuilder/ClassMethods.html#method-i-default_form_builder", "(builder)", "<p>Set the form builder to be used as the default for all forms in the views\nrendered by this controller …\n"],
      ["default_generator_root", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-default_generator_root", "()", ""],
      ["default_hsts_options", "ActionDispatch::SSL", "classes/ActionDispatch/SSL.html#method-c-default_hsts_options", "()", ""],
      ["default_i18n_subject", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-i-default_i18n_subject", "(interpolations = {})", "<p>Translates the <code>subject</code> using Rails I18n class under\n<code>[mailer_scope, action_name]</code> scope. If it does not …\n"],
      ["default_inspect", "Date", "classes/Date.html#method-i-default_inspect", "()", ""],
      ["default_inspect", "DateTime", "classes/DateTime.html#method-i-default_inspect", "()", ""],
      ["default_options", "Rails::Server", "classes/Rails/Server.html#method-i-default_options", "()", ""],
      ["default_options=", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-default_options-3D", "(value = nil)", "<p>Allows to set defaults through app configuration:\n\n<pre><code>config.action_mailer.default_options = { from: &quot;no-reply@example.org&quot; ...</code></pre>\n"],
      ["default_scope", "ActiveRecord::Scoping::Default::ClassMethods", "classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope", "(scope = nil)", "<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre><code>class Article &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["default_source_root", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-default_source_root", "()", "<p>Returns the default source root for a given generator. This is used\ninternally by rails to set its generators …\n"],
      ["default_timezone", "ActiveRecord::Type::Internal::Timezone", "classes/ActiveRecord/Type/Internal/Timezone.html#method-i-default_timezone", "()", ""],
      ["default_url_options", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options", "()", ""],
      ["default_url_options", "ActionDispatch::Routing::Mapper::Base", "classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options", "(options)", ""],
      ["default_url_options=", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options-3D", "(options)", ""],
      ["default_url_options=", "ActionDispatch::Routing::Mapper::Base", "classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D", "(options)", ""],
      ["default_value_for_option", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-default_value_for_option", "(name, options)", "<p>Returns the default value for the option name given doing a lookup in\nRails::Generators.options.\n"],
      ["defaults", "ActionDispatch::Routing::Mapper::Scoping", "classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults", "(defaults = {})", "<p>Allows you to set default parameters for a route, such as this:\n\n<pre><code>defaults id: &#39;home&#39; do\n  match &#39;scoped_pages/(:id)&#39;, ...</code></pre>\n"],
      ["defer_subscription_confirmation!", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-defer_subscription_confirmation-21", "()", ""],
      ["defer_subscription_confirmation?", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-defer_subscription_confirmation-3F", "()", ""],
      ["define", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-i-define", "()", ""],
      ["define", "ActiveRecord::Schema", "classes/ActiveRecord/Schema.html#method-c-define", "(info = {}, &block)", "<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],
      ["define_attribute", "ActiveRecord::Attributes::ClassMethods", "classes/ActiveRecord/Attributes/ClassMethods.html#method-i-define_attribute", "( name, cast_type, default: NO_DEFAULT_PROVIDED, user_provided_default: true )", "<p>This is the low level API which sits beneath <code>attribute</code>. It\nonly accepts type objects, and will do its …\n"],
      ["define_attribute_method", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method", "(attr_name)", "<p>Declares an attribute that should be prefixed and suffixed by\n<code>ActiveModel::AttributeMethods</code>.\n<p>To use, pass …\n"],
      ["define_attribute_methods", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods", "(*attr_names)", "<p>Declares the attributes that should be prefixed and suffixed by\n<code>ActiveModel::AttributeMethods</code>.\n<p>To use, …\n"],
      ["define_callbacks", "ActiveSupport::Callbacks::ClassMethods", "classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks", "(*names)", "<p>Define sets of events in the object life cycle that support callbacks.\n\n<pre><code>define_callbacks :validate\ndefine_callbacks ...</code></pre>\n"],
      ["define_model_callbacks", "ActiveModel::Callbacks", "classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks", "(*callbacks)", "<p>define_model_callbacks accepts the same options\n<code>define_callbacks</code> does, in case you want to overwrite …\n"],
      ["define_on", "ActiveModel::Validations::AcceptanceValidator::AttributeDefinition", "classes/ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-i-define_on", "(klass)", ""],
      ["delegate", "Module", "classes/Module.html#method-i-delegate", "(*methods, to: nil, prefix: nil, allow_nil: nil)", "<p>Provides a <code>delegate</code> class method to easily expose contained\nobjects&#39; public methods as your own. …\n"],
      ["delegate_missing_to", "Module", "classes/Module.html#method-i-delegate_missing_to", "(target)", "<p>When building decorators, a common pattern may emerge:\n\n<pre><code>class Partition\n  def initialize(first_event)\n ...</code></pre>\n"],
      ["delegate_to", "ActionView::Template::Types", "classes/ActionView/Template/Types.html#method-c-delegate_to", "(klass)", ""],
      ["delete", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-delete", "(key, &block)", "<p>Deletes and returns a key-value pair from <code>Parameters</code> whose key\nis equal to key. If the key is not found, …\n"],
      ["delete", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-delete", "(action, **args)", "<p>Simulate a DELETE request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],
      ["delete", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-delete", "(key)", ""],
      ["delete", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete", "(path, **args)", "<p>Performs a DELETE request with the given parameters. See\n<code>#process</code> for more details.\n"],
      ["delete", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-delete", "(target)", ""],
      ["delete", "ActionDispatch::Routing::Mapper::HttpHelpers", "classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete", "(*args, &block)", "<p>Define a route that only recognizes HTTP DELETE. For supported arguments,\nsee match\n\n<pre><code>delete &#39;broccoli&#39;, ...</code></pre>\n"],
      ["delete", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-delete", "(key)", "<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre><code>person.errors[:name]        # =&gt; [&quot;cannot be nil&quot;] ...\n</code></pre>\n"],
      ["delete", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete", "(*records)", "<p>Deletes the <code>records</code> supplied from the collection according to\nthe strategy specified by the <code>:dependent</code> …\n"],
      ["delete", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete", "(element)", "<p>If <code>element</code> is in the queue, remove and return it, or\n<code>nil</code>.\n"],
      ["delete", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete", "(arel, name = nil, binds = [])", "<p>Executes the delete statement and returns the number of rows affected.\n"],
      ["delete", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-delete", "()", "<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],
      ["delete", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-delete", "(id_or_array)", "<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],
      ["delete", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-delete", "(name, options = nil)", "<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],
      ["delete", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete", "(key)", "<p>Removes the specified key from the hash.\n"],
      ["delete", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete", "(key)", "<p>Removes the specified key from the hash.\n"],
      ["delete", "ActiveSupport::Inflector::Inflections::Uncountables", "classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-delete", "(entry)", ""],
      ["delete", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-delete", "(*args, &block)", ""],
      ["delete_all", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all", "(dependent = nil)", "<p>Deletes all the records from the collection according to the strategy\nspecified by the <code>:dependent</code> option. …\n"],
      ["delete_all", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-delete_all", "()", "<p>Deletes the records without instantiating the records first, and hence not\ncalling the #destroy method …\n"],
      ["delete_entry", "ActiveSupport::Cache::Strategy::LocalCache::LocalStore", "classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry", "(key, options)", ""],
      ["delete_header", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-delete_header", "(key)", ""],
      ["delete_if", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-delete_if", "(&block)", ""],
      ["delete_if", "Mime::Mimes", "classes/Mime/Mimes.html#method-i-delete_if", "()", ""],
      ["delete_matched", "ActiveSupport::Cache::FileStore", "classes/ActiveSupport/Cache/FileStore.html#method-i-delete_matched", "(matcher, options = nil)", ""],
      ["delete_matched", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched", "(matcher, options = nil)", "<p>Deletes cache entries if the cache key matches a given pattern.\n"],
      ["delete_matched", "ActiveSupport::Cache::NullStore", "classes/ActiveSupport/Cache/NullStore.html#method-i-delete_matched", "(matcher, options = nil)", ""],
      ["delete_matched", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-delete_matched", "(matcher, options = nil)", "<p>Deletes all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],
      ["delete_operations", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-delete_operations", "()", ""],
      ["delete_session", "ActionDispatch::Session::CacheStore", "classes/ActionDispatch/Session/CacheStore.html#method-i-delete_session", "(env, sid, options)", "<p>Remove a session from the cache.\n"],
      ["delete_session", "ActionDispatch::Session::CookieStore", "classes/ActionDispatch/Session/CookieStore.html#method-i-delete_session", "(req, session_id, options)", ""],
      ["deliver", "ActionMailer::LogSubscriber", "classes/ActionMailer/LogSubscriber.html#method-i-deliver", "(event)", "<p>An email was delivered.\n"],
      ["deliver_later", "ActionMailer::MessageDelivery", "classes/ActionMailer/MessageDelivery.html#method-i-deliver_later", "(options = {})", "<p>Enqueues the email to be delivered through Active Job. When the job runs it\nwill send the email using …\n"],
      ["deliver_later!", "ActionMailer::MessageDelivery", "classes/ActionMailer/MessageDelivery.html#method-i-deliver_later-21", "(options = {})", "<p>Enqueues the email to be delivered through Active Job. When the job runs it\nwill send the email using …\n"],
      ["deliver_now", "ActionMailer::MessageDelivery", "classes/ActionMailer/MessageDelivery.html#method-i-deliver_now", "()", "<p>Delivers an email:\n\n<pre><code>Notifier.welcome(User.first).deliver_now\n</code></pre>\n"],
      ["deliver_now!", "ActionMailer::MessageDelivery", "classes/ActionMailer/MessageDelivery.html#method-i-deliver_now-21", "()", "<p>Delivers an email without checking <code>perform_deliveries</code> and\n<code>raise_delivery_errors</code>, so use with caution. …\n"],
      ["demodulize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-demodulize", "(path)", "<p>Removes the module part from the expression in the string.\n\n<pre><code>demodulize(&#39;ActiveSupport::Inflector::Inflections&#39;) ...</code></pre>\n"],
      ["demodulize", "String", "classes/String.html#method-i-demodulize", "()", "<p>Removes the module part from the constant expression in the string.\n\n<pre><code>&#39;ActiveSupport::Inflector::Inflections&#39;.demodulize ...</code></pre>\n"],
      ["dependency_digest", "ActionView::Digestor::Node", "classes/ActionView/Digestor/Node.html#method-i-dependency_digest", "(finder, stack)", ""],
      ["deprecate", "Module", "classes/Module.html#method-i-deprecate", "(*method_names)", "\n<pre><code>deprecate :foo\ndeprecate bar: &#39;message&#39;\ndeprecate :foo, :bar, baz: &#39;warning!&#39;, qux: &#39;gone!&#39;\n</code></pre>\n<p>You can also …\n"],
      ["deprecate_constant", "ActiveSupport::Deprecation::DeprecatedConstantAccessor", "classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-i-deprecate_constant", "(const_name, new_constant, message: nil, deprecator: ActiveSupport::Deprecation.instance)", ""],
      ["deprecate_methods", "ActiveSupport::Deprecation::MethodWrapper", "classes/ActiveSupport/Deprecation/MethodWrapper.html#method-i-deprecate_methods", "(target_module, *method_names)", "<p>Declare that a method has been deprecated.\n\n<pre><code>module Fred\n  extend self\n\n  def aaa; end\n  def bbb; end\n  ...</code></pre>\n"],
      ["deprecation_warning", "ActiveSupport::Deprecation::Reporting", "classes/ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_warning", "(deprecated_method_name, message = nil, caller_backtrace = nil)", ""],
      ["desc", "Rails::API::Task", "classes/Rails/API/Task.html#method-i-desc", "(description)", "<p>Hack, ignore the desc calls performed by the original initializer.\n"],
      ["desc", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-desc", "(usage = nil, description = nil, options = {})", "<p>Tries to get the description from a USAGE file one folder above the command\nroot.\n"],
      ["desc", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-desc", "(description = nil)", "<p>Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default …\n"],
      ["descendants", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-c-descendants", "(klass)", ""],
      ["descendants", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-i-descendants", "()", ""],
      ["descendants", "Class", "classes/Class.html#method-i-descendants", "()", "<p>Returns an array with all classes that are &lt; than its receiver.\n\n<pre><code>class C; end\nC.descendants # =&gt; [] ...\n</code></pre>\n"],
      ["descends_from_active_record?", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F", "()", "<p>Returns <code>true</code> if this does not need STI type condition. Returns\n<code>false</code> if STI type condition needs to be …\n"],
      ["deserialize", "ActiveJob::Core", "classes/ActiveJob/Core.html#method-i-deserialize", "(job_data)", "<p>Attaches the stored job data to the current instance. Receives a hash\nreturned from <code>serialize</code>\n<p>Examples …\n"],
      ["deserialize", "ActiveJob::Core::ClassMethods", "classes/ActiveJob/Core/ClassMethods.html#method-i-deserialize", "(job_data)", "<p>Creates a new job instance from a hash created with <code>serialize</code>\n"],
      ["deserialize", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-deserialize", "(value)", "<p>Converts a value from database input to the appropriate ruby type. The\nreturn value of this method will …\n"],
      ["deserialize", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-deserialize", "(value)", "<p>Converts a value from database input to the appropriate ruby type. The\nreturn value of this method will …\n"],
      ["destination", "Rails::Generators::Testing::Behaviour::ClassMethods", "classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-destination", "(path)", "<p>Sets the destination of generator files:\n\n<pre><code>destination File.expand_path(&quot;../tmp&quot;, File.dirname(__FILE__))\n</code></pre>\n"],
      ["destroy", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy", "(*records)", "<p>Destroys the <code>records</code> supplied and removes them from the\ncollection. This method will <em>always</em> remove record …\n"],
      ["destroy", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-destroy", "()", "<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],
      ["destroy", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-destroy", "(id)", "<p>Destroy an object (or multiple objects) that has the given id. The object\nis instantiated first, therefore …\n"],
      ["destroy", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-i-destroy", "()", "<p>DELETE destroy\n"],
      ["destroy!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-destroy-21", "()", "<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],
      ["destroy_all", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all", "()", "<p>Deletes the records of the collection directly from the database ignoring\nthe <code>:dependent</code> option. Records …\n"],
      ["destroy_all", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-destroy_all", "()", "<p>Destroys the records by instantiating each record and calling its #destroy\nmethod. Each object&#39;s …\n"],
      ["destroyed?", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-destroyed-3F", "()", "<p>Returns true if this object has been destroyed, otherwise returns false.\n"],
      ["destroyed_by_association", "ActiveRecord::AutosaveAssociation", "classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association", "()", "<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. …\n"],
      ["destroyed_by_association=", "ActiveRecord::AutosaveAssociation", "classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D", "(reflection)", "<p>Records the association that is being destroyed and destroying this record\nin the process.\n"],
      ["detach", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-i-detach", "(io, stream)", ""],
      ["detail_args_for", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-detail_args_for", "(options)", "<p>Compute details hash and key according to user options (e.g. passed from\n#render).\n"],
      ["details_for_lookup", "ActionView::ViewPaths", "classes/ActionView/ViewPaths.html#method-i-details_for_lookup", "()", ""],
      ["determine_default_controller_class", "ActionController::TestCase::Behavior::ClassMethods", "classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class", "(name)", ""],
      ["determine_default_helper_class", "ActionView::TestCase::Behavior::ClassMethods", "classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class", "(name)", ""],
      ["determine_default_mailer", "ActionMailer::TestCase::Behavior::ClassMethods", "classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-determine_default_mailer", "(name)", ""],
      ["dig", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-dig", "(*keys)", "<p>Extracts the nested parameter from the given <code>keys</code> by calling\n<code>dig</code> at each step. Returns <code>nil</code> if any intermediate\n…\n"],
      ["digest", "ActionView::Digestor", "classes/ActionView/Digestor.html#method-c-digest", "(name:, finder:, dependencies: [])", "<p>Supported options:\n<p><code>name</code>   - Template name\n<p><code>finder</code>  - An instance of\n<code>ActionView::LookupContext</code>\n"],
      ["digest", "ActionView::Digestor::Injected", "classes/ActionView/Digestor/Injected.html#method-i-digest", "(finder, _ = [])", ""],
      ["digest", "ActionView::Digestor::Missing", "classes/ActionView/Digestor/Missing.html#method-i-digest", "(finder, _ = [])", ""],
      ["digest", "ActionView::Digestor::Node", "classes/ActionView/Digestor/Node.html#method-i-digest", "(finder, stack = [])", ""],
      ["direct", "ActionDispatch::Routing::Mapper::CustomUrls", "classes/ActionDispatch/Routing/Mapper/CustomUrls.html#method-i-direct", "(name, options = {}, &block)", "<p>Define custom url helpers that will be added to the application&#39;s\nroutes. This allows you to override …\n"],
      ["direct_descendants", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-c-direct_descendants", "(klass)", ""],
      ["direct_descendants", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-i-direct_descendants", "()", ""],
      ["dirname", "ActiveSupport::Multibyte::Unicode::UnicodeDatabase", "classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname", "()", "<p>Returns the directory in which the data files are stored.\n"],
      ["dirties_query_cache", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache", "(base, *method_names)", ""],
      ["disable_cache", "ActionView::LookupContext::DetailsCache", "classes/ActionView/LookupContext/DetailsCache.html#method-i-disable_cache", "()", "<p>Temporary skip passing the details_key forward.\n"],
      ["disable_ddl_transaction!", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-disable_ddl_transaction-21", "()", "<p>Disable the transaction wrapping this migration. You can still create your\nown transactions even after …\n"],
      ["disable_extension", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_extension", "(name)", "<p>This is meant to be implemented by the adapters that support extensions\n"],
      ["disable_extension", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension", "(name)", ""],
      ["disable_query_cache!", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21", "()", ""],
      ["disable_query_cache!", "ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration", "classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-disable_query_cache-21", "()", ""],
      ["disable_referential_integrity", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity", "()", "<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],
      ["disable_test_adapter", "ActiveJob::TestHelper::TestQueueAdapter::ClassMethods", "classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html#method-i-disable_test_adapter", "()", ""],
      ["discard", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-discard", "(k = nil)", "<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre><code>flash.discard ...</code></pre>\n"],
      ["discard_on", "ActiveJob::Exceptions::ClassMethods", "classes/ActiveJob/Exceptions/ClassMethods.html#method-i-discard_on", "(exception)", "<p>Discard the job with no attempts to retry, if the exception is raised. This\nis useful when the subject …\n"],
      ["disconnect", "ActionCable::RemoteConnections::RemoteConnection", "classes/ActionCable/RemoteConnections/RemoteConnection.html#method-i-disconnect", "()", "<p>Uses the internal channel to disconnect the connection.\n"],
      ["disconnect", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-disconnect", "(identifiers)", "<p>Disconnect all the connections identified by `identifiers` on this server\nor any others via RemoteConnections …\n"],
      ["disconnect", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect", "(raise_on_acquisition_timeout = true)", "<p>Disconnects all connections in the pool, and clears the pool.\n<p>Raises:\n<p>ActiveRecord::ExclusiveConnectionTimeoutError …\n"],
      ["disconnect!", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21", "()", "<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],
      ["disconnect!", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21", "()", "<p>Disconnects all connections in the pool, and clears the pool.\n<p>The pool first tries to gain ownership of …\n"],
      ["disconnect!", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21", "()", "<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],
      ["disconnect!", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21", "()", "<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],
      ["disconnect!", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21", "()", "<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],
      ["dispatch", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-dispatch", "(name, req, res)", "<p>Direct dispatch to the controller. Instantiates the controller, then\nexecutes the action named <code>name</code>. …\n"],
      ["display", "SourceAnnotationExtractor", "classes/SourceAnnotationExtractor.html#method-i-display", "(results, options = {})", "<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],
      ["distance_of_time_in_words", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words", "(from_time, to_time = 0, options = {})", "<p>Reports the approximate distance in time between two Time, Date or DateTime\nobjects or integers as seconds. …\n"],
      ["distance_of_time_in_words_to_now", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now", "(from_time, options = {})", ""],
      ["distinct", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-distinct", "", "<p>Specifies whether the records should be unique or not.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets ...</code></pre>\n"],
      ["distinct", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-distinct", "(value = true)", "<p>Specifies whether the records should be unique or not. For example:\n\n<pre><code>User.select(:name)\n# Might return ...\n</code></pre>\n"],
      ["div_for", "ActionView::Helpers::RecordTagHelper", "classes/ActionView/Helpers/RecordTagHelper.html#method-i-div_for", "(*)", ""],
      ["document_root_element", "ActionDispatch::IntegrationTest::Behavior", "classes/ActionDispatch/IntegrationTest/Behavior.html#method-i-document_root_element", "()", ""],
      ["dom_class", "ActionView::RecordIdentifier", "classes/ActionView/RecordIdentifier.html#method-i-dom_class", "(record_or_class, prefix = nil)", "<p>The DOM class convention is to use the singular form of an object or class.\n\n<pre><code>dom_class(post)   # =&gt; &quot;post&quot; ...\n</code></pre>\n"],
      ["dom_id", "ActionView::RecordIdentifier", "classes/ActionView/RecordIdentifier.html#method-i-dom_id", "(record, prefix = nil)", "<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],
      ["domain", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-domain", "(tld_length = @@tld_length)", "<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],
      ["done_running", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-done_running", "()", ""],
      ["done_unloading", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-done_unloading", "()", ""],
      ["down", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-down", "()", ""],
      ["downcase", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-downcase", "()", "<p>Converts characters in the string to lowercase.\n\n<pre><code>&#39;VĚDA A VÝZKUM&#39;.mb_chars.downcase.to_s # =&gt; &quot;věda a výzkum&quot;\n</code></pre>\n"],
      ["downcase", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-downcase", "(string)", ""],
      ["driven_by", "ActionDispatch::SystemTestCase", "classes/ActionDispatch/SystemTestCase.html#method-c-driven_by", "(driver, using: :chrome, screen_size: [1400, 1400], options: {})", "<p>System Test configuration options\n<p>The default settings are Selenium, using Chrome, with a screen size …\n"],
      ["drop", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop", "(*arguments)", ""],
      ["drop_all", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all", "()", ""],
      ["drop_current", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current", "(environment = env)", ""],
      ["drop_join_table", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table", "(table_1, table_2, options = {})", "<p>Drops the join table specified by the given arguments. See\n#create_join_table for details.\n<p>Although this …\n"],
      ["drop_schema", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-drop_schema", "(schema_name, options = {})", "<p>Drops the schema for the given schema name.\n"],
      ["drop_table", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-drop_table", "(table_name, options = {})", "<p>Drops a table from the database.\n<p><code>:force</code> &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to\n…\n"],
      ["drop_table", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table", "(table_name, options = {})", "<p>Drops a table from the database.\n<p><code>:force</code> &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to\n…\n"],
      ["dst?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-dst-3F", "()", "<p>Returns true if the current time is within Daylight Savings Time for the\nspecified time zone.\n\n<pre><code>Time.zone ...</code></pre>\n"],
      ["dump_schema_cache", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-dump_schema_cache", "(conn, filename)", "<p>Dumps the schema cache in YAML format for the connection into the file\n<p>Examples:\n\n<pre><code>ActiveRecord::Tasks::DatabaseTasks.dump_schema_cache(ActiveRecord::Base.connection, ...</code></pre>\n"],
      ["dup", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-dup", "", "<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],
      ["dup", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup", "()", "<p>Returns a shallow copy of the hash.\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...</code></pre>\n"],
      ["dup", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup", "()", "<p>Returns a shallow copy of the hash.\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...</code></pre>\n"],
      ["duplicable?", "BigDecimal", "classes/BigDecimal.html#method-i-duplicable-3F", "()", "<p>BigDecimals are duplicable:\n<p>BigDecimal.new(“1.2”).duplicable? # =&gt; true BigDecimal.new(“1.2”).dup …\n"],
      ["duplicable?", "Complex", "classes/Complex.html#method-i-duplicable-3F", "()", "<p>Complexes are not duplicable for RUBY_VERSION &lt; 2.5.0:\n<p>Complex(1).duplicable? # =&gt; false Complex(1).dup …\n"],
      ["duplicable?", "FalseClass", "classes/FalseClass.html#method-i-duplicable-3F", "()", "<p><code>false</code> is not duplicable:\n\n<pre><code>false.duplicable? # =&gt; false\nfalse.dup         # =&gt; TypeError: can&#39;t dup FalseClass\n</code></pre>\n"],
      ["duplicable?", "Method", "classes/Method.html#method-i-duplicable-3F", "()", "<p>Methods are not duplicable:\n\n<pre><code>method(:puts).duplicable? # =&gt; false\nmethod(:puts).dup         # =&gt; TypeError: ...\n</code></pre>\n"],
      ["duplicable?", "NilClass", "classes/NilClass.html#method-i-duplicable-3F", "()", "<p><code>nil</code> is not duplicable:\n\n<pre><code>nil.duplicable? # =&gt; false\nnil.dup         # =&gt; TypeError: can&#39;t dup NilClass\n</code></pre>\n"],
      ["duplicable?", "Numeric", "classes/Numeric.html#method-i-duplicable-3F", "()", "<p>Numbers are not duplicable:\n\n<pre><code>3.duplicable? # =&gt; false\n3.dup         # =&gt; TypeError: can&#39;t dup Integer\n</code></pre>\n"],
      ["duplicable?", "Object", "classes/Object.html#method-i-duplicable-3F", "()", "<p>Can you safely dup this object?\n<p>False for method objects; true otherwise.\n"],
      ["duplicable?", "Rational", "classes/Rational.html#method-i-duplicable-3F", "()", "<p>Rationals are not duplicable for RUBY_VERSION &lt; 2.5.0:\n<p>Rational(1).duplicable? # =&gt; false Rational(1).dup …\n"],
      ["duplicable?", "Symbol", "classes/Symbol.html#method-i-duplicable-3F", "()", "<p>Symbols are not duplicable:\n\n<pre><code>:my_symbol.duplicable? # =&gt; false\n:my_symbol.dup         # =&gt; TypeError: can&#39;t ...\n</code></pre>\n"],
      ["duplicable?", "TrueClass", "classes/TrueClass.html#method-i-duplicable-3F", "()", "<p><code>true</code> is not duplicable:\n\n<pre><code>true.duplicable? # =&gt; false\ntrue.dup         # =&gt; TypeError: can&#39;t dup TrueClass\n</code></pre>\n"],
      ["duration", "ActiveSupport::Notifications::Event", "classes/ActiveSupport/Notifications/Event.html#method-i-duration", "()", "<p>Returns the difference in milliseconds between when the execution of the\nevent started and when it ended. …\n"],
      ["each", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-each", "(&block)", ""],
      ["each", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-each", "(&block)", ""],
      ["each", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-each", "(&block)", ""],
      ["each", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-each", "()", ""],
      ["each", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-each", "(&block)", ""],
      ["each", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-i-each", "(*args, &block)", ""],
      ["each", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-each", "()", "<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],
      ["each", "ActiveRecord::Batches::BatchEnumerator", "classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-each", "()", "<p>Yields an ActiveRecord::Relation object for each batch of records.\n\n<pre><code>Person.in_batches.each do |relation| ...</code></pre>\n"],
      ["each", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-i-each", "(&block)", ""],
      ["each", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-each", "()", "<p>Calls the given block once for each element in row collection, passing row\nas parameter.\n<p>Returns an <code>Enumerator</code> …\n"],
      ["each", "ActiveSupport::Dependencies::WatchStack", "classes/ActiveSupport/Dependencies/WatchStack.html#method-i-each", "(&block)", ""],
      ["each", "Mime::Mimes", "classes/Mime/Mimes.html#method-i-each", "()", ""],
      ["each", "Rails::Engine::Railties", "classes/Rails/Engine/Railties.html#method-i-each", "(*args, &block)", ""],
      ["each", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-each", "(&block)", ""],
      ["each_pair", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-each_pair", "(&block)", "<p>Convert all hashes in values into parameters, then yield each pair in the\nsame way as <code>Hash#each_pair</code> …\n"],
      ["each_record", "ActiveRecord::Batches::BatchEnumerator", "classes/ActiveRecord/Batches/BatchEnumerator.html#method-i-each_record", "()", "<p>Looping through a collection of records from the database (using the\n<code>all</code> method, for example) is very …\n"],
      ["eager_autoload", "ActiveSupport::Autoload", "classes/ActiveSupport/Autoload.html#method-i-eager_autoload", "()", ""],
      ["eager_load", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-eager_load", "(*args)", "<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre><code>User.eager_load(:posts)\n# SELECT &quot;users&quot;.&quot;id&quot; ...\n</code></pre>\n"],
      ["eager_load", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-eager_load", "()", ""],
      ["eager_load!", "ActiveSupport::Autoload", "classes/ActiveSupport/Autoload.html#method-i-eager_load-21", "()", ""],
      ["eager_load!", "Rails::Engine", "classes/Rails/Engine.html#method-i-eager_load-21", "()", "<p>Eager load the application by loading all ruby files inside eager_load\npaths.\n"],
      ["eager_load_namespaces", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-eager_load_namespaces", "()", "<p>All namespaces that are eager loaded\n"],
      ["eager_load_paths", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-i-eager_load_paths", "()", ""],
      ["eager_loading?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-eager_loading-3F", "()", "<p>Returns true if relation needs eager loading.\n"],
      ["edit_helper", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-edit_helper", "()", ""],
      ["email_exists?", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-email_exists-3F", "(email)", "<p>Returns true if the email exists.\n"],
      ["email_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-email_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “email”.\n\n<pre><code>email_field(&quot;user&quot;, &quot;address&quot;)\n# =&gt; &lt;input id=&quot;user_address&quot; ...\n</code></pre>\n"],
      ["email_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],
      ["emails", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-emails", "()", "<p>Returns all of the available email previews.\n"],
      ["emitted_hidden_id?", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F", "()", ""],
      ["empty", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-c-empty", "()", ""],
      ["empty?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-empty-3F", "", "<p>Returns true if the parameters have no key/value pairs.\n"],
      ["empty?", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-empty-3F", "()", ""],
      ["empty?", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-empty-3F", "()", "<p>Returns <code>true</code> if no errors are found, <code>false</code>\notherwise. If the error message is a string it can be empty. …\n"],
      ["empty?", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F", "()", "<p>Returns <code>true</code> if the collection is empty. If the collection has\nbeen loaded it is equivalent to <code>collection.size.zero?</code> …\n"],
      ["empty?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-empty-3F", "()", "<p>Returns true if there are no records.\n"],
      ["empty?", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-empty-3F", "()", "<p>Returns true if there are no records, otherwise false.\n"],
      ["empty?", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F", "()", ""],
      ["empty_insert_statement_value", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-empty_insert_statement_value", "()", ""],
      ["emulate_booleans", "ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans", "", "<p>By default, the Mysql2Adapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],
      ["enable_extension", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-enable_extension", "(name)", "<p>This is meant to be implemented by the adapters that support extensions\n"],
      ["enable_extension", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension", "(name)", ""],
      ["enable_query_cache!", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21", "()", ""],
      ["enable_query_cache!", "ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration", "classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-enable_query_cache-21", "()", ""],
      ["enable_test_adapter", "ActiveJob::TestHelper::TestQueueAdapter::ClassMethods", "classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html#method-i-enable_test_adapter", "(test_adapter)", ""],
      ["enable_warnings", "Kernel", "classes/Kernel.html#method-i-enable_warnings", "()", "<p>Sets $VERBOSE to <code>true</code> for the duration of the block and back\nto its original value afterwards.\n"],
      ["encode", "ActiveSupport::JSON", "classes/ActiveSupport/JSON.html#method-c-encode", "(value, options = nil)", "<p>Dumps objects in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n\n<pre><code>ActiveSupport::JSON.encode({ ...</code></pre>\n"],
      ["encode!", "ActionView::Template", "classes/ActionView/Template.html#method-i-encode-21", "()", "<p>This method is responsible for properly setting the encoding of the source.\nUntil this point, we assume …\n"],
      ["encode_credentials", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials", "(user_name, password)", ""],
      ["encode_credentials", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials", "(http_method, credentials, password, password_is_ha1)", ""],
      ["encode_credentials", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-encode_credentials", "(token, options = {})", "<p>Encodes the given token and options into an Authorization header value.\n<p>token   - String token. options …\n"],
      ["encode_params", "ActionDispatch::RequestEncoder::IdentityEncoder", "classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-encode_params", "(params)", ""],
      ["encode_with", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-encode_with", "(coder)", ""],
      ["encode_with", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-encode_with", "(coder)", "<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],
      ["encode_with", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-encode_with", "(coder)", "<p>Serializes the relation objects Array.\n"],
      ["encode_with", "ActiveSupport::OrderedHash", "classes/ActiveSupport/OrderedHash.html#method-i-encode_with", "(coder)", ""],
      ["encode_with", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-encode_with", "(coder)", ""],
      ["encoding", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-encoding", "()", "<p>Returns the current database encoding format.\n"],
      ["encoding", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding", "()", "<p>Returns the current database encoding format as a string, eg:\n&#39;UTF-8&#39;\n"],
      ["encoding=", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-encoding-3D", "(value)", ""],
      ["encrypt_and_sign", "ActiveSupport::MessageEncryptor", "classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign", "(value)", "<p>Encrypt and sign a message. We need to sign the message in order to avoid\npadding attacks. Reference: …\n"],
      ["encrypted", "ActionDispatch::Cookies::ChainedCookieJars", "classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-encrypted", "()", "<p>Returns a jar that&#39;ll automatically encrypt cookie values before\nsending them to the client and will …\n"],
      ["end_document", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document", "()", ""],
      ["end_element", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element", "(name)", ""],
      ["end_of_day", "Date", "classes/Date.html#method-i-end_of_day", "()", "<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],
      ["end_of_day", "DateTime", "classes/DateTime.html#method-i-end_of_day", "()", "<p>Returns a new DateTime representing the end of the day (23:59:59).\n"],
      ["end_of_day", "Time", "classes/Time.html#method-i-end_of_day", "()", "<p>Returns a new Time representing the end of the day, 23:59:59.999999\n"],
      ["end_of_hour", "DateTime", "classes/DateTime.html#method-i-end_of_hour", "()", "<p>Returns a new DateTime representing the end of the hour (hh:59:59).\n"],
      ["end_of_hour", "Time", "classes/Time.html#method-i-end_of_hour", "()", "<p>Returns a new Time representing the end of the hour, x:59:59.999999\n"],
      ["end_of_minute", "DateTime", "classes/DateTime.html#method-i-end_of_minute", "()", "<p>Returns a new DateTime representing the end of the minute (hh:mm:59).\n"],
      ["end_of_minute", "Time", "classes/Time.html#method-i-end_of_minute", "()", "<p>Returns a new Time representing the end of the minute, x:xx:59.999999\n"],
      ["end_of_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-end_of_month", "()", "<p>Returns a new date/time representing the end of the month. DateTime objects\nwill have a time set to 23:59:59. …\n"],
      ["end_of_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-end_of_quarter", "()", "<p>Returns a new date/time at the end of the quarter.\n\n<pre><code>today = Date.today # =&gt; Fri, 10 Jul 2015\ntoday.end_of_quarter ...</code></pre>\n"],
      ["end_of_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-end_of_week", "(start_day = Date.beginning_of_week)", "<p>Returns a new date/time representing the end of this week on the given day.\nWeek is assumed to start …\n"],
      ["end_of_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-end_of_year", "()", "<p>Returns a new date/time representing the end of the year. DateTime objects\nwill have a time set to 23:59:59. …\n"],
      ["endpoint", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-endpoint", "()", ""],
      ["endpoint", "Rails::Engine", "classes/Rails/Engine.html#method-c-endpoint", "(endpoint = nil)", ""],
      ["endpoint", "Rails::Engine", "classes/Rails/Engine.html#method-i-endpoint", "()", "<p>Returns the endpoint for this engine. If none is registered, defaults to an\nActionDispatch::Routing::RouteSet …\n"],
      ["engine?", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-engine-3F", "()", ""],
      ["engine?", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-engine-3F", "()", "<p>Returns true when the app is a Rails engine.\n"],
      ["enlist_fixture_connections", "ActiveRecord::TestFixtures", "classes/ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections", "()", ""],
      ["enqueue", "ActiveJob::Enqueuing", "classes/ActiveJob/Enqueuing.html#method-i-enqueue", "(options = {})", "<p>Enqueues the job to be performed by the queue adapter.\n<p>Options\n<p><code>:wait</code> - Enqueues the job with the specified …\n"],
      ["enqueued_jobs", "ActiveJob::QueueAdapters::TestAdapter", "classes/ActiveJob/QueueAdapters/TestAdapter.html#method-i-enqueued_jobs", "()", "<p>Provides a store of all the enqueued jobs with the TestAdapter so you can\ncheck them.\n"],
      ["ensure_confirmation_sent", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-ensure_confirmation_sent", "()", ""],
      ["enum", "ActiveRecord::Enum", "classes/ActiveRecord/Enum.html#method-i-enum", "(definitions)", ""],
      ["enumerate", "SourceAnnotationExtractor", "classes/SourceAnnotationExtractor.html#method-c-enumerate", "(tag, options = {})", "<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>config</code>, <code>db</code>, <code>lib</code>,\nand <code>test</code> (recursively). …\n"],
      ["env", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-env", "()", ""],
      ["env", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-env", "()", ""],
      ["env", "Rails", "classes/Rails.html#method-c-env", "()", "<p>Returns the current Rails environment.\n\n<pre><code>Rails.env # =&gt; &quot;development&quot;\nRails.env.development? # =&gt; true\nRails.env.production? ...</code></pre>\n"],
      ["env=", "Rails", "classes/Rails.html#method-c-env-3D", "(environment)", "<p>Sets the Rails environment.\n\n<pre><code>Rails.env = &quot;staging&quot; # =&gt; &quot;staging&quot;\n</code></pre>\n"],
      ["env_config", "Rails::Application", "classes/Rails/Application.html#method-i-env_config", "()", "<p>Stores some of the Rails initial environment parameters which will be used\nby middlewares and engines …\n"],
      ["env_config", "Rails::Engine", "classes/Rails/Engine.html#method-i-env_config", "()", "<p>Defines additional Rack env configuration that is added on each call.\n"],
      ["env_filter", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-env_filter", "()", ""],
      ["environment", "Rails::Console", "classes/Rails/Console.html#method-i-environment", "()", ""],
      ["environment", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-i-environment", "()", ""],
      ["environment", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-environment", "(data = nil, options = {})", "<p>Adds a line inside the Application class for\n<code>config/application.rb</code>.\n<p>If options <code>:env</code> is specified, the …\n"],
      ["environment?", "Rails::Console", "classes/Rails/Console.html#method-i-environment-3F", "()", ""],
      ["eof?", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-eof-3F", "()", "<p>Shortcut for <code>tempfile.eof?</code>.\n"],
      ["eql?", "ActionView::FileSystemResolver", "classes/ActionView/FileSystemResolver.html#method-i-eql-3F", "(resolver)", ""],
      ["eql?", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-eql-3F", "", "<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the\nclass name and <code>other</code> have the same length and content, …\n"],
      ["eql?", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-eql-3F", "(other)", ""],
      ["eql?", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-eql-3F", "(other)", ""],
      ["eql?", "ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-eql-3F", "(other)", ""],
      ["eql?", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-eql-3F", "(comparison_object)", ""],
      ["eql?", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-eql-3F", "(other)", "<p>Returns <code>true</code> if <code>other</code> is also a Duration\ninstance, which has the same parts as this one.\n"],
      ["eql?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-eql-3F", "(other)", "<p>Returns <code>true</code> if <code>other</code> is equal to current object.\n"],
      ["eql?", "Mime::Type", "classes/Mime/Type.html#method-i-eql-3F", "(other)", ""],
      ["eql?", "Time", "classes/Time.html#method-i-eql-3F", "(other)", ""],
      ["eql_with_coercion", "Time", "classes/Time.html#method-i-eql_with_coercion", "(other)", "<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone\ninstances can be eql? to …\n"],
      ["eql_without_coercion", "Time", "classes/Time.html#method-i-eql_without_coercion", "(other)", ""],
      ["error", "ActionView::Digestor::NullLogger", "classes/ActionView/Digestor/NullLogger.html#method-c-error", "(_)", ""],
      ["error", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error", "(error_message)", ""],
      ["error_message", "ActionView::Helpers::ActiveModelInstanceTag", "classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message", "()", ""],
      ["error_number", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number", "(exception)", ""],
      ["error_on_ignored_order_or_limit", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-error_on_ignored_order_or_limit", "()", ""],
      ["error_on_ignored_order_or_limit", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-error_on_ignored_order_or_limit", "()", ""],
      ["error_on_ignored_order_or_limit=", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-error_on_ignored_order_or_limit-3D", "(value)", ""],
      ["error_wrapping", "ActionView::Helpers::ActiveModelInstanceTag", "classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping", "(html_tag)", ""],
      ["errors", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-errors", "()", "<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n\n<pre><code>class Person\n  include ...</code></pre>\n"],
      ["errors", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-i-errors", "()", "<p>POST create PATCH/PUT update\n"],
      ["escape_bytea", "ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-escape_bytea", "(value)", "<p>Escapes binary strings for bytea input to the database.\n"],
      ["escape_javascript", "ActionView::Helpers::JavaScriptHelper", "classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript", "(javascript)", "<p>Escapes carriage returns and single and double quotes for JavaScript\nsegments.\n<p>Also available through …\n"],
      ["escape_once", "ActionView::Helpers::TagHelper", "classes/ActionView/Helpers/TagHelper.html#method-i-escape_once", "(html)", "<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n\n<pre><code>escape_once(&quot;1 &lt; 2 &amp;amp; ...</code></pre>\n"],
      ["establish_connection", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection", "(config)", ""],
      ["establish_connection", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-establish_connection", "(config = nil)", "<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],
      ["etag", "ActionController::ConditionalGet::ClassMethods", "classes/ActionController/ConditionalGet/ClassMethods.html#method-i-etag", "(&etagger)", "<p>Allows you to consider additional controller-wide information when\ngenerating an ETag. For example, if …\n"],
      ["etag=", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3D", "(weak_validators)", "<p>This method sets a weak ETag validator on the response so browsers and\nproxies may cache the response, …\n"],
      ["etag?", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3F", "()", ""],
      ["etag_matches?", "ActionDispatch::Http::Cache::Request", "classes/ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F", "(etag)", ""],
      ["event_loop", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-event_loop", "()", ""],
      ["exabyte", "Numeric", "classes/Numeric.html#method-i-exabyte", "()", ""],
      ["exabytes", "Numeric", "classes/Numeric.html#method-i-exabytes", "()", "<p>Returns the number of bytes equivalent to the exabytes provided.\n\n<pre><code>2.exabytes # =&gt; 2_305_843_009_213_693_952\n</code></pre>\n"],
      ["except", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-except", "(*keys)", "<p>Returns a new <code>ActionController::Parameters</code> instance that\nfilters out the given <code>keys</code>.\n\n<pre><code>params = ActionController::Parameters.new(a: ...</code></pre>\n"],
      ["except", "ActiveRecord::SpawnMethods", "classes/ActiveRecord/SpawnMethods.html#method-i-except", "(*skips)", "<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre><code>Post.order(&#39;id asc&#39;).except(:order)       ...</code></pre>\n"],
      ["except", "Hash", "classes/Hash.html#method-i-except", "(*keys)", "<p>Returns a hash that includes everything except given keys.\n\n<pre><code>hash = { a: true, b: false, c: nil }\nhash.except(:c) ...</code></pre>\n"],
      ["except!", "Hash", "classes/Hash.html#method-i-except-21", "(*keys)", "<p>Removes the given keys from hash and returns it.\n\n<pre><code>hash = { a: true, b: false, c: nil }\nhash.except!(:c) ...</code></pre>\n"],
      ["excerpt", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-excerpt", "(text, phrase, options = {})", "<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],
      ["exclude?", "Enumerable", "classes/Enumerable.html#method-i-exclude-3F", "(object)", "<p>The negative of the <code>Enumerable#include?</code>. Returns\n<code>true</code> if the collection does not include the object. …\n"],
      ["exclude?", "String", "classes/String.html#method-i-exclude-3F", "(string)", "<p>The inverse of <code>String#include?</code>. Returns true if the string\ndoes not include the other string.\n\n<pre><code>&quot;hello&quot;.exclude? ...</code></pre>\n"],
      ["exclusive", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-exclusive", "(purpose: nil, compatible: [], after_compatible: [], no_wait: false)", "<p>Execute the supplied block while holding the Exclusive lock. If\n<code>no_wait</code> is set and the lock is not immediately …\n"],
      ["exec_delete", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete", "(sql, name = nil, binds = [])", "<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],
      ["exec_delete", "ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_delete", "(sql, name = nil, binds = [])", ""],
      ["exec_delete", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_delete", "(sql, name = nil, binds = [])", ""],
      ["exec_delete", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_delete", "(sql, name = \"SQL\", binds = [])", ""],
      ["exec_insert", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert", "(sql, name = nil, binds = [], pk = nil, sequence_name = nil)", "<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],
      ["exec_insert", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_insert", "(sql, name = nil, binds = [], pk = nil, sequence_name = nil)", ""],
      ["exec_migration", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-exec_migration", "(conn, direction)", ""],
      ["exec_queries", "ActiveRecord::Relation::RecordFetchWarning", "classes/ActiveRecord/Relation/RecordFetchWarning.html#method-i-exec_queries", "()", "<p>When this module is prepended to ActiveRecord::Relation and\n<code>config.active_record.warn_on_records_fetched_greater_than</code> …\n"],
      ["exec_query", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query", "(sql, name = \"SQL\", binds = [], prepare: false)", "<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],
      ["exec_query", "ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_query", "(sql, name = \"SQL\", binds = [], prepare: false)", ""],
      ["exec_query", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_query", "(sql, name = \"SQL\", binds = [], prepare: false)", ""],
      ["exec_query", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_query", "(sql, name = nil, binds = [], prepare: false)", ""],
      ["exec_rollback_db_transaction", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_rollback_db_transaction", "()", "<p>Aborts a transaction.\n"],
      ["exec_rollback_to_savepoint", "ActiveRecord::ConnectionAdapters::Savepoints", "classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-exec_rollback_to_savepoint", "(name = current_savepoint_name)", ""],
      ["exec_update", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update", "(sql, name = nil, binds = [])", "<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],
      ["exec_update", "ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-exec_update", "(sql, name = nil, binds = [])", ""],
      ["exec_update", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_update", "(sql, name = nil, binds = [])", ""],
      ["exec_update", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_update", "(sql, name = \"SQL\", binds = [])", ""],
      ["executable", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-executable", "()", ""],
      ["execute", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-execute", "(sql, name = nil)", "<p>Executes the SQL statement in the context of this connection.\n"],
      ["execute", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute", "(sql, name = nil)", "<p>Executes the SQL statement in the context of this connection and returns\nthe raw result from the connection …\n"],
      ["execute", "ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/MySQL/DatabaseStatements.html#method-i-execute", "(sql, name = nil)", "<p>Executes the SQL statement in the context of this connection.\n"],
      ["execute", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-execute", "(sql, name = nil)", "<p>Executes an SQL statement, returning a PG::Result object on success or\nraising a PG::Error exception …\n"],
      ["execute", "ActiveSupport::FileUpdateChecker", "classes/ActiveSupport/FileUpdateChecker.html#method-i-execute", "()", "<p>Executes the given block and updates the latest watched files and\ntimestamp.\n"],
      ["execute", "Rails::Application::RoutesReloader", "classes/Rails/Application/RoutesReloader.html#method-i-execute", "()", ""],
      ["execute_command", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-execute_command", "(executor, command, options = {})", "<p>Runs the supplied command using either “rake …” or “rails …” based on the\nexecutor …\n"],
      ["execute_hook", "ActiveSupport::LazyLoadHooks", "classes/ActiveSupport/LazyLoadHooks.html#method-i-execute_hook", "(base, options, block)", ""],
      ["execute_if_updated", "ActiveSupport::FileUpdateChecker", "classes/ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated", "()", "<p>Execute the block given if updated.\n"],
      ["execute_if_updated", "Rails::Application::RoutesReloader", "classes/Rails/Application/RoutesReloader.html#method-i-execute_if_updated", "()", ""],
      ["exist?", "ActionDispatch::RailsEntityStore", "classes/ActionDispatch/RailsEntityStore.html#method-i-exist-3F", "(key)", ""],
      ["exist?", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-exist-3F", "(name, options = nil)", "<p>Returns <code>true</code> if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],
      ["existent", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-existent", "()", "<p>Returns all expanded paths but only if they exist in the filesystem.\n"],
      ["existent_directories", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-existent_directories", "()", ""],
      ["exists?", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-exists-3F", "(preview)", "<p>Returns true if the preview exists.\n"],
      ["exists?", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-exists-3F", "(name, prefixes = [], partial = false, keys = [], **options)", ""],
      ["exists?", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-exists-3F", "(conditions = :none)", "<p>Returns true if a record exists in the table that matches the\n<code>id</code> or conditions given, or false otherwise. …\n"],
      ["expand_cache_key", "ActiveSupport::Cache", "classes/ActiveSupport/Cache.html#method-c-expand_cache_key", "(key, namespace = nil)", "<p>Expands out the <code>key</code> argument into a key that can be used for\nthe cache store. Optionally accepts a namespace, …\n"],
      ["expand_hash_conditions_for_aggregates", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates", "(attrs)", "<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a #composed_of relationship …\n"],
      ["expanded", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-expanded", "()", "<p>Expands all paths against the root and return all unique values.\n"],
      ["expected_response", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-expected_response", "(http_method, uri, credentials, password, password_is_ha1 = true)", "<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],
      ["expire", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire", "()", "<p>this method must only be called while holding connection pool&#39;s mutex\n"],
      ["expire_fragment", "AbstractController::Caching::Fragments", "classes/AbstractController/Caching/Fragments.html#method-i-expire_fragment", "(key, options = nil)", "<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],
      ["expires_in", "ActionController::ConditionalGet", "classes/ActionController/ConditionalGet.html#method-i-expires_in", "(seconds, options = {})", "<p>Sets an HTTP 1.1 Cache-Control header. Defaults to issuing a\n<code>private</code> instruction, so that intermediate …\n"],
      ["expires_now", "ActionController::ConditionalGet", "classes/ActionController/ConditionalGet.html#method-i-expires_now", "()", "<p>Sets an HTTP 1.1 Cache-Control header of <code>no-cache</code>. This means\nthe resource will be marked as stale, so …\n"],
      ["explain", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-explain", "(arel, binds = [])", ""],
      ["explain", "ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-explain", "(arel, binds = [])", ""],
      ["explain", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-explain", "(arel, binds = [])", ""],
      ["explain", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-explain", "()", "<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],
      ["extended", "ActiveSupport::PerThreadRegistry", "classes/ActiveSupport/PerThreadRegistry.html#method-c-extended", "(object)", ""],
      ["extending", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-extending", "(*modules, &block)", "<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],
      ["extension_enabled?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F", "(name)", ""],
      ["extensions", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions", "()", "<p>A list of extensions, to be filled in by adapters that support them.\n"],
      ["extensions", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions", "()", ""],
      ["extify", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-extify", "(name)", "<p>Add an extension to the given name based on the platform.\n"],
      ["extract!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-extract-21", "(*keys)", "<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre><code>params = ActionController::Parameters.new(a: ...</code></pre>\n"],
      ["extract!", "Hash", "classes/Hash.html#method-i-extract-21", "(*keys)", "<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre><code>{ a: 1, b: 2, c: 3, d: 4 }.extract!(:a, ...</code></pre>\n"],
      ["extract_annotations_from", "SourceAnnotationExtractor", "classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from", "(file, pattern)", "<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],
      ["extract_domain", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-extract_domain", "(host, tld_length)", "<p>Returns the domain part of a host given the domain level.\n\n<pre><code># Top-level domain example\nextract_domain(&#39;www.example.com&#39;, ...</code></pre>\n"],
      ["extract_last_module", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-i-extract_last_module", "(nesting)", "<p>Takes in an array of nested modules and extracts the last module\n"],
      ["extract_options!", "Array", "classes/Array.html#method-i-extract_options-21", "()", "<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it&#39;s …\n"],
      ["extract_session_id", "ActionDispatch::Session::StaleSessionCheck", "classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-extract_session_id", "(env)", ""],
      ["extract_subdomain", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-extract_subdomain", "(host, tld_length)", "<p>Returns the subdomains of a host as a String given the domain level.\n\n<pre><code># Top-level domain example\nextract_subdomain(&#39;www.example.com&#39;, ...</code></pre>\n"],
      ["extract_subdomains", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-extract_subdomains", "(host, tld_length)", "<p>Returns the subdomains of a host as an Array given the domain level.\n\n<pre><code># Top-level domain example\nextract_subdomains(&#39;www.example.com&#39;, ...</code></pre>\n"],
      ["extractable_options?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F", "()", "<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],
      ["extractable_options?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F", "()", "<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],
      ["extractable_options?", "ActiveSupport::OrderedHash", "classes/ActiveSupport/OrderedHash.html#method-i-extractable_options-3F", "()", "<p>Returns true to make sure that this hash is extractable via\n<code>Array#extract_options!</code>\n"],
      ["extractable_options?", "Hash", "classes/Hash.html#method-i-extractable_options-3F", "()", "<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],
      ["fallbacks", "Rails::Generators", "classes/Rails/Generators.html#method-c-fallbacks", "()", "<p>Hold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another …\n"],
      ["favicon_link_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag", "(source = \"favicon.ico\", options = {})", "<p>Returns a link tag for a favicon managed by the asset pipeline.\n<p>If a page has no link like the one generated …\n"],
      ["fetch", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-fetch", "(key, *args)", "<p>Returns a parameter for the given <code>key</code>. If the <code>key</code>\ncan&#39;t be found, there are several options: With …\n"],
      ["fetch", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-fetch", "(key, default = DEFAULT)", "<p>Returns the value for the given key mapped to @env.\n<p>If the key is not found and an optional code block …\n"],
      ["fetch", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-fetch", "(name, options = nil)", "<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],
      ["fetch", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch", "(key, *extras)", "<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["fetch", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch", "(key, *extras)", "<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre><code>counters = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["fetch", "Mime", "classes/Mime.html#method-c-fetch", "(type)", ""],
      ["fetch_multi", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-fetch_multi", "(*names)", "<p>Fetches data from the cache, using the given keys. If there is data in the\ncache with the given keys, …\n"],
      ["fetch_type_metadata", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-fetch_type_metadata", "(column_name, sql_type, oid, fmod)", ""],
      ["fetch_type_metadata", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-fetch_type_metadata", "(sql_type)", ""],
      ["field_set_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag", "(legend = nil, options = nil, &block)", "<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset&#39;s title (optional …\n"],
      ["fields", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-fields", "(scope = nil, model: nil, **options, &block)", "<p>See the docs for the <code>ActionView::FormHelper.fields</code> helper\nmethod.\n"],
      ["fields", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-fields", "(scope = nil, model: nil, **options, &block)", "<p>Scopes input fields with either an explicit scope or model. Like\n<code>form_with</code> does with <code>:scope</code> or <code>:model</code>\n…\n"],
      ["fields_for", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for", "(record_name, record_object = nil, fields_options = {}, &block)", "<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],
      ["fields_for", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-fields_for", "(record_name, record_object = nil, options = {}, &block)", "<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],
      ["fields_for_style?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-fields_for_style-3F", "()", ""],
      ["fifth", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-fifth", "", "<p>Same as #first except returns only the fifth record.\n"],
      ["fifth", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-fifth", "()", "<p>Find the fifth record. If no order is defined it will order by primary key.\n\n<pre><code>Person.fifth # returns the ...\n</code></pre>\n"],
      ["fifth", "Array", "classes/Array.html#method-i-fifth", "()", "<p>Equal to <code>self[4]</code>.\n\n<pre><code>%w( a b c d e ).fifth # =&gt; &quot;e&quot;\n</code></pre>\n"],
      ["fifth!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-fifth-21", "()", "<p>Same as #fifth but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],
      ["file_field", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-file_field", "(method, options = {})", "<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],
      ["file_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-file_field", "(object_name, method, options = {})", "<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],
      ["file_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag", "(name, options = {})", "<p>Creates a file upload field. If you are using file uploads then you will\nalso need to set the multipart …\n"],
      ["file_fixture", "ActiveSupport::Testing::FileFixtures", "classes/ActiveSupport/Testing/FileFixtures.html#method-i-file_fixture", "(fixture_name)", "<p>Returns a <code>Pathname</code> to the fixture file named\n<code>fixture_name</code>.\n<p>Raises <code>ArgumentError</code> if <code>fixture_name</code> can&#39;t …\n"],
      ["file_lookup_paths", "Rails::Command", "classes/Rails/Command.html#method-c-file_lookup_paths", "()", ""],
      ["file_lookup_paths", "Rails::Generators", "classes/Rails/Generators.html#method-c-file_lookup_paths", "()", ""],
      ["file_path", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-file_path", "()", ""],
      ["filename", "ActiveSupport::Multibyte::Unicode::UnicodeDatabase", "classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename", "()", "<p>Returns the filename for the data file for this version.\n"],
      ["filter", "ActionDispatch::Http::ParameterFilter", "classes/ActionDispatch/Http/ParameterFilter.html#method-i-filter", "(params)", ""],
      ["filter", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-i-filter", "(backtrace, kind = :silent)", ""],
      ["filter_backtrace", "Rails::Console::BacktraceCleaner", "classes/Rails/Console/BacktraceCleaner.html#method-i-filter_backtrace", "(bt)", ""],
      ["filter_proxies", "ActionDispatch::RemoteIp::GetIp", "classes/ActionDispatch/RemoteIp/GetIp.html#method-i-filter_proxies", "(ips)", ""],
      ["filtered_env", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_env", "()", "<p>Returns a hash of request.env with all sensitive data replaced.\n"],
      ["filtered_parameters", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters", "()", "<p>Returns a hash of parameters with all sensitive data replaced.\n"],
      ["filtered_path", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_path", "()", "<p>Reconstructed a path with all sensitive GET parameters replaced.\n"],
      ["filtered_query_string", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string", "()", ""],
      ["finalized?", "ActiveRecord::ConnectionAdapters::TransactionState", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-finalized-3F", "()", ""],
      ["find", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-find", "(preview)", "<p>Find a mailer preview by its underscored class name.\n"],
      ["find", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-find", "(name, prefixes = [], partial = false, keys = [], options = {})", ""],
      ["find", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-find", "(*args, &block)", "<p>Finds an object in the collection responding to the <code>id</code>. Uses\nthe same rules as ActiveRecord::Base.find …\n"],
      ["find", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-find", "(*args)", "<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6),\nor an array of ids ([5, 6, …\n"],
      ["find", "Rails::Engine", "classes/Rails/Engine.html#method-c-find", "(path)", "<p>Finds engine with given path.\n"],
      ["find", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-c-find", "(klass, params = nil)", "<p>GET show GET edit PATCH/PUT update DELETE destroy\n"],
      ["find", "SourceAnnotationExtractor", "classes/SourceAnnotationExtractor.html#method-i-find", "(dirs)", "<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations.\n"],
      ["find_all", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-find_all", "(name, prefixes = [], partial = false, keys = [], options = {})", ""],
      ["find_all", "ActionView::Resolver", "classes/ActionView/Resolver.html#method-i-find_all", "(name, prefix = nil, partial = false, details = {}, key = nil, locals = [])", "<p>Normalizes the arguments and passes it on to find_templates.\n"],
      ["find_all_anywhere", "ActionView::Resolver", "classes/ActionView/Resolver.html#method-i-find_all_anywhere", "(name, prefix, partial = false, details = {}, key = nil, locals = [])", ""],
      ["find_beginning_of_week!", "Date", "classes/Date.html#method-c-find_beginning_of_week-21", "(week_start)", "<p>Returns week start day symbol (e.g. :monday), or raises an\n<code>ArgumentError</code> for invalid day symbol.\n"],
      ["find_by", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-find_by", "(arg, *args)", "<p>Finds the first record matching the specified conditions. There is no\nimplied ordering so if order matters, …\n"],
      ["find_by!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-find_by-21", "(arg, *args)", "<p>Like #find_by, except that if no record is found, raises an\nActiveRecord::RecordNotFound error.\n"],
      ["find_by_sql", "ActiveRecord::Querying", "classes/ActiveRecord/Querying.html#method-i-find_by_sql", "(sql, binds = [], preparable: nil, &block)", "<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],
      ["find_cmd_and_exec", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-i-find_cmd_and_exec", "(commands, *args)", ""],
      ["find_each", "ActiveRecord::Batches", "classes/ActiveRecord/Batches.html#method-i-find_each", "(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil)", "<p>Looping through a collection of records from the database (using the\nScoping::Named::ClassMethods.all …\n"],
      ["find_file", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-find_file", "(name, prefixes = [], partial = false, keys = [], options = {})", ""],
      ["find_in", "SourceAnnotationExtractor", "classes/SourceAnnotationExtractor.html#method-i-find_in", "(dir)", "<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],
      ["find_in_batches", "ActiveRecord::Batches", "classes/ActiveRecord/Batches.html#method-i-find_in_batches", "(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil)", "<p>Yields each batch of records that was found by the find options as an\narray.\n\n<pre><code>Person.where(&quot;age &gt; 21&quot;).find_in_batches ...</code></pre>\n"],
      ["find_or_create_by", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-find_or_create_by", "(attributes, &block)", "<p>Finds the first record with the given attributes, or creates a record with\nthe attributes if one is not …\n"],
      ["find_or_create_by!", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-find_or_create_by-21", "(attributes, &block)", "<p>Like #find_or_create_by, but calls create! so an exception is raised if the\ncreated record is invalid. …\n"],
      ["find_or_initialize_by", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by", "(attributes, &block)", "<p>Like #find_or_create_by, but calls new instead of create.\n"],
      ["find_root", "Rails::Application", "classes/Rails/Application.html#method-c-find_root", "(from)", ""],
      ["find_root", "Rails::Engine", "classes/Rails/Engine.html#method-c-find_root", "(from)", ""],
      ["find_session", "ActionDispatch::Session::CacheStore", "classes/ActionDispatch/Session/CacheStore.html#method-i-find_session", "(env, sid)", "<p>Get a session from the cache.\n"],
      ["find_template", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-find_template", "(name, prefixes = [], partial = false, keys = [], options = {})", ""],
      ["find_tzinfo", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-find_tzinfo", "(name)", ""],
      ["find_zone", "Time", "classes/Time.html#method-c-find_zone", "(time_zone)", "<p>Returns a TimeZone instance matching the time zone provided. Accepts the\ntime zone in any format supported …\n"],
      ["find_zone!", "Time", "classes/Time.html#method-c-find_zone-21", "(time_zone)", "<p>Returns a TimeZone instance matching the time zone provided. Accepts the\ntime zone in any format supported …\n"],
      ["finder", "ActiveRecord::DynamicMatchers::FindBy", "classes/ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder", "()", ""],
      ["finder", "ActiveRecord::DynamicMatchers::FindByBang", "classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder", "()", ""],
      ["finish", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-i-finish", "(name, id, payload)", ""],
      ["finish", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-finish", "(name, id, payload, listeners = listeners_for(name))", ""],
      ["finish", "ActiveSupport::Notifications::Instrumenter", "classes/ActiveSupport/Notifications/Instrumenter.html#method-i-finish", "(name, payload)", "<p>Send a finish notification with <code>name</code> and <code>payload</code>.\n"],
      ["finish", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-i-finish", "(name, id, payload)", ""],
      ["finish_with_state", "ActiveSupport::Notifications::Instrumenter", "classes/ActiveSupport/Notifications/Instrumenter.html#method-i-finish_with_state", "(listeners_state, name, payload)", ""],
      ["first", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-first", "", "<p>Returns the first record, or the first <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],
      ["first", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-first", "(limit = nil)", "<p>Find the first record (or first N records if a parameter is supplied). If\nno order is defined it will …\n"],
      ["first", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-first", "()", "<p>Returns the first record from the rows collection. If the rows collection\nis empty, returns <code>nil</code>.\n"],
      ["first", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-first", "()", ""],
      ["first", "String", "classes/String.html#method-i-first", "(limit = 1)", "<p>Returns the first character. If a limit is supplied, returns a substring\nfrom the beginning of the string …\n"],
      ["first!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-first-21", "()", "<p>Same as #first but raises ActiveRecord::RecordNotFound if no record is\nfound. Note that #first! accepts …\n"],
      ["first?", "ActionView::PartialIteration", "classes/ActionView/PartialIteration.html#method-i-first-3F", "()", "<p>Check if this is the first iteration of the partial.\n"],
      ["fixture_file_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-fixture_file_name", "()", ""],
      ["fixture_file_upload", "ActionDispatch::TestProcess::FixtureFile", "classes/ActionDispatch/TestProcess/FixtureFile.html#method-i-fixture_file_upload", "(path, mime_type = nil, binary = false)", "<p>Shortcut for\n<code>Rack::Test::UploadedFile.new(File.join(ActionDispatch::IntegrationTest.fixture_path,\npath),</code> …\n"],
      ["fixture_is_cached?", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F", "(connection, table_name)", ""],
      ["fixtures", "ActiveRecord::TestFixtures::ClassMethods", "classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures", "(*fixture_set_names)", ""],
      ["fixtures_path", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-fixtures_path", "()", ""],
      ["flash", "ActionDispatch::Flash::RequestMethods", "classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash", "()", "<p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read\na notice you put there or <code>flash[\"notice\"]</code> …\n"],
      ["flash", "ActionDispatch::TestProcess", "classes/ActionDispatch/TestProcess.html#method-i-flash", "()", ""],
      ["flash=", "ActionDispatch::Flash::RequestMethods", "classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash-3D", "(flash)", ""],
      ["flush", "ActiveSupport::LogSubscriber::TestHelper::MockLogger", "classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush", "()", ""],
      ["flush", "ActiveSupport::TaggedLogging", "classes/ActiveSupport/TaggedLogging.html#method-i-flush", "()", ""],
      ["flush_all!", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-c-flush_all-21", "()", "<p>Flush all log_subscribers&#39; logger.\n"],
      ["follow_redirect!", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21", "()", "<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],
      ["font_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_path", "(source, options = {})", "<p>Computes the path to a font asset. Full paths from the document root will\nbe passed through.\n\n<pre><code>font_path(&quot;font&quot;) ...</code></pre>\n"],
      ["font_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_url", "(source, options = {})", "<p>Computes the full URL to a font asset. This will use <code>font_path</code>\ninternally, so most of their behaviors …\n"],
      ["for", "ActionController::Renderer", "classes/ActionController/Renderer.html#method-c-for", "(controller, env = {}, defaults = DEFAULTS.dup)", "<p>Create a new renderer instance for a specific controller class.\n"],
      ["force_ssl", "ActionController::ForceSSL::ClassMethods", "classes/ActionController/ForceSSL/ClassMethods.html#method-i-force_ssl", "(options = {})", "<p>Force the request to this particular controller or specified actions to be\nthrough the HTTPS protocol. …\n"],
      ["force_ssl_redirect", "ActionController::ForceSSL", "classes/ActionController/ForceSSL.html#method-i-force_ssl_redirect", "(host_or_options = nil)", "<p>Redirect the existing request to use the HTTPS protocol.\n<p>Parameters\n<p><code>host_or_options</code> - Either a host name …\n"],
      ["foreign_key", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-foreign_key", "(class_name, separate_class_name_and_id_with_underscore = true)", "<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],
      ["foreign_key", "String", "classes/String.html#method-i-foreign_key", "(separate_class_name_and_id_with_underscore = true)", "<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],
      ["foreign_key_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_key_exists-3F", "(from_table, options_or_to_table = {})", "<p>Checks to see if a foreign key exists on a table for a given foreign key\ndefinition.\n\n<pre><code># Checks to see if ...\n</code></pre>\n"],
      ["foreign_keys", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-foreign_keys", "(table_name)", ""],
      ["foreign_keys", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-foreign_keys", "(table_name)", ""],
      ["foreign_keys", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-foreign_keys", "(table_name)", ""],
      ["foreign_keys", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_keys", "(table_name)", "<p>Returns an array of foreign keys for the given table. The foreign keys are\nrepresented as ForeignKeyDefinition …\n"],
      ["forking_env?", "ActiveSupport::Testing::Isolation", "classes/ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F", "()", ""],
      ["form_data?", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-form_data-3F", "()", "<p>Determine whether the request body contains form-data by checking the\nrequest Content-Type for one of …\n"],
      ["form_for", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-form_for", "(record, options = {}, &block)", "<p>Creates a form that allows the user to create or update the attributes of a\nspecific model object.\n<p>The …\n"],
      ["form_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag", "(url_for_options = {}, options = {}, &block)", "<p>Starts a form tag that points the action to a url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],
      ["form_with", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-form_with", "(model: nil, scope: nil, url: nil, format: nil, **options)", "<p>Creates a form tag based on mixing URLs, scopes, or models.\n\n<pre><code># Using just a URL:\n&lt;%= form_with url: posts_path ...</code></pre>\n"],
      ["format", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format", "(view_path = [])", "<p>Returns the MIME type for the format used in the request.\n\n<pre><code>GET /posts/5.xml   | request.format =&gt; Mime[:xml] ...</code></pre>\n"],
      ["format=", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D", "(extension)", "<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],
      ["format_from_path_extension", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format_from_path_extension", "()", ""],
      ["format_paragraph", "ActionMailer::MailHelper", "classes/ActionMailer/MailHelper.html#method-i-format_paragraph", "(text, len = 72, indent = 2)", "<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented\n<code>indent</code> spaces. By default column length <code>len</code>\nequals 72 …\n"],
      ["formats", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats", "()", ""],
      ["formats=", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats-3D", "(extensions)", "<p>Sets the formats by string extensions. This differs from #format= by\nallowing you to set multiple, ordered …\n"],
      ["formatted_offset", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-formatted_offset", "(colon = true, alternate_utc_string = nil)", "<p>Returns a formatted string of the offset from UTC, or an alternative string\nif the time zone is already …\n"],
      ["formatted_offset", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-formatted_offset", "(colon = true, alternate_utc_string = nil)", "<p>Returns a formatted string of the offset from UTC, or an alternative string\nif the time zone is already …\n"],
      ["formatted_offset", "DateTime", "classes/DateTime.html#method-i-formatted_offset", "(colon = true, alternate_utc_string = nil)", "<p>Returns a formatted string of the offset from UTC, or an alternative string\nif the time zone is already …\n"],
      ["formatted_offset", "Time", "classes/Time.html#method-i-formatted_offset", "(colon = true, alternate_utc_string = nil)", "<p>Returns a formatted string of the offset from UTC, or an alternative string\nif the time zone is already …\n"],
      ["fortnight", "Numeric", "classes/Numeric.html#method-i-fortnight", "()", ""],
      ["fortnights", "Numeric", "classes/Numeric.html#method-i-fortnights", "()", "<p>Returns a Duration instance matching the number of fortnights provided.\n\n<pre><code>2.fortnights # =&gt; 4 weeks\n</code></pre>\n"],
      ["forty_two", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two", "", "<p>Same as #first except returns only the forty second record. Also known as\naccessing “the reddit”. …\n"],
      ["forty_two", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-forty_two", "()", "<p>Find the forty-second record. Also known as accessing “the reddit”. If no\norder is defined …\n"],
      ["forty_two", "Array", "classes/Array.html#method-i-forty_two", "()", "<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n\n<pre><code>(1..42).to_a.forty_two # =&gt; 42\n</code></pre>\n"],
      ["forty_two!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-forty_two-21", "()", "<p>Same as #forty_two but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],
      ["fourth", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-fourth", "", "<p>Same as #first except returns only the fourth record.\n"],
      ["fourth", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-fourth", "()", "<p>Find the fourth record. If no order is defined it will order by primary\nkey.\n\n<pre><code>Person.fourth # returns the ...\n</code></pre>\n"],
      ["fourth", "Array", "classes/Array.html#method-i-fourth", "()", "<p>Equal to <code>self[3]</code>.\n\n<pre><code>%w( a b c d e ).fourth # =&gt; &quot;d&quot;\n</code></pre>\n"],
      ["fourth!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-fourth-21", "()", "<p>Same as #fourth but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],
      ["fragment_cache_key", "AbstractController::Caching::Fragments", "classes/AbstractController/Caching/Fragments.html#method-i-fragment_cache_key", "(key)", "<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],
      ["fragment_cache_key", "AbstractController::Caching::Fragments::ClassMethods", "classes/AbstractController/Caching/Fragments/ClassMethods.html#method-i-fragment_cache_key", "(value = nil, &key)", "<p>Allows you to specify controller-wide key prefixes for cache fragments.\nPass either a constant <code>value</code> …\n"],
      ["fragment_exist?", "AbstractController::Caching::Fragments", "classes/AbstractController/Caching/Fragments.html#method-i-fragment_exist-3F", "(key, options = nil)", "<p>Check if a cached fragment from the location signified by <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],
      ["framework_trace", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-framework_trace", "()", ""],
      ["freeze", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-freeze", "()", "<p>Clone and freeze the attributes hash such that associations are still\naccessible, even on destroyed records, …\n"],
      ["freeze", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-freeze", "()", ""],
      ["fresh?", "ActionDispatch::Http::Cache::Request", "classes/ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F", "(response)", "<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],
      ["fresh_when", "ActionController::ConditionalGet", "classes/ActionController/ConditionalGet.html#method-i-fresh_when", "(object = nil, etag: nil, weak_etag: nil, strong_etag: nil, last_modified: nil, public: false, template: nil)", "<p>Sets the <code>etag</code>, <code>last_modified</code>, or both on the\nresponse and renders a <code>304 Not Modified</code> response if the …\n"],
      ["from", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-from", "(value, subquery_name = nil)", "<p>Specifies table from which the records will be fetched. For example:\n\n<pre><code>Topic.select(&#39;title&#39;).from(&#39;posts&#39;) ...</code></pre>\n"],
      ["from", "Array", "classes/Array.html#method-i-from", "(position)", "<p>Returns the tail of the array from <code>position</code>.\n\n<pre><code>%w( a b c d ).from(0)  # =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\n%w( a b ...</code></pre>\n"],
      ["from", "String", "classes/String.html#method-i-from", "(position)", "<p>Returns a substring from the given position to the end of the string. If\nthe position is negative, it …\n"],
      ["from_hash", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-c-from_hash", "(hash)", ""],
      ["from_json", "ActiveModel::Serializers::JSON", "classes/ActiveModel/Serializers/JSON.html#method-i-from_json", "(json, include_root = include_root_in_json)", "<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::JSON ...</code></pre>\n"],
      ["from_now", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-from_now", "(time = ::Time.current)", ""],
      ["from_rails_root", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-from_rails_root", "(string)", ""],
      ["from_response", "ActionDispatch::TestResponse", "classes/ActionDispatch/TestResponse.html#method-c-from_response", "(response)", ""],
      ["from_trusted_xml", "Hash", "classes/Hash.html#method-c-from_trusted_xml", "(xml)", "<p>Builds a Hash from XML just like <code>Hash.from_xml</code>, but also\nallows Symbol and YAML.\n"],
      ["from_xml", "Hash", "classes/Hash.html#method-c-from_xml", "(xml, disallowed_types = nil)", "<p>Returns a Hash containing a collection of pairs when the key is the node\nname and the value is its content …\n"],
      ["frozen?", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-frozen-3F", "()", "<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],
      ["full_message", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-full_message", "(attribute, message)", "<p>Returns a full message for a given attribute.\n\n<pre><code>person.errors.full_message(:name, &#39;is invalid&#39;) # =&gt; &quot;Name ...\n</code></pre>\n"],
      ["full_messages", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-full_messages", "()", "<p>Returns all the full error messages in an array.\n\n<pre><code>class Person\n  validates_presence_of :name, :address, ...</code></pre>\n"],
      ["full_messages_for", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-full_messages_for", "(attribute)", "<p>Returns all the full error messages for a given attribute in an array.\n\n<pre><code>class Person\n  validates_presence_of ...</code></pre>\n"],
      ["full_rollback?", "ActiveRecord::ConnectionAdapters::SavepointTransaction", "classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-full_rollback-3F", "()", ""],
      ["full_trace", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-full_trace", "()", ""],
      ["full_url_for", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-full_url_for", "(options)", ""],
      ["fullpath", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-fullpath", "()", "<p>Returns the <code>String</code> full path including params of the last URL\nrequested.\n\n<pre><code># get &quot;/articles&quot;\nrequest.fullpath ...</code></pre>\n"],
      ["future?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-future-3F", "()", "<p>Returns true if the current object&#39;s time is in the future.\n"],
      ["future?", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-future-3F", "()", "<p>Returns true if the date/time is in the future.\n"],
      ["gem", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-gem", "(*args)", "<p>Adds an entry into <code>Gemfile</code> for the supplied gem.\n\n<pre><code>gem &quot;rspec&quot;, group: :test\ngem &quot;technoweenie-restful-authentication&quot;, ...</code></pre>\n"],
      ["gem_group", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-gem_group", "(*names, &block)", "<p>Wraps gem entries inside a group.\n\n<pre><code>gem_group :development, :test do\n  gem &quot;rspec-rails&quot;\nend\n</code></pre>\n"],
      ["gem_version", "ActionCable", "classes/ActionCable.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Action Cable as a\n<code>Gem::Version</code>.\n"],
      ["gem_version", "ActionMailer", "classes/ActionMailer.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Action Mailer as a\n<code>Gem::Version</code>.\n"],
      ["gem_version", "ActionView", "classes/ActionView.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Action View as a\n<code>Gem::Version</code>\n"],
      ["gem_version", "ActiveJob", "classes/ActiveJob.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Active Job as a\n<code>Gem::Version</code>\n"],
      ["gem_version", "ActiveModel", "classes/ActiveModel.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Active Model as a\n<code>Gem::Version</code>\n"],
      ["gem_version", "ActiveRecord", "classes/ActiveRecord.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Active Record as a\n<code>Gem::Version</code>\n"],
      ["gem_version", "ActiveSupport", "classes/ActiveSupport.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Active Support as a\n<code>Gem::Version</code>.\n"],
      ["gem_version", "Rails", "classes/Rails.html#method-c-gem_version", "()", "<p>Returns the version of the currently loaded Rails as a\n<code>Gem::Version</code>\n"],
      ["gemfile", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-gemfile", "()", ""],
      ["gemfile", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-gemfile", "()", ""],
      ["gemfile_entry", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-gemfile_entry", "()", ""],
      ["gemspec", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-gemspec", "()", ""],
      ["generate", "ActiveSupport::MessageVerifier", "classes/ActiveSupport/MessageVerifier.html#method-i-generate", "(value)", "<p>Generates a signed message for the provided value.\n<p>The message is signed with the <code>MessageVerifier</code>&#39;s …\n"],
      ["generate", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-generate", "(what, *args)", "<p>Generate something using a generator from Rails or a plugin. The second\nparameter is the argument string …\n"],
      ["generate_key", "ActiveSupport::CachingKeyGenerator", "classes/ActiveSupport/CachingKeyGenerator.html#method-i-generate_key", "(*args)", "<p>Returns a derived key suitable for use.\n"],
      ["generate_key", "ActiveSupport::KeyGenerator", "classes/ActiveSupport/KeyGenerator.html#method-i-generate_key", "(salt, key_size = 64)", "<p>Returns a derived key suitable for use.  The default key_size is chosen to\nbe compatible with the default …\n"],
      ["generate_message", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-generate_message", "(attribute, type = :invalid, options = {})", "<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],
      ["generate_method_for_mime", "AbstractController::Collector", "classes/AbstractController/Collector.html#method-c-generate_method_for_mime", "(mime)", ""],
      ["generate_sid", "ActionDispatch::Session::Compatibility", "classes/ActionDispatch/Session/Compatibility.html#method-i-generate_sid", "()", ""],
      ["generate_test_dummy", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-generate_test_dummy", "(force = false)", ""],
      ["generate_unique_secure_token", "ActiveRecord::SecureToken::ClassMethods", "classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-generate_unique_secure_token", "()", ""],
      ["generated_association_methods", "ActiveRecord::Core::ClassMethods", "classes/ActiveRecord/Core/ClassMethods.html#method-i-generated_association_methods", "()", ""],
      ["generated_path", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-generated_path", "(generated_extras)", ""],
      ["generator", "Rails::Engine::Updater", "classes/Rails/Engine/Updater.html#method-c-generator", "()", ""],
      ["generator", "Rails::Generators::Testing::Behaviour", "classes/Rails/Generators/Testing/Behaviour.html#method-i-generator", "(args = default_arguments, options = {}, config = {})", "<p>Instantiate the generator.\n"],
      ["generator_name", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-generator_name", "()", "<p>Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will …\n"],
      ["generators", "Rails::Application", "classes/Rails/Application.html#method-i-generators", "(&blk)", "<p>Sends any generators called in the instance of a new application up to the\n<code>generators</code> method defined …\n"],
      ["generators", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-i-generators", "()", "<p>Holds generators configuration:\n\n<pre><code>config.generators do |g|\n  g.orm             :data_mapper, migration: ...</code></pre>\n"],
      ["generators", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-generators", "(&blk)", ""],
      ["get", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-get", "(action, **args)", "<p>Simulate a GET request with the given parameters.\n<p><code>action</code>: The controller action to call.\n<p><code>params</code>: The hash …\n"],
      ["get", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get", "(path, **args)", "<p>Performs a GET request with the given parameters. See <code>#process</code>\nfor more details.\n"],
      ["get", "ActionDispatch::Routing::Mapper::HttpHelpers", "classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get", "(*args, &block)", "<p>Define a route that only recognizes HTTP GET. For supported arguments, see\nmatch\n\n<pre><code>get &#39;bacon&#39;, to: &#39;food#bacon&#39;\n</code></pre>\n"],
      ["get", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-get", "(key)", ""],
      ["get_header", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-get_header", "(key)", ""],
      ["getgm", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-getgm", "()", ""],
      ["getgm", "DateTime", "classes/DateTime.html#method-i-getgm", "()", ""],
      ["getlocal", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-getlocal", "(utc_offset = nil)", ""],
      ["getlocal", "DateTime", "classes/DateTime.html#method-i-getlocal", "(utc_offset = nil)", ""],
      ["getutc", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-getutc", "()", ""],
      ["getutc", "DateTime", "classes/DateTime.html#method-i-getutc", "()", ""],
      ["gigabyte", "Numeric", "classes/Numeric.html#method-i-gigabyte", "()", ""],
      ["gigabytes", "Numeric", "classes/Numeric.html#method-i-gigabytes", "()", "<p>Returns the number of bytes equivalent to the gigabytes provided.\n\n<pre><code>2.gigabytes # =&gt; 2_147_483_648\n</code></pre>\n"],
      ["git", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-git", "(commands = {})", "<p>Run a command in git.\n\n<pre><code>git :init\ngit add: &quot;this.file that.rb&quot;\ngit add: &quot;onefile.rb&quot;, rm: &quot;badfile.cxx&quot;\n</code></pre>\n"],
      ["github", "Rails::Generators::AppBase::GemfileEntry", "classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-github", "(name, github, branch = nil, comment = nil)", ""],
      ["gitignore", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-gitignore", "()", ""],
      ["gitignore", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-gitignore", "()", ""],
      ["gmt?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-gmt-3F", "()", ""],
      ["gmt_offset", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-gmt_offset", "()", ""],
      ["gmtime", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-gmtime", "()", ""],
      ["gmtime", "DateTime", "classes/DateTime.html#method-i-gmtime", "()", ""],
      ["gmtoff", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-gmtoff", "()", ""],
      ["grapheme_length", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-grapheme_length", "()", "<p>Returns the number of grapheme clusters in the string.\n\n<pre><code>&#39;क्षि&#39;.mb_chars.length   # =&gt; 4\n&#39;क्षि&#39;.mb_chars.grapheme_length ...</code></pre>\n"],
      ["group", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-group", "(*args)", "<p>Allows to specify a group attribute:\n\n<pre><code>User.group(:name)\n# SELECT &quot;users&quot;.* FROM &quot;users&quot; GROUP BY name\n</code></pre>\n<p>Returns …\n"],
      ["grouped_collection_select", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select", "(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})", "<p>Wraps ActionView::Helpers::FormOptionsHelper#grouped_collection_select for\nform builders:\n\n<pre><code>&lt;%= form_for ...</code></pre>\n"],
      ["grouped_collection_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select", "(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})", "<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],
      ["grouped_options_for_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select", "(grouped_options, selected_key = nil, options = {})", "<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],
      ["groups", "Rails", "classes/Rails.html#method-c-groups", "(*groups)", "<p>Returns all Rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS …\n"],
      ["h", "ERB::Util", "classes/ERB/Util.html#method-c-h", "(s)", ""],
      ["ha1", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-ha1", "(credentials, password)", ""],
      ["halted_callback", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-halted_callback", "(event)", ""],
      ["handle_unverified_request", "ActionController::RequestForgeryProtection", "classes/ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request", "()", ""],
      ["handle_unverified_request", "ActionController::RequestForgeryProtection::ProtectionMethods::Exception", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-i-handle_unverified_request", "()", ""],
      ["handle_unverified_request", "ActionController::RequestForgeryProtection::ProtectionMethods::NullSession", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-i-handle_unverified_request", "()", "<p>This is the method that defines the application behavior when a request is\nfound to be unverified.\n"],
      ["handle_unverified_request", "ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-i-handle_unverified_request", "()", ""],
      ["handles_encoding?", "ActionView::Template::Handlers::ERB", "classes/ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F", "()", ""],
      ["has_and_belongs_to_many", "ActiveRecord::Associations::ClassMethods", "classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many", "(name, scope = nil, **options, &extension)", "<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],
      ["has_attribute?", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F", "(attr_name)", "<p>Returns <code>true</code> if the given attribute is in the attributes hash,\notherwise <code>false</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["has_attribute?", "ActiveRecord::AttributeMethods::ClassMethods", "classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-has_attribute-3F", "(attr_name)", "<p>Returns true if the given attribute exists, otherwise false.\n\n<pre><code>class Person &lt; ActiveRecord::Base\nend\n\nPerson.has_attribute?(&#39;name&#39;) ...</code></pre>\n"],
      ["has_basic_credentials?", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-has_basic_credentials-3F", "(request)", ""],
      ["has_header?", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-has_header-3F", "(key)", ""],
      ["has_key?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-has_key-3F", "", "<p>Returns true if the given key is present in the parameters.\n"],
      ["has_key?", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-has_key-3F", "(attribute)", ""],
      ["has_key?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F", "(key)", ""],
      ["has_key?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F", "(key)", ""],
      ["has_many", "ActiveRecord::Associations::ClassMethods", "classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many", "(name, scope = nil, options = {}, &extension)", "<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],
      ["has_named_route?", "ActionDispatch::Routing::Mapper::Base", "classes/ActionDispatch/Routing/Mapper/Base.html#method-i-has_named_route-3F", "(name)", "<p>Query if the following named route was already defined.\n"],
      ["has_one", "ActiveRecord::Associations::ClassMethods", "classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one", "(name, scope = nil, options = {})", "<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],
      ["has_secure_password", "ActiveModel::SecurePassword::ClassMethods", "classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password", "(options = {})", "<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],
      ["has_secure_token", "ActiveRecord::SecureToken::ClassMethods", "classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token", "(attribute = :token)", "<p>Example using #has_secure_token\n\n<pre><code># Schema: User(token:string, auth_token:string)\nclass User &lt; ActiveRecord::Base ...</code></pre>\n"],
      ["has_value?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-has_value-3F", "", "<p>Returns true if the given value is present for some key in the parameters.\n"],
      ["hash", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-hash", "()", ""],
      ["hash", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-hash", "()", ""],
      ["hash", "ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-hash", "()", ""],
      ["hash", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-hash", "()", "<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre><code>[ Person.find(1), ...</code></pre>\n"],
      ["hash", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-hash", "()", ""],
      ["hash", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-hash", "()", ""],
      ["having", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-having", "(opts, *rest)", "<p>Allows to specify a HAVING clause. Note that you can&#39;t use HAVING\nwithout also specifying a GROUP …\n"],
      ["head", "ActionController::Head", "classes/ActionController/Head.html#method-i-head", "(status, options = {})", "<p>Returns a response that has no content (merely headers). The options\nargument is interpreted to be a …\n"],
      ["head", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-head", "(action, **args)", "<p>Simulate a HEAD request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],
      ["head", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-head", "(path, *args)", "<p>Performs a HEAD request with the given parameters. See\n<code>#process</code> for more details.\n"],
      ["header", "ActionDispatch::Routing::ConsoleFormatter", "classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-header", "(routes)", ""],
      ["header", "ActionDispatch::Routing::HtmlTableFormatter", "classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-header", "(routes)", "<p>the header is part of the HTML page, so we don&#39;t construct it here.\n"],
      ["headers", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-headers", "()", "<p>Provides access to the request&#39;s HTTP headers, for example:\n\n<pre><code>request.headers[&quot;Content-Type&quot;] # =&gt; &quot;text/plain&quot;\n</code></pre>\n"],
      ["headers", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-i-headers", "(args = nil)", "<p>Allows you to pass random and unusual headers to the new\n<code>Mail::Message</code> object which will add them to …\n"],
      ["help", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-i-help", "()", ""],
      ["help", "Rails::Generators", "classes/Rails/Generators.html#method-c-help", "(command = \"generate\")", "<p>Show help message with available generators.\n"],
      ["helper", "AbstractController::Helpers::ClassMethods", "classes/AbstractController/Helpers/ClassMethods.html#method-i-helper", "(*args, &block)", "<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p>Options\n<p><code>*args</code> - Module …\n"],
      ["helper", "Rails::ConsoleMethods", "classes/Rails/ConsoleMethods.html#method-i-helper", "()", "<p>Gets the helper methods available to the controller.\n<p>This method assumes an <code>ApplicationController</code> exists, …\n"],
      ["helper_attr", "ActionController::Helpers::ClassMethods", "classes/ActionController/Helpers/ClassMethods.html#method-i-helper_attr", "(*attrs)", "<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],
      ["helper_class", "ActionView::TestCase::Behavior::ClassMethods", "classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class", "()", ""],
      ["helper_method", "AbstractController::Helpers::ClassMethods", "classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method", "(*meths)", "<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> and <code>logged_in?</code> …\n"],
      ["helper_method", "ActionView::TestCase::Behavior::ClassMethods", "classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method", "(*methods)", ""],
      ["helpers", "ActionController::Helpers", "classes/ActionController/Helpers.html#method-i-helpers", "()", "<p>Provides a proxy to access helper methods from outside the view.\n"],
      ["helpers", "ActionController::Helpers::ClassMethods", "classes/ActionController/Helpers/ClassMethods.html#method-i-helpers", "()", "<p>Provides a proxy to access helper methods from outside the view.\n"],
      ["helpers", "Rails::Engine", "classes/Rails/Engine.html#method-i-helpers", "()", "<p>Returns a module with all the helpers defined for the engine.\n"],
      ["helpers_paths", "Rails::Engine", "classes/Rails/Engine.html#method-i-helpers_paths", "()", "<p>Returns all registered helpers paths.\n"],
      ["hex?", "ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-hex-3F", "()", ""],
      ["hidden_field", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-hidden_field", "(method, options = {})", "<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],
      ["hidden_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field", "(object_name, method, options = {})", "<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],
      ["hidden_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag", "(name, value = nil, options = {})", "<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP&#39;s statelessness …\n"],
      ["hidden_namespaces", "Rails::Generators", "classes/Rails/Generators.html#method-c-hidden_namespaces", "()", "<p>Returns an array of generator namespaces that are hidden. Generator\nnamespaces may be hidden for a variety …\n"],
      ["hide!", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-hide-21", "()", "<p>Convenience method to hide this generator from the available ones when\nrunning rails generator command. …\n"],
      ["hide_command!", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-hide_command-21", "()", "<p>Convenience method to hide this command from the available ones when\nrunning rails command.\n"],
      ["hide_namespace", "Rails::Generators", "classes/Rails/Generators.html#method-c-hide_namespace", "(*namespaces)", ""],
      ["hide_namespaces", "Rails::Generators", "classes/Rails/Generators.html#method-c-hide_namespaces", "(*namespaces)", ""],
      ["highlight", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-highlight", "(text, phrases, options = {})", "<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],
      ["hook_for", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-hook_for", "(*names, &block)", "<p>Invoke a generator based on the value supplied by the user to the given\noption named “name”. …\n"],
      ["host", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-host", "()", "<p>Returns the host for this request, such as “example.com”.\n\n<pre><code>req = ActionDispatch::Request.new ...</code></pre>\n"],
      ["host", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-host", "()", "<p>The hostname used in the last request.\n"],
      ["host=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-host-3D", "(host)", ""],
      ["host_with_port", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-host_with_port", "()", "<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],
      ["hour", "Numeric", "classes/Numeric.html#method-i-hour", "()", ""],
      ["hours", "Numeric", "classes/Numeric.html#method-i-hours", "()", "<p>Returns a Duration instance matching the number of hours provided.\n\n<pre><code>2.hours # =&gt; 2 hours\n</code></pre>\n"],
      ["hstore", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-hstore", "(*args, **options)", ""],
      ["html?", "Mime::AllType", "classes/Mime/AllType.html#method-i-html-3F", "()", ""],
      ["html?", "Mime::Type", "classes/Mime/Type.html#method-i-html-3F", "()", ""],
      ["html_document", "ActionDispatch::Assertions", "classes/ActionDispatch/Assertions.html#method-i-html_document", "()", ""],
      ["html_escape", "ERB::Util", "classes/ERB/Util.html#method-c-html_escape", "(s)", "<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],
      ["html_escape_once", "ERB::Util", "classes/ERB/Util.html#method-c-html_escape_once", "(s)", "<p>A utility method for escaping HTML without affecting existing escaped\nentities.\n\n<pre><code>html_escape_once(&#39;1 &lt; ...</code></pre>\n"],
      ["html_safe", "String", "classes/String.html#method-i-html_safe", "()", "<p>Marks a string as trusted safe. It will be inserted into HTML with no\nadditional escaping performed. …\n"],
      ["html_safe?", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-html_safe-3F", "()", ""],
      ["html_safe?", "Numeric", "classes/Numeric.html#method-i-html_safe-3F", "()", ""],
      ["html_safe?", "Object", "classes/Object.html#method-i-html_safe-3F", "()", ""],
      ["http_auth_salt", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-http_auth_salt", "()", ""],
      ["http_basic_authenticate_with", "ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods", "classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with", "(options = {})", ""],
      ["http_cache_forever", "ActionController::ConditionalGet", "classes/ActionController/ConditionalGet.html#method-i-http_cache_forever", "(public: false)", "<p>Cache or yield the block. The cache is supposed to never expire.\n<p>You can use this method when you have …\n"],
      ["httpdate", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-httpdate", "()", "<p>Returns a string of the object&#39;s date and time in the format used by\nHTTP requests.\n\n<pre><code>Time.zone.now.httpdate ...</code></pre>\n"],
      ["https!", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-https-21", "(flag = true)", "<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre><code>session.https!\nsession.https!(false)\n</code></pre>\n"],
      ["https?", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-https-3F", "()", "<p>Returns <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre><code>if session.https?\n  ...\nend</code></pre>\n"],
      ["human", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-human", "(options = {})", "<p>Transform the model name into a more human format, using I18n. By default,\nit will underscore then humanize …\n"],
      ["human", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-human", "(rule, replacement)", "<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],
      ["human_attribute_name", "ActiveModel::Translation", "classes/ActiveModel/Translation.html#method-i-human_attribute_name", "(attribute, options = {})", "<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “first_name”. …\n"],
      ["human_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-human_name", "()", ""],
      ["humanize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-humanize", "(lower_case_and_underscored_word, options = {})", "<p>Tweaks an attribute name for display to end users.\n<p>Specifically, performs these transformations:\n<p>Applies …\n"],
      ["humanize", "String", "classes/String.html#method-i-humanize", "(options = {})", "<p>Capitalizes the first word, turns underscores into spaces, and strips a\ntrailing &#39;_id&#39; if present. …\n"],
      ["i18n_scope", "ActiveModel::Translation", "classes/ActiveModel/Translation.html#method-i-i18n_scope", "()", "<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],
      ["i18n_scope", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-i18n_scope", "()", ""],
      ["id", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id", "()", "<p>Returns the primary key value.\n"],
      ["id=", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D", "(value)", "<p>Sets the primary key value.\n"],
      ["id?", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F", "()", "<p>Queries the primary key value.\n"],
      ["id_before_type_cast", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast", "()", "<p>Returns the primary key value before type cast.\n"],
      ["id_in_database", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_in_database", "()", ""],
      ["id_was", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_was", "()", "<p>Returns the primary key previous value.\n"],
      ["identified_by", "ActionCable::Connection::Identification", "classes/ActionCable/Connection/Identification.html#method-i-identified_by", "(*identifiers)", "<p>Mark a key as being a connection identifier index that can then be used to\nfind the specific connection …\n"],
      ["identifiers", "ActionCable::RemoteConnections::RemoteConnection", "classes/ActionCable/RemoteConnections/RemoteConnection.html#method-i-identifiers", "()", "<p>Returns all the identifiers that were applied to this connection.\n"],
      ["identify", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-identify", "(label, column_type = :integer)", "<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Integer identifiers are values less …\n"],
      ["ids", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-ids", "()", "<p>Pluck all the ID&#39;s for the relation using the table&#39;s primary key\n\n<pre><code>Person.ids # SELECT people.id ...\n</code></pre>\n"],
      ["if_modified_since", "ActionDispatch::Http::Cache::Request", "classes/ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since", "()", ""],
      ["if_modified_since=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-if_modified_since-3D", "(last_modified)", ""],
      ["if_none_match", "ActionDispatch::Http::Cache::Request", "classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match", "()", ""],
      ["if_none_match=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-if_none_match-3D", "(etag)", ""],
      ["if_none_match_etags", "ActionDispatch::Http::Cache::Request", "classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match_etags", "()", ""],
      ["ignore_key_file", "Rails::Generators::EncryptedSecretsGenerator", "classes/Rails/Generators/EncryptedSecretsGenerator.html#method-i-ignore_key_file", "()", ""],
      ["ignored_columns", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-ignored_columns", "", "<p>The list of columns names the model should ignore. Ignored columns\nwon&#39;t have attribute accessors …\n"],
      ["ignored_columns=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-ignored_columns-3D", "", "<p>Sets the columns names the model should ignore. Ignored columns won&#39;t\nhave attribute accessors defined, …\n"],
      ["image_alt", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_alt", "(src)", "<p>Returns a string suitable for an HTML image tag alt attribute. The\n<code>src</code> argument is meant to be an image …\n"],
      ["image_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_path", "(source, options = {})", "<p>Computes the path to an image asset. Full paths from the document root will\nbe passed through. Used internally …\n"],
      ["image_submit_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag", "(source, options = {})", "<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image …\n"],
      ["image_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag", "(source, options = {})", "<p>Returns an HTML image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file.\n<p>Options\n<p>You can add …\n"],
      ["image_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_url", "(source, options = {})", "<p>Computes the full URL to an image asset. This will use\n<code>image_path</code> internally, so most of their behaviors …\n"],
      ["in", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-in", "(other)", ""],
      ["in", "Date", "classes/Date.html#method-i-in", "(seconds)", ""],
      ["in", "DateTime", "classes/DateTime.html#method-i-in", "(seconds)", ""],
      ["in", "Time", "classes/Time.html#method-i-in", "(seconds)", ""],
      ["in?", "Object", "classes/Object.html#method-i-in-3F", "(another_object)", "<p>Returns true if this object is included in the argument. Argument must be\nany object which responds to …\n"],
      ["in_batches", "ActiveRecord::Batches", "classes/ActiveRecord/Batches.html#method-i-in_batches", "(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil)", "<p>Yields ActiveRecord::Relation objects to work with a batch of records.\n\n<pre><code>Person.where(&quot;age &gt; 21&quot;).in_batches ...</code></pre>\n"],
      ["in_char_class?", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F", "(codepoint, classes)", "<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it&#39;s in the specified …\n"],
      ["in_clause_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length", "()", "<p>Returns the maximum number of elements in an IN (x,y,z) clause.\n<code>nil</code> means no limit.\n"],
      ["in_groups", "Array", "classes/Array.html#method-i-in_groups", "(number, fill_with = nil)", "<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],
      ["in_groups_of", "Array", "classes/Array.html#method-i-in_groups_of", "(number, fill_with = nil)", "<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],
      ["in_milliseconds", "Numeric", "classes/Numeric.html#method-i-in_milliseconds", "()", "<p>Returns the number of milliseconds equivalent to the seconds provided. Used\nwith the standard time durations, …\n"],
      ["in_time_zone", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-in_time_zone", "(new_zone = ::Time.zone)", "<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],
      ["in_time_zone", "DateAndTime::Zones", "classes/DateAndTime/Zones.html#method-i-in_time_zone", "(zone = ::Time.zone)", "<p>Returns the simultaneous time in <code>Time.zone</code> if a zone is given\nor if Time.zone_default is set. Otherwise …\n"],
      ["in_time_zone", "String", "classes/String.html#method-i-in_time_zone", "(zone = ::Time.zone)", "<p>Converts String to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],
      ["include?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-include-3F", "", "<p>Returns true if the given key is present in the parameters.\n"],
      ["include?", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-include-3F", "(key)", ""],
      ["include?", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-include-3F", "(attribute)", "<p>Returns <code>true</code> if the error messages include an error for the\ngiven key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre><code>person.errors.messages ...</code></pre>\n"],
      ["include?", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F", "(record)", "<p>Returns <code>true</code> if the given <code>record</code> is present in\nthe collection.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many ...</code></pre>\n"],
      ["include?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F", "(key)", ""],
      ["include?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F", "(key)", ""],
      ["included", "ActiveSupport::Concern", "classes/ActiveSupport/Concern.html#method-i-included", "(base = nil, &block)", ""],
      ["included", "ActiveSupport::Deprecation::DeprecatedConstantAccessor", "classes/ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-c-included", "(base)", ""],
      ["includes", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-includes", "(*args)", "<p>Specify relationships to be included in the result set. For example:\n\n<pre><code>users = User.includes(:address)\nusers.each ...</code></pre>\n"],
      ["increment", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-increment", "(attribute, by = 1)", "<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],
      ["increment", "ActiveSupport::Cache::FileStore", "classes/ActiveSupport/Cache/FileStore.html#method-i-increment", "(name, amount = 1, options = nil)", "<p>Increments an already existing integer value that is stored in the cache.\nIf the key is not found nothing …\n"],
      ["increment", "ActiveSupport::Cache::MemCacheStore", "classes/ActiveSupport/Cache/MemCacheStore.html#method-i-increment", "(name, amount = 1, options = nil)", "<p>Increment a cached value. This method uses the memcached incr atomic\noperator and can only be used on …\n"],
      ["increment", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-increment", "(name, amount = 1, options = nil)", "<p>Increment an integer value in the cache.\n"],
      ["increment", "ActiveSupport::Cache::NullStore", "classes/ActiveSupport/Cache/NullStore.html#method-i-increment", "(name, amount = 1, options = nil)", ""],
      ["increment", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-increment", "(name, amount = 1, options = nil)", "<p>Increments an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],
      ["increment!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-increment-21", "(attribute, by = 1, touch: nil)", "<p>Wrapper around #increment that writes the update to the database. Only\n<code>attribute</code> is updated; the record …\n"],
      ["increment_counter", "ActiveRecord::CounterCache::ClassMethods", "classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter", "(counter_name, id, touch: nil)", "<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining …\n"],
      ["indent", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-indent", "(content, multiplier = 2)", ""],
      ["indent", "String", "classes/String.html#method-i-indent", "(amount, indent_string = nil, indent_empty_lines = false)", "<p>Indents the lines in the receiver:\n\n<pre><code>&lt;&lt;EOS.indent(2)\ndef some_method\n  some_code\nend\nEOS\n# =&gt;\n  def some_method ...</code></pre>\n"],
      ["indent!", "String", "classes/String.html#method-i-indent-21", "(amount, indent_string = nil, indent_empty_lines = false)", "<p>Same as <code>indent</code>, except it indents the receiver in-place.\n<p>Returns the indented string, or <code>nil</code> if there …\n"],
      ["index", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index", "(column_name, options = {})", "<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n\n<pre><code>t.index(:name) ...</code></pre>\n"],
      ["index", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index", "(column_name, options = {})", "<p>Adds index options to the indexes hash, keyed by column name This is\nprimarily used to track indexes …\n"],
      ["index_algorithms", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-index_algorithms", "()", ""],
      ["index_algorithms", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms", "()", "<p>A list of index algorithms, to be filled by adapters that support them.\n"],
      ["index_algorithms", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms", "()", ""],
      ["index_by", "Enumerable", "classes/Enumerable.html#method-i-index_by", "()", "<p>Convert an enumerable to a hash.\n\n<pre><code>people.index_by(&amp;:login)\n# =&gt; { &quot;nextangle&quot; =&gt; &lt;Person ...&gt;, &quot;chade-&quot; ...\n</code></pre>\n"],
      ["index_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F", "(table_name, column_name, options = {})", "<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre><code># Check an index exists\nindex_exists?(:suppliers, ...</code></pre>\n"],
      ["index_exists?", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F", "(column_name, options = {})", "<p>Checks to see if an index exists.\n\n<pre><code>unless t.index_exists?(:branch_id)\n  t.index(:branch_id)\nend\n</code></pre>\n<p>See connection.index_exists? …\n"],
      ["index_helper", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-index_helper", "()", ""],
      ["index_name_exists?", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-index_name_exists-3F", "(table_name, index_name, default = nil)", "<p>Verifies existence of an index with a given name.\n"],
      ["index_name_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F", "(table_name, index_name, default = nil)", "<p>Verifies the existence of an index with a given name.\n"],
      ["index_name_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length", "()", "<p>Returns the maximum length of an index name.\n"],
      ["index_name_length", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_name_length", "()", ""],
      ["indexes", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-indexes", "(table_name, name = nil)", "<p>Returns an array of indexes for the given table.\n"],
      ["indexes_per_table", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table", "()", "<p>Returns the maximum number of indexes per table.\n"],
      ["inet", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-inet", "(*args, **options)", ""],
      ["inflections", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-inflections", "(locale = :en)", "<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],
      ["inheritable_copy", "ActiveSupport::InheritableOptions", "classes/ActiveSupport/InheritableOptions.html#method-i-inheritable_copy", "()", ""],
      ["inheritance_column", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column", "()", "<p>Defines the name of the table column which will store the class name on\nsingle-table inheritance situations. …\n"],
      ["inheritance_column=", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D", "(value)", "<p>Sets the value of inheritance_column\n"],
      ["inherited", "AbstractController::Helpers::ClassMethods", "classes/AbstractController/Helpers/ClassMethods.html#method-i-inherited", "(klass)", "<p>When a class is inherited, wrap its helper module in a new module. This\nensures that the parent class&#39;s …\n"],
      ["inherited", "ActionController::ParamsWrapper::ClassMethods", "classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-inherited", "(klass)", "<p>Sets the default wrapper key or model which will be used to determine\nwrapper key and attribute names. …\n"],
      ["inherited", "ActionController::Railties::Helpers", "classes/ActionController/Railties/Helpers.html#method-i-inherited", "(klass)", ""],
      ["inherited", "ActionController::Rendering::ClassMethods", "classes/ActionController/Rendering/ClassMethods.html#method-i-inherited", "(klass)", ""],
      ["inherited", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-inherited", "(subclass)", ""],
      ["inherited", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-i-inherited", "(base)", ""],
      ["inherited", "Rails::Application", "classes/Rails/Application.html#method-c-inherited", "(base)", ""],
      ["inherited", "Rails::Engine", "classes/Rails/Engine.html#method-c-inherited", "(base)", ""],
      ["inherited", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-inherited", "(base)", ""],
      ["inherited", "Rails::Railtie::Configurable::ClassMethods", "classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited", "(base)", ""],
      ["init_with", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-init_with", "(coder)", ""],
      ["init_with", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-init_with", "(coder)", "<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> should be the result of previously encoding an Active …\n"],
      ["initialize_copy", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-initialize_copy", "(other)", ""],
      ["initialize_copy", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-initialize_copy", "(other)", ""],
      ["initialize_copy", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-initialize_copy", "(other)", ""],
      ["initialize_copy", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-initialize_copy", "(other)", ""],
      ["initialize_copy", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-initialize_copy", "(other)", ""],
      ["initialize_dup", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-initialize_dup", "(other)", ""],
      ["initialize_dup", "ActiveRecord::Inheritance", "classes/ActiveRecord/Inheritance.html#method-i-initialize_dup", "(other)", ""],
      ["initialize_load_schema_monitor", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-initialize_load_schema_monitor", "()", ""],
      ["initialize_sid", "ActionDispatch::Session::Compatibility", "classes/ActionDispatch/Session/Compatibility.html#method-i-initialize_sid", "()", ""],
      ["initialized?", "Rails::Application", "classes/Rails/Application.html#method-i-initialized-3F", "()", "<p>Returns true if the application is initialized.\n"],
      ["initializer", "Rails::Application", "classes/Rails/Application.html#method-i-initializer", "(name, opts = {}, &block)", "<p>Sends the initializers to the <code>initializer</code> method defined in\nthe Rails::Initializable module. Each Rails::Application …\n"],
      ["initializer", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-initializer", "(filename, data = nil, &block)", "<p>Create a new initializer with the provided code (either in a block or a\nstring).\n\n<pre><code>initializer(&quot;globals.rb&quot;) ...</code></pre>\n"],
      ["initializer", "Rails::Initializable::ClassMethods", "classes/Rails/Initializable/ClassMethods.html#method-i-initializer", "(name, opts = {}, &blk)", ""],
      ["initializers", "Rails::Initializable", "classes/Rails/Initializable.html#method-i-initializers", "()", ""],
      ["initializers", "Rails::Initializable::ClassMethods", "classes/Rails/Initializable/ClassMethods.html#method-i-initializers", "()", ""],
      ["initializers_chain", "Rails::Initializable::ClassMethods", "classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain", "()", ""],
      ["initializers_for", "Rails::Initializable::ClassMethods", "classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for", "(binding)", ""],
      ["inline", "ActionMailer::Base::LateAttachmentsProxy", "classes/ActionMailer/Base/LateAttachmentsProxy.html#method-i-inline", "()", ""],
      ["inquiry", "Array", "classes/Array.html#method-i-inquiry", "()", "<p>Wraps the array in an <code>ArrayInquirer</code> object, which gives a\nfriendlier way to check its string-like contents. …\n"],
      ["inquiry", "String", "classes/String.html#method-i-inquiry", "()", "<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code>\nclass, which gives you a prettier way to …\n"],
      ["insert", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-insert", "(index, klass, *args, &block)", ""],
      ["insert", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert", "(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])", "<p>Executes an INSERT query and returns the new record&#39;s ID\n<p><code>id_value</code> will be returned unless the value …\n"],
      ["insert", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert", "(*args, &block)", ""],
      ["insert_after", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-insert_after", "(index, *args, &block)", ""],
      ["insert_after", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_after", "(*args, &block)", ""],
      ["insert_before", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-insert_before", "(index, klass, *args, &block)", ""],
      ["insert_before", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_before", "(*args, &block)", ""],
      ["inside_template", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-inside_template", "()", ""],
      ["inside_template?", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-inside_template-3F", "()", ""],
      ["inspect", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-inspect", "()", ""],
      ["inspect", "ActionDispatch::MiddlewareStack::Middleware", "classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect", "()", ""],
      ["inspect", "ActionDispatch::Routing::PathRedirect", "classes/ActionDispatch/Routing/PathRedirect.html#method-i-inspect", "()", ""],
      ["inspect", "ActionView::Template", "classes/ActionView/Template.html#method-i-inspect", "()", ""],
      ["inspect", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-inspect", "()", "<p>Returns the contents of the record as a nicely formatted string.\n"],
      ["inspect", "ActiveRecord::Core::ClassMethods", "classes/ActiveRecord/Core/ClassMethods.html#method-i-inspect", "()", "<p>Returns a string like &#39;Post(id:integer, title:string, body:text)&#39;\n"],
      ["inspect", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-inspect", "()", ""],
      ["inspect", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-inspect", "()", "<p>Returns a string of the object&#39;s date, time, zone, and offset from UTC.\n\n<pre><code>Time.zone.now.inspect # =&gt; ...\n</code></pre>\n"],
      ["inspect", "Date", "classes/Date.html#method-i-inspect", "()", ""],
      ["inspect", "DateTime", "classes/DateTime.html#method-i-inspect", "()", ""],
      ["inspect", "Rails::Info", "classes/Rails/Info.html#method-c-inspect", "()", ""],
      ["install_executor_hooks", "ActiveRecord::QueryCache", "classes/ActiveRecord/QueryCache.html#method-c-install_executor_hooks", "(executor = ActiveSupport::Executor)", ""],
      ["instance", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-c-instance", "(locale = :en)", ""],
      ["instance", "ActiveSupport::PerThreadRegistry", "classes/ActiveSupport/PerThreadRegistry.html#method-i-instance", "()", ""],
      ["instance", "Rails::Application", "classes/Rails/Application.html#method-c-instance", "()", ""],
      ["instance", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-instance", "()", "<p>Since Rails::Railtie cannot be instantiated, any methods that call\n<code>instance</code> are intended to be called …\n"],
      ["instance", "Rails::Railtie::Configurable::ClassMethods", "classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-instance", "()", ""],
      ["instance_method_already_implemented?", "ActiveRecord::AttributeMethods::ClassMethods", "classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F", "(method_name)", "<p>Raises an ActiveRecord::DangerousAttributeError exception when an Active\nRecord method is defined in …\n"],
      ["instance_method_already_implemented?", "ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods", "classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-instance_method_already_implemented-3F", "(method_name)", ""],
      ["instance_values", "Object", "classes/Object.html#method-i-instance_values", "()", "<p>Returns a hash with string keys that maps instance variable names without\n“@” to their corresponding …\n"],
      ["instance_variable_names", "Object", "classes/Object.html#method-i-instance_variable_names", "()", "<p>Returns an array of instance variable names as strings including “@”.\n\n<pre><code>class C\n  def initialize(x, ...</code></pre>\n"],
      ["instantiate", "ActiveRecord::Persistence::ClassMethods", "classes/ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate", "(attributes, column_types = {}, &block)", "<p>Given an attributes hash, <code>instantiate</code> returns a new instance\nof the appropriate class. Accepts only keys …\n"],
      ["instantiate_all_loaded_fixtures", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures", "(object, load_instances = true)", ""],
      ["instantiate_fixtures", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures", "(object, fixture_set, load_instances = true)", ""],
      ["instrument", "ActionView::Template", "classes/ActionView/Template.html#method-i-instrument", "(action, &block)", ""],
      ["instrument", "ActiveSupport::Notifications", "classes/ActiveSupport/Notifications.html#method-c-instrument", "(name, payload = {})", ""],
      ["instrument", "ActiveSupport::Notifications::Instrumenter", "classes/ActiveSupport/Notifications/Instrumenter.html#method-i-instrument", "(name, payload = {})", "<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],
      ["instrumenter", "ActiveSupport::Notifications", "classes/ActiveSupport/Notifications.html#method-c-instrumenter", "()", ""],
      ["int4range", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int4range", "(*args, **options)", ""],
      ["int8range", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int8range", "(*args, **options)", ""],
      ["integration_session", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-integration_session", "()", ""],
      ["internal?", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-internal-3F", "()", ""],
      ["internal_metadata_table_name", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-internal_metadata_table_name", "", "<p>The name of the internal metadata table. By default, the value is\n<code>&quot;ar_internal_metadata&quot;</code>.\n"],
      ["internal_metadata_table_name=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-internal_metadata_table_name-3D", "", "<p>Sets the name of the internal metadata table.\n"],
      ["internal_methods", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-internal_methods", "()", "<p>A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, …\n"],
      ["interval", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-interval", "(*args, **options)", ""],
      ["invalid?", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-invalid-3F", "(context = nil)", "<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if\nerrors were added, <code>false</code> otherwise.\n\n<pre><code>class Person\n  include ...</code></pre>\n"],
      ["inverse_of", "ActiveRecord::Migration::CommandRecorder", "classes/ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of", "(command, args, &block)", "<p>Returns the inverse of the given command. For example:\n\n<pre><code>recorder.inverse_of(:rename_table, [:old, :new]) ...</code></pre>\n"],
      ["invoke", "Rails::Command", "classes/Rails/Command.html#method-c-invoke", "(full_namespace, args = [], **config)", "<p>Receives a namespace, arguments and the behavior to invoke the command.\n"],
      ["invoke", "Rails::Generators", "classes/Rails/Generators.html#method-c-invoke", "(namespace, args = ARGV, config = {})", "<p>Receives a namespace, arguments and the behavior to invoke the generator.\nIt&#39;s used as the default …\n"],
      ["invoke_callback", "ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap", "classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-i-invoke_callback", "(*)", ""],
      ["invoke_callback", "ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-invoke_callback", "(*)", ""],
      ["invoke_callback", "ActionCable::SubscriptionAdapter::Redis::Listener", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-invoke_callback", "(*)", ""],
      ["invoke_callback", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-invoke_callback", "(callback, message)", ""],
      ["ip", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-ip", "()", "<p>Returns the IP address of client as a <code>String</code>.\n"],
      ["ips_from", "ActionDispatch::RemoteIp::GetIp", "classes/ActionDispatch/RemoteIp/GetIp.html#method-i-ips_from", "(header)", ""],
      ["irregular", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-irregular", "(singular, plural)", "<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],
      ["is_a?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-is_a-3F", "(klass)", "<p>Say we&#39;re a Time to thwart type checking.\n"],
      ["is_missing?", "LoadError", "classes/LoadError.html#method-i-is_missing-3F", "(location)", "<p>Returns true if the given path name (except perhaps for the “.rb”\nextension) is the missing …\n"],
      ["is_utc?", "ActiveRecord::Type::Internal::Timezone", "classes/ActiveRecord/Type/Internal/Timezone.html#method-i-is_utc-3F", "()", ""],
      ["is_utf8?", "String", "classes/String.html#method-i-is_utf8-3F", "()", "<p>Returns <code>true</code> if string has utf_8 encoding.\n\n<pre><code>utf_8_str = &quot;some string&quot;.encode &quot;UTF-8&quot;\niso_str = &quot;some string&quot;.encode ...</code></pre>\n"],
      ["isdst", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-isdst", "()", ""],
      ["iso8601", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-iso8601", "(precision: nil)", "<p>Build ISO 8601 Duration string for this duration. The\n<code>precision</code> parameter can be used to limit seconds&#39; …\n"],
      ["iso8601", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-iso8601", "(fraction_digits = 0)", ""],
      ["iso8601", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-iso8601", "(str)", "<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from an ISO 8601 string. …\n"],
      ["isolate_namespace", "Rails::Application", "classes/Rails/Application.html#method-i-isolate_namespace", "(mod)", "<p>Sends the <code>isolate_namespace</code> method up to the class method.\n"],
      ["isolate_namespace", "Rails::Engine", "classes/Rails/Engine.html#method-c-isolate_namespace", "(mod)", ""],
      ["j", "ActionView::Helpers::JavaScriptHelper", "classes/ActionView/Helpers/JavaScriptHelper.html#method-i-j", "(javascript)", ""],
      ["javascript_include_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_include_tag", "(*sources)", "<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. …\n"],
      ["javascript_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_path", "(source, options = {})", "<p>Computes the path to a JavaScript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],
      ["javascript_tag", "ActionView::Helpers::JavaScriptHelper", "classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag", "(content_or_options_with_block = nil, html_options = {}, &block)", "<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre><code>javascript_tag &quot;alert(&#39;All is good&#39;)&quot;\n</code></pre>\n<p>Returns: …\n"],
      ["javascript_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_url", "(source, options = {})", "<p>Computes the full URL to a JavaScript asset in the public javascripts\ndirectory. This will use <code>javascript_path</code> …\n"],
      ["javascripts", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-javascripts", "()", ""],
      ["job_or_instantiate", "ActiveJob::Enqueuing::ClassMethods", "classes/ActiveJob/Enqueuing/ClassMethods.html#method-i-job_or_instantiate", "(*args)", ""],
      ["joined_includes_values", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-joined_includes_values", "()", "<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],
      ["joins", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-joins", "(*args)", "<p>Performs a joins on <code>args</code>. The given symbol(s) should match the\nname of the association(s).\n\n<pre><code>User.joins(:posts) ...</code></pre>\n"],
      ["joins_per_query", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query", "()", "<p>Returns maximum number of joins in a single query.\n"],
      ["js_template", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-js_template", "(source, destination)", ""],
      ["json", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-json", "(*args, **options)", ""],
      ["json", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-json", "(*args, **options)", ""],
      ["json_escape", "ERB::Util", "classes/ERB/Util.html#method-c-json_escape", "(s)", "<p>A utility method for escaping HTML entities in JSON strings. Specifically,\nthe &amp;, &gt; and &lt; characters …\n"],
      ["jsonb", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-jsonb", "(*args, **options)", ""],
      ["keep", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-keep", "(k = nil)", "<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre><code>flash.keep ...</code></pre>\n"],
      ["keep_if", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-keep_if", "(&block)", ""],
      ["key?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-key-3F", "", "<p>Returns true if the given key is present in the parameters.\n"],
      ["key?", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-key-3F", "(name)", ""],
      ["key?", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-key-3F", "(key)", ""],
      ["key?", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-key-3F", "(key)", "<p>Returns true if the request has a header matching the given key parameter.\n\n<pre><code>request.key? :ip_spoofing_check ...</code></pre>\n"],
      ["key?", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-key-3F", "(attribute)", ""],
      ["key?", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F", "(key)", ""],
      ["key?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F", "(key)", "<p>Checks the hash for a key matching the argument passed in:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["key?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F", "(key)", "<p>Checks the hash for a key matching the argument passed in:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["key_generator", "Rails::Application", "classes/Rails/Application.html#method-i-key_generator", "()", "<p>Returns the application&#39;s KeyGenerator\n"],
      ["key_len", "ActiveSupport::MessageEncryptor", "classes/ActiveSupport/MessageEncryptor.html#method-c-key_len", "(cipher = DEFAULT_CIPHER)", "<p>Given a cipher, returns the key length of the cipher to help generate the\nkey of desired size\n"],
      ["key_matcher", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-key_matcher", "(pattern, options)", "<p>Adds the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],
      ["keys", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-keys", "", "<p>Returns a new array of the keys of the parameters.\n"],
      ["keys", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-keys", "()", ""],
      ["keys", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-keys", "()", "<p>Returns all message keys.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],
      ["keys", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-keys", "()", ""],
      ["kilobyte", "Numeric", "classes/Numeric.html#method-i-kilobyte", "()", ""],
      ["kilobytes", "Numeric", "classes/Numeric.html#method-i-kilobytes", "()", "<p>Returns the number of bytes equivalent to the kilobytes provided.\n\n<pre><code>2.kilobytes # =&gt; 2048\n</code></pre>\n"],
      ["kind", "ActiveModel::Validator", "classes/ActiveModel/Validator.html#method-c-kind", "()", "<p>Returns the kind of the validator.\n\n<pre><code>PresenceValidator.kind   # =&gt; :presence\nUniquenessValidator.kind # ...\n</code></pre>\n"],
      ["kind", "ActiveModel::Validator", "classes/ActiveModel/Validator.html#method-i-kind", "()", "<p>Returns the kind for this validator.\n\n<pre><code>PresenceValidator.new.kind   # =&gt; :presence\nUniquenessValidator.new.kind ...</code></pre>\n"],
      ["kind_of?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-kind_of-3F", "(klass)", ""],
      ["klass", "ActiveRecord::Reflection::MacroReflection", "classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass", "()", "<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns the\nMoney class …\n"],
      ["l", "AbstractController::Translation", "classes/AbstractController/Translation.html#method-i-l", "(*args)", ""],
      ["l", "ActionView::Helpers::TranslationHelper", "classes/ActionView/Helpers/TranslationHelper.html#method-i-l", "(*args)", ""],
      ["label", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-label", "(method, text = nil, options = {}, &block)", "<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],
      ["label", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-label", "(object_name, method, content_or_options = nil, options = nil, &block)", "<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],
      ["label_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag", "(name = nil, content_or_options = nil, options = nil, &block)", "<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],
      ["last", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-last", "()", ""],
      ["last", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-last", "(limit = nil)", "<p>Returns the last record, or the last <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],
      ["last", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-last", "(limit = nil)", "<p>Find the last record (or last N records if a parameter is supplied). If no\norder is defined it will order …\n"],
      ["last", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-last", "()", "<p>Returns the last record from the rows collection. If the rows collection is\nempty, returns <code>nil</code>.\n"],
      ["last", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-last", "()", ""],
      ["last", "String", "classes/String.html#method-i-last", "(limit = 1)", "<p>Returns the last character of the string. If a limit is supplied, returns a\nsubstring from the end of …\n"],
      ["last!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-last-21", "()", "<p>Same as #last but raises ActiveRecord::RecordNotFound if no record is\nfound. Note that #last! accepts …\n"],
      ["last?", "ActionView::PartialIteration", "classes/ActionView/PartialIteration.html#method-i-last-3F", "()", "<p>Check if this is the last iteration of the partial.\n"],
      ["last_inserted_id", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-last_inserted_id", "(result)", ""],
      ["last_modified", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified", "()", ""],
      ["last_modified=", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D", "(utc_time)", ""],
      ["last_modified?", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F", "()", ""],
      ["last_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-last_month", "()", ""],
      ["last_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-last_quarter", "()", ""],
      ["last_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-last_week", "(start_day = Date.beginning_of_week, same_time: false)", ""],
      ["last_weekday", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-last_weekday", "()", ""],
      ["last_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-last_year", "()", ""],
      ["layout", "ActionView::Layouts::ClassMethods", "classes/ActionView/Layouts/ClassMethods.html#method-i-layout", "(layout, conditions = {})", "<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template …\n"],
      ["lease", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease", "()", "<p>this method must only be called while holding connection pool&#39;s mutex\n"],
      ["left_joins", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-left_joins", "(*args)", ""],
      ["left_outer_joins", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-left_outer_joins", "(*args)", "<p>Performs a left outer joins on <code>args</code>:\n\n<pre><code>User.left_outer_joins(:posts)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; LEFT ...</code></pre>\n"],
      ["length", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-length", "", "<p>Returns the size of the collection calling <code>size</code> on the target.\nIf the collection has been already loaded, …\n"],
      ["length", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-length", "()", "<p>Returns the number of elements in the rows array.\n"],
      ["lib", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-lib", "()", ""],
      ["lib", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-lib", "(filename, data = nil, &block)", "<p>Create a new file in the lib/ directory. Code can be specified in a block\nor a data string can be given. …\n"],
      ["lib", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-lib", "()", ""],
      ["license", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-license", "()", ""],
      ["limit", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-limit", "(value)", "<p>Specifies a limit for the number of records to retrieve.\n\n<pre><code>User.limit(10) # generated SQL has &#39;LIMIT 10&#39; ...\n</code></pre>\n"],
      ["limit", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-limit", "(limit)", "<p>Limits the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the …\n"],
      ["line", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-line", "(*args, **options)", ""],
      ["link_to", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-link_to", "(name = nil, options = nil, html_options = nil, &block)", "<p>Creates an anchor element of the given <code>name</code> using a URL\ncreated by the set of <code>options</code>. See the valid …\n"],
      ["link_to_if", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if", "(condition, name, options = {}, html_options = {}, &block)", "<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],
      ["link_to_unless", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless", "(condition, name, options = {}, html_options = {}, &block)", "<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],
      ["link_to_unless_current", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current", "(name, options = {}, html_options = {}, &block)", "<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],
      ["listen", "ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-listen", "()", ""],
      ["listen", "ActionCable::SubscriptionAdapter::Redis::Listener", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-listen", "(conn)", ""],
      ["listeners_for", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-listeners_for", "(name)", ""],
      ["listening?", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-listening-3F", "(name)", ""],
      ["load", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-load", "(&block)", "<p>Causes the records to be loaded from the database if they have not been\nloaded already. You can use this …\n"],
      ["load", "ActiveSupport::Multibyte::Unicode::UnicodeDatabase", "classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load", "()", "<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],
      ["load_config_initializer", "Rails::Engine", "classes/Rails/Engine.html#method-i-load_config_initializer", "(initializer)", ""],
      ["load_console", "Rails::Engine", "classes/Rails/Engine.html#method-i-load_console", "(app = self)", "<p>Load console and invoke the registered hooks. Check\n<code>Rails::Railtie.console</code> for more info.\n"],
      ["load_defaults", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-load_defaults", "(target_version)", ""],
      ["load_generators", "Rails::Command::Actions", "classes/Rails/Command/Actions.html#method-i-load_generators", "()", ""],
      ["load_generators", "Rails::Engine", "classes/Rails/Engine.html#method-i-load_generators", "(app = self)", "<p>Load Rails generators and invoke the registered hooks. Check\n<code>Rails::Railtie.generators</code> for more info. …\n"],
      ["load_interlock", "ActiveSupport::Dependencies", "classes/ActiveSupport/Dependencies.html#method-c-load_interlock", "()", "<p>Execute the supplied block while holding an exclusive lock, preventing any\nother thread from being inside …\n"],
      ["load_paths", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-load_paths", "()", ""],
      ["load_records", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-load_records", "(records)", ""],
      ["load_runner", "Rails::Engine", "classes/Rails/Engine.html#method-i-load_runner", "(app = self)", "<p>Load Rails runner and invoke the registered hooks. Check\n<code>Rails::Railtie.runner</code> for more info.\n"],
      ["load_schema_current", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_current", "(format = ActiveRecord::Base.schema_format, file = nil, environment = env)", ""],
      ["load_schema_if_pending!", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-load_schema_if_pending-21", "()", ""],
      ["load_seed", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed", "()", ""],
      ["load_seed", "Rails::Engine", "classes/Rails/Engine.html#method-i-load_seed", "()", "<p>Load data from db/seeds.rb file. It can be used in to load engines&#39;\nseeds, e.g.:\n<p>Blog::Engine.load_seed …\n"],
      ["load_session", "ActionDispatch::Session::CookieStore", "classes/ActionDispatch/Session/CookieStore.html#method-i-load_session", "(req)", ""],
      ["load_session", "ActionDispatch::Session::StaleSessionCheck", "classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-load_session", "(env)", ""],
      ["load_target", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-load_target", "()", ""],
      ["load_tasks", "Rails::Command::Actions", "classes/Rails/Command/Actions.html#method-i-load_tasks", "()", ""],
      ["load_tasks", "Rails::Engine", "classes/Rails/Engine.html#method-i-load_tasks", "(app = self)", "<p>Load Rake, railties tasks and invoke the registered hooks. Check\n<code>Rails::Railtie.rake_tasks</code> for more info. …\n"],
      ["loaded?", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F", "()", "<p>Returns <code>true</code> if the association has been loaded, otherwise\n<code>false</code>.\n\n<pre><code>person.pets.loaded? # =&gt; false\nperson.pets ...</code></pre>\n"],
      ["loading", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-loading", "()", ""],
      ["local", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-local", "(*args)", "<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],
      ["local?", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-local-3F", "()", "<p>True if the request came from localhost, 127.0.0.1, or ::1.\n"],
      ["local_assigns", "ActionView::Template", "classes/ActionView/Template.html#method-i-local_assigns", "", "<p>Returns a hash with the defined local variables.\n<p>Given this sub template rendering:\n\n<pre><code>&lt;%= render &quot;shared/header&quot;, ...</code></pre>\n"],
      ["local_to_utc", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-local_to_utc", "(time, dst = true)", "<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],
      ["localize", "AbstractController::Translation", "classes/AbstractController/Translation.html#method-i-localize", "(*args)", "<p>Delegates to <code>I18n.localize</code>. Also aliased as <code>l</code>.\n"],
      ["localize", "ActionView::Helpers::TranslationHelper", "classes/ActionView/Helpers/TranslationHelper.html#method-i-localize", "(*args)", "<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n<p>See rubydoc.info/github/svenfuchs/i18n/master/I18n/Backend/Base:localize …\n"],
      ["locals_for", "ActionView::TestCase::Behavior::RenderedViewsCollection", "classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-locals_for", "(view)", ""],
      ["localtime", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-localtime", "(utc_offset = nil)", "<p>Returns a <code>Time</code> instance of the simultaneous time in the system\ntimezone.\n"],
      ["localtime", "DateTime", "classes/DateTime.html#method-i-localtime", "(utc_offset = nil)", "<p>Returns a <code>Time</code> instance of the simultaneous time in the system\ntimezone.\n"],
      ["lock", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-lock", "(locks = true)", "<p>Specifies locking settings (default to <code>true</code>). For more\ninformation on locking, please see ActiveRecord::Locking …\n"],
      ["lock!", "ActiveRecord::Locking::Pessimistic", "classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21", "(lock = true)", "<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],
      ["lock_thread=", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-lock_thread-3D", "(lock_thread)", ""],
      ["locking_column", "ActiveRecord::Locking::Optimistic::ClassMethods", "classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column", "()", "<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],
      ["locking_column=", "ActiveRecord::Locking::Optimistic::ClassMethods", "classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D", "(value)", "<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],
      ["locking_enabled?", "ActiveRecord::Locking::Optimistic::ClassMethods", "classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F", "()", "<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],
      ["log", "ActionCable::Connection::TaggedLoggerProxy", "classes/ActionCable/Connection/TaggedLoggerProxy.html#method-i-log", "(type, message)", ""],
      ["log", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log", "(sql, name = \"SQL\", binds = [], type_casted_binds = [], statement_name = nil)", ""],
      ["log", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-log", "()", ""],
      ["log", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-log", "(*args)", "<p>Define log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status. …\n"],
      ["log_error", "ActionController::Live", "classes/ActionController/Live.html#method-i-log_error", "(exception)", ""],
      ["log_subscribers", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-c-log_subscribers", "()", ""],
      ["logged", "ActiveSupport::LogSubscriber::TestHelper::MockLogger", "classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged", "(level)", ""],
      ["logger", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-c-logger", "()", ""],
      ["logger", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-logger", "()", ""],
      ["logger", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-logger", "()", ""],
      ["logger", "ActionMailer::LogSubscriber", "classes/ActionMailer/LogSubscriber.html#method-i-logger", "()", "<p>Use the logger configured for ActionMailer::Base.\n"],
      ["logger", "ActionView::Digestor", "classes/ActionView/Digestor.html#method-c-logger", "()", ""],
      ["logger", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-logger", "()", ""],
      ["logger", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-c-logger", "()", ""],
      ["logger", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-i-logger", "()", ""],
      ["logger_outputs_to?", "ActiveSupport::Logger", "classes/ActiveSupport/Logger.html#method-c-logger_outputs_to-3F", "(logger, *sources)", "<p>Returns true if the logger destination matches one of the sources\n\n<pre><code>logger = Logger.new(STDOUT)\nActiveSupport::Logger.logger_outputs_to?(logger, ...</code></pre>\n"],
      ["longblob", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-longblob", "(*args, **options)", ""],
      ["longtext", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-longtext", "(*args, **options)", ""],
      ["lookup", "ActiveJob::QueueAdapters", "classes/ActiveJob/QueueAdapters.html#method-c-lookup", "(name)", "<p>Returns adapter for specified name.\n\n<pre><code>ActiveJob::QueueAdapters.lookup(:sidekiq)\n# =&gt; ActiveJob::QueueAdapters::SidekiqAdapter\n</code></pre>\n"],
      ["lookup", "Mime::Type", "classes/Mime/Type.html#method-c-lookup", "(string)", ""],
      ["lookup_ancestors", "ActiveModel::Translation", "classes/ActiveModel/Translation.html#method-i-lookup_ancestors", "()", "<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],
      ["lookup_by_extension", "Mime::Type", "classes/Mime/Type.html#method-c-lookup_by_extension", "(extension)", ""],
      ["lookup_context", "ActionView::ViewPaths", "classes/ActionView/ViewPaths.html#method-i-lookup_context", "()", "<p><code>LookupContext</code> is the object responsible for holding all\ninformation required for looking up templates, …\n"],
      ["lookup_paths", "Rails::Command", "classes/Rails/Command.html#method-c-lookup_paths", "()", ""],
      ["lookup_paths", "Rails::Generators", "classes/Rails/Generators.html#method-c-lookup_paths", "()", ""],
      ["lookup_store", "ActiveSupport::Cache", "classes/ActiveSupport/Cache.html#method-c-lookup_store", "(*store_option)", "<p>Creates a new Store object according to the given options.\n<p>If no arguments are passed to this method, …\n"],
      ["lseg", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-lseg", "(*args, **options)", ""],
      ["ltree", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-ltree", "(*args, **options)", ""],
      ["macaddr", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-macaddr", "(*args, **options)", ""],
      ["mail", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-i-mail", "(headers = {}, &block)", "<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],
      ["mail_to", "ActionView::Helpers::UrlHelper", "classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to", "(email_address, name = nil, html_options = {}, &block)", "<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],
      ["mailer", "ActionMailer::MailHelper", "classes/ActionMailer/MailHelper.html#method-i-mailer", "()", "<p>Access the mailer instance.\n"],
      ["mailer_class", "ActionMailer::TestCase::Behavior::ClassMethods", "classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-mailer_class", "()", ""],
      ["mailer_name", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-mailer_name", "()", "<p>Returns the name of the current mailer. This method is also being used as a\npath for a view lookup.  …\n"],
      ["mailer_name", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-i-mailer_name", "()", "<p>Returns the name of the mailer object.\n"],
      ["make_response!", "ActionController::Base", "classes/ActionController/Base.html#method-c-make_response-21", "(request)", ""],
      ["make_response!", "ActionController::Live::ClassMethods", "classes/ActionController/Live/ClassMethods.html#method-i-make_response-21", "(request)", ""],
      ["make_response!", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-make_response-21", "(request)", ""],
      ["many?", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F", "", "<p>Returns true if the collection has more than one record. Equivalent to\n<code>collection.size &gt; 1</code>.\n\n<pre><code>class Person ...</code></pre>\n"],
      ["many?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-many-3F", "()", "<p>Returns true if there is more than one record.\n"],
      ["many?", "Enumerable", "classes/Enumerable.html#method-i-many-3F", "()", "<p>Returns <code>true</code> if the enumerable has more than 1 element.\nFunctionally equivalent to <code>enum.to_a.size &gt;</code> …\n"],
      ["mark_for_destruction", "ActiveRecord::AutosaveAssociation", "classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction", "()", "<p>Marks this record to be destroyed as part of the parent&#39;s save\ntransaction. This does <em>not</em> actually …\n"],
      ["marked_for_destruction?", "ActiveRecord::AutosaveAssociation", "classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F", "()", "<p>Returns whether or not this record will be destroyed as part of the\nparent&#39;s save transaction.\n<p>Only …\n"],
      ["marshal_dump", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump", "()", ""],
      ["marshal_dump", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-marshal_dump", "()", ""],
      ["marshal_load", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load", "(array)", ""],
      ["marshal_load", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-marshal_load", "(variables)", ""],
      ["match", "ActionDispatch::Routing::Mapper::Base", "classes/ActionDispatch/Routing/Mapper/Base.html#method-i-match", "(path, options = nil)", "<p>Matches a url pattern to one or more routes.\n<p>You should not use the <code>match</code> method in your router without …\n"],
      ["match", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-match", "(path, *rest, &block)", "<p>Matches a url pattern to one or more routes. For more information, see\nmatch.\n\n<pre><code>match &#39;path&#39; =&gt; &#39;controller#action&#39;, ...</code></pre>\n"],
      ["match", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-c-match", "(model, name)", ""],
      ["match?", "ActionDispatch::FileHandler", "classes/ActionDispatch/FileHandler.html#method-i-match-3F", "(path)", "<p>Takes a path to a file. If the file is found, has valid encoding, and has\ncorrect read permissions, the …\n"],
      ["matches?", "ActiveModel::Validations::AcceptanceValidator::AttributeDefinition", "classes/ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-i-matches-3F", "(method_name)", ""],
      ["mattr_accessor", "Module", "classes/Module.html#method-i-mattr_accessor", "(*syms, &blk)", "<p>Defines both class and instance accessors for class attributes. All class\nand instance methods created …\n"],
      ["mattr_reader", "Module", "classes/Module.html#method-i-mattr_reader", "(*syms)", "<p>Defines a class attribute and creates a class and instance reader methods.\nThe underlying class variable …\n"],
      ["mattr_writer", "Module", "classes/Module.html#method-i-mattr_writer", "(*syms)", "<p>Defines a class attribute and creates a class and instance writer methods\nto allow assignment to the …\n"],
      ["maximum", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-maximum", "(column_name)", "<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],
      ["mb_chars", "String", "classes/String.html#method-i-mb_chars", "()", "<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>It creates and returns an instance …\n"],
      ["media_type", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-media_type", "()", "<p>The <code>String</code> MIME type of the request.\n\n<pre><code># get &quot;/articles&quot;\nrequest.media_type # =&gt; &quot;application/x-www-form-urlencoded&quot;\n</code></pre>\n"],
      ["mediumblob", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-mediumblob", "(*args, **options)", ""],
      ["mediumtext", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-mediumtext", "(*args, **options)", ""],
      ["megabyte", "Numeric", "classes/Numeric.html#method-i-megabyte", "()", ""],
      ["megabytes", "Numeric", "classes/Numeric.html#method-i-megabytes", "()", "<p>Returns the number of bytes equivalent to the megabytes provided.\n\n<pre><code>2.megabytes # =&gt; 2_097_152\n</code></pre>\n"],
      ["member", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member", "()", "<p>To add a member route, add a member block into the resource block:\n\n<pre><code>resources :photos do\n  member do\n  ...</code></pre>\n"],
      ["member?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F", "(key)", ""],
      ["member?", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F", "(key)", ""],
      ["merge", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-merge", "(other_hash)", "<p>Returns a new <code>ActionController::Parameters</code> with all keys from\n<code>other_hash</code> merged into current hash.\n"],
      ["merge", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-merge", "(headers_or_env)", "<p>Returns a new Http::Headers instance containing the contents of\n<code>headers_or_env</code> and the original instance. …\n"],
      ["merge", "ActiveRecord::SpawnMethods", "classes/ActiveRecord/SpawnMethods.html#method-i-merge", "(other)", "<p>Merges in the conditions from <code>other</code>, if <code>other</code> is\nan ActiveRecord::Relation. Returns an array representing …\n"],
      ["merge", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge", "(hash, &block)", "<p>This method has the same semantics of <code>update</code>, except it does\nnot modify the receiver but rather returns …\n"],
      ["merge", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge", "(hash, &block)", "<p>This method has the same semantics of <code>update</code>, except it does\nnot modify the receiver but rather returns …\n"],
      ["merge!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-merge-21", "(other_hash)", "<p>Returns current <code>ActionController::Parameters</code> instance with\n<code>other_hash</code> merged into current hash.\n"],
      ["merge!", "ActionDispatch::Http::Headers", "classes/ActionDispatch/Http/Headers.html#method-i-merge-21", "(headers_or_env)", "<p>Adds the contents of <code>headers_or_env</code> to original instance\nentries; duplicate keys are overwritten with …\n"],
      ["merge!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21", "(other_hash)", ""],
      ["merge!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21", "(other_hash)", ""],
      ["merge_default_headers", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-c-merge_default_headers", "(original, default)", ""],
      ["message", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-message", "()", "<p>Returns the corresponding message for the current HTTP status code:\n\n<pre><code>response.status = 200\nresponse.message ...</code></pre>\n"],
      ["message", "ActionMailer::MailHelper", "classes/ActionMailer/MailHelper.html#method-i-message", "()", "<p>Access the message instance.\n"],
      ["message", "ActionMailer::MessageDelivery", "classes/ActionMailer/MessageDelivery.html#method-i-message", "()", "<p>Returns the resulting Mail::Message\n"],
      ["message_verifier", "Rails::Application", "classes/Rails/Application.html#method-i-message_verifier", "(verifier_name)", "<p>Returns a message verifier object.\n<p>This verifier can be used to generate and verify signed messages in …\n"],
      ["method", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-method", "()", "<p>Returns the original value of the environment&#39;s REQUEST_METHOD, even if\nit was overridden by middleware. …\n"],
      ["method_added", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-method_added", "(name)", "<p>Refresh the cached action_methods when a new action_method is added.\n"],
      ["method_added", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-c-method_added", "(name)", "<p>Refresh the cached action_methods when a new action_method is added.\n"],
      ["method_added", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-c-method_added", "(event)", "<p>Adds event subscribers for all new methods added to the class.\n"],
      ["method_missing", "ActionDispatch::Assertions::RoutingAssertions", "classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing", "(selector, *args, &block)", "<p>ROUTES TODO: These assertions should really work in an integration context\n"],
      ["method_missing", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-method_missing", "(sym, *args, &block)", "<p>Delegate unhandled messages to the current session instance.\n"],
      ["method_missing", "ActiveModel::AttributeMethods", "classes/ActiveModel/AttributeMethods.html#method-i-method_missing", "(method, *args, &block)", "<p>Allows access to the object attributes, which are held in the hash returned\nby <code>attributes</code>, as though …\n"],
      ["method_missing", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-method_missing", "(method, *arguments, &block)", ""],
      ["method_missing", "ActiveSupport::LogSubscriber::TestHelper::MockLogger", "classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing", "(level, message = nil)", ""],
      ["method_missing", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-method_missing", "(method, *args, &block)", "<p>Forward all undefined methods to the wrapped string.\n"],
      ["method_missing", "ActiveSupport::OrderedOptions", "classes/ActiveSupport/OrderedOptions.html#method-i-method_missing", "(name, *args)", ""],
      ["method_missing", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-method_missing", "(sym, *args, &block)", "<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],
      ["method_symbol", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-method_symbol", "()", "<p>Returns a symbol form of the #method\n"],
      ["midday", "Date", "classes/Date.html#method-i-midday", "()", ""],
      ["midday", "DateTime", "classes/DateTime.html#method-i-midday", "()", ""],
      ["midday", "Time", "classes/Time.html#method-i-midday", "()", ""],
      ["middle_of_day", "Date", "classes/Date.html#method-i-middle_of_day", "()", "<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the middle of the day …\n"],
      ["middle_of_day", "DateTime", "classes/DateTime.html#method-i-middle_of_day", "()", "<p>Returns a new DateTime representing the middle of the day (12:00)\n"],
      ["middle_of_day", "Time", "classes/Time.html#method-i-middle_of_day", "()", "<p>Returns a new Time representing the middle of the day (12:00)\n"],
      ["middleware", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-middleware", "()", "<p>Alias for <code>middleware_stack</code>.\n"],
      ["middleware", "ActiveSupport::Cache::Strategy::LocalCache", "classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware", "()", "<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],
      ["middleware", "Rails::Server", "classes/Rails/Server.html#method-i-middleware", "()", ""],
      ["midnight", "Date", "classes/Date.html#method-i-midnight", "()", ""],
      ["midnight", "DateTime", "classes/DateTime.html#method-i-midnight", "()", ""],
      ["midnight", "Time", "classes/Time.html#method-i-midnight", "()", ""],
      ["migrate", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-migrate", "(direction)", ""],
      ["migrate", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-migrate", "(direction)", "<p>Execute this migration in the named direction\n"],
      ["migrate", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrate", "()", ""],
      ["migration_template", "Rails::Generators::Migration", "classes/Rails/Generators/Migration.html#method-i-migration_template", "(source, destination, config = {})", "<p>Creates a migration template at the given destination. The difference to\nthe default template method …\n"],
      ["migrations_paths", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrations_paths", "()", ""],
      ["minimum", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-minimum", "(column_name)", "<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],
      ["minus_with_coercion", "Time", "classes/Time.html#method-i-minus_with_coercion", "(other)", "<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We&#39;re layering …\n"],
      ["minus_without_coercion", "Time", "classes/Time.html#method-i-minus_without_coercion", "(other)", ""],
      ["minus_without_duration", "Time", "classes/Time.html#method-i-minus_without_duration", "(other)", ""],
      ["minute", "Numeric", "classes/Numeric.html#method-i-minute", "()", ""],
      ["minutes", "Numeric", "classes/Numeric.html#method-i-minutes", "()", "<p>Returns a Duration instance matching the number of minutes provided.\n\n<pre><code>2.minutes # =&gt; 2 minutes\n</code></pre>\n"],
      ["missing_name", "NameError", "classes/NameError.html#method-i-missing_name", "()", "<p>Extract the name of the missing constant from the exception message.\n\n<pre><code>begin\n  HelloWorld\nrescue NameError ...</code></pre>\n"],
      ["missing_name?", "NameError", "classes/NameError.html#method-i-missing_name-3F", "(name)", "<p>Was this exception raised because the given name was missing?\n\n<pre><code>begin\n  HelloWorld\nrescue NameError =&gt; e ...</code></pre>\n"],
      ["model_name", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-i-model_name", "()", "<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],
      ["module_namespacing", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-module_namespacing", "(&block)", "<p>Wrap block with namespace of current application if namespace exists and is\nnot skipped\n"],
      ["modules_for_helpers", "AbstractController::Helpers::ClassMethods", "classes/AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers", "(args)", "<p>Returns a list of modules, normalized from the acceptable kinds of helpers\nwith the following behavior: …\n"],
      ["modules_for_helpers", "ActionController::Helpers::ClassMethods", "classes/ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers", "(args)", "<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_path.\n<p>Parameters …\n"],
      ["monday", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-monday", "()", "<p>Returns Monday of this week assuming that week starts on Monday.\n<code>DateTime</code> objects have their time set …\n"],
      ["money", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-money", "(*args, **options)", ""],
      ["month", "Integer", "classes/Integer.html#method-i-month", "()", ""],
      ["month_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-month_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “month”.\n\n<pre><code>month_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],
      ["month_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-month_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “month”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],
      ["months", "Integer", "classes/Integer.html#method-i-months", "()", "<p>Enables the use of time calculations and declarations, like\n<code>45.minutes + 2.hours + 4.years</code>.\n<p>These methods …\n"],
      ["months_ago", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-months_ago", "(months)", "<p>Returns a new date/time the specified number of months ago.\n"],
      ["months_since", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-months_since", "(months)", "<p>Returns a new date/time the specified number of months in the future.\n"],
      ["mount", "ActionDispatch::Routing::Mapper::Base", "classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount", "(app, options = nil)", "<p>Mount a Rack-based application to be used within the application.\n\n<pre><code>mount SomeRackApp, at: &quot;some_route&quot;\n</code></pre>\n"],
      ["mountable_engine?", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-mountable_engine-3F", "()", ""],
      ["ms", "Benchmark", "classes/Benchmark.html#method-c-ms", "()", "<p>Benchmark realtime in milliseconds.\n\n<pre><code>Benchmark.realtime { User.all }\n# =&gt; 8.0e-05\n\nBenchmark.ms { User.all ...</code></pre>\n"],
      ["multipart=", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-multipart-3D", "(multipart)", ""],
      ["multiple_of?", "Integer", "classes/Integer.html#method-i-multiple_of-3F", "(number)", "<p>Check whether the integer is evenly divisible by the argument.\n\n<pre><code>0.multiple_of?(0)  # =&gt; true\n6.multiple_of?(5) ...</code></pre>\n"],
      ["mute", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-mute", "()", "<p>Silences the logger within a block.\n"],
      ["name", "ActionDispatch::MiddlewareStack::Middleware", "classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-name", "()", ""],
      ["name", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-name", "()", ""],
      ["name", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-c-name", "()", "<p>Report class name as &#39;Time&#39; to thwart type checking.\n"],
      ["namespace", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace", "(path, options = {})", "<p>See ActionDispatch::Routing::Mapper::Scoping#namespace\n"],
      ["namespace", "ActionDispatch::Routing::Mapper::Scoping", "classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace", "(path, options = {})", "<p>Scopes routes to a specific namespace. For example:\n\n<pre><code>namespace :admin do\n  resources :posts\nend\n</code></pre>\n<p>This generates …\n"],
      ["namespace", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-namespace", "(name = nil)", "<p>Convenience method to get the namespace from the class name. It&#39;s the\nsame as Thor default except …\n"],
      ["namespace", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-namespace", "(name = nil)", "<p>Convenience method to get the namespace from the class name. It&#39;s the\nsame as Thor default except …\n"],
      ["namespace", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-namespace", "()", ""],
      ["namespaced?", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-namespaced-3F", "()", ""],
      ["namespaced_class_path", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-namespaced_class_path", "()", ""],
      ["namespaced_path", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-namespaced_path", "()", ""],
      ["native_database_types", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-native_database_types", "()", ""],
      ["native_database_types", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types", "()", "<p>Returns a hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],
      ["negative?", "Numeric", "classes/Numeric.html#method-i-negative-3F", "()", "<p>Returns true if the number is negative.\n\n<pre><code>-1.negative? # =&gt; true\n0.negative?  # =&gt; false\n1.negative?  # ...\n</code></pre>\n"],
      ["negotiate_format", "ActionController::MimeResponds::Collector", "classes/ActionController/MimeResponds/Collector.html#method-i-negotiate_format", "(request)", ""],
      ["negotiate_mime", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime", "(order)", "<p>Receives an array of mimes and return the first user sent mime that matches\nthe order array.\n"],
      ["nested", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-nested", "()", ""],
      ["nested_under_indifferent_access", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access", "()", ""],
      ["nested_under_indifferent_access", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access", "()", ""],
      ["nested_under_indifferent_access", "ActiveSupport::OrderedHash", "classes/ActiveSupport/OrderedHash.html#method-i-nested_under_indifferent_access", "()", ""],
      ["nested_under_indifferent_access", "Hash", "classes/Hash.html#method-i-nested_under_indifferent_access", "()", "<p>Called when object is nested under an object that receives\n#with_indifferent_access. This method will …\n"],
      ["new", "AbstractController::DoubleRenderError", "classes/AbstractController/DoubleRenderError.html#method-c-new", "(message = nil)", ""],
      ["new", "AbstractController::Helpers::MissingHelperError", "classes/AbstractController/Helpers/MissingHelperError.html#method-c-new", "(error, path)", ""],
      ["new", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-c-new", "(connection, identifier, params = {})", ""],
      ["new", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-c-new", "(server, env, coder: ActiveSupport::JSON)", ""],
      ["new", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-c-new", "()", ""],
      ["new", "ActionCable::Connection::TaggedLoggerProxy", "classes/ActionCable/Connection/TaggedLoggerProxy.html#method-c-new", "(logger, tags:)", ""],
      ["new", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-c-new", "(env, event_target, event_loop, protocols: ActionCable::INTERNAL[:protocols])", ""],
      ["new", "ActionCable::RemoteConnections", "classes/ActionCable/RemoteConnections.html#method-c-new", "(server)", ""],
      ["new", "ActionCable::RemoteConnections::RemoteConnection", "classes/ActionCable/RemoteConnections/RemoteConnection.html#method-c-new", "(server, ids)", ""],
      ["new", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-c-new", "()", ""],
      ["new", "ActionCable::Server::Broadcasting::Broadcaster", "classes/ActionCable/Server/Broadcasting/Broadcaster.html#method-c-new", "(server, broadcasting, coder:)", ""],
      ["new", "ActionCable::Server::Configuration", "classes/ActionCable/Server/Configuration.html#method-c-new", "()", ""],
      ["new", "ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap", "classes/ActionCable/SubscriptionAdapter/Async/AsyncSubscriberMap.html#method-c-new", "(event_loop)", ""],
      ["new", "ActionCable::SubscriptionAdapter::Base", "classes/ActionCable/SubscriptionAdapter/Base.html#method-c-new", "(server)", ""],
      ["new", "ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-c-new", "(adapter, event_loop)", ""],
      ["new", "ActionCable::SubscriptionAdapter::Redis::Listener", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-c-new", "(adapter, event_loop)", ""],
      ["new", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-c-new", "()", ""],
      ["new", "ActionController::Live::SSE", "classes/ActionController/Live/SSE.html#method-c-new", "(stream, options = {})", ""],
      ["new", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-new", "()", ""],
      ["new", "ActionController::MimeResponds::Collector", "classes/ActionController/MimeResponds/Collector.html#method-c-new", "(mimes, variant = nil)", ""],
      ["new", "ActionController::MissingRenderer", "classes/ActionController/MissingRenderer.html#method-c-new", "(format)", ""],
      ["new", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-c-new", "(parameters = {})", "<p>Returns a new instance of <code>ActionController::Parameters</code>. Also,\nsets the <code>permitted</code> attribute to the default …\n"],
      ["new", "ActionController::Renderer", "classes/ActionController/Renderer.html#method-i-new", "(env = {})", "<p>Create a new renderer for the same controller but with a new env.\n"],
      ["new", "ActionController::Renderer", "classes/ActionController/Renderer.html#method-c-new", "(controller, env, defaults)", "<p>Accepts a custom Rack environment to render templates in. It will be merged\nwith the default Rack environment …\n"],
      ["new", "ActionController::RequestForgeryProtection::ProtectionMethods::Exception", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-c-new", "(controller)", ""],
      ["new", "ActionController::RequestForgeryProtection::ProtectionMethods::NullSession", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-c-new", "(controller)", ""],
      ["new", "ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession", "classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-c-new", "(controller)", ""],
      ["new", "ActionDispatch::AssertionResponse", "classes/ActionDispatch/AssertionResponse.html#method-c-new", "(code_or_name)", "<p>Accepts a specific response status code as an Integer (404) or String\n(&#39;404&#39;) or a response status …\n"],
      ["new", "ActionDispatch::Callbacks", "classes/ActionDispatch/Callbacks.html#method-c-new", "(app)", ""],
      ["new", "ActionDispatch::Cookies", "classes/ActionDispatch/Cookies.html#method-c-new", "(app)", ""],
      ["new", "ActionDispatch::DebugExceptions", "classes/ActionDispatch/DebugExceptions.html#method-c-new", "(app, routes_app = nil, response_format = :default)", ""],
      ["new", "ActionDispatch::DebugLocks", "classes/ActionDispatch/DebugLocks.html#method-c-new", "(app, path = \"/rails/locks\")", ""],
      ["new", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-c-new", "(backtrace_cleaner, exception)", ""],
      ["new", "ActionDispatch::Executor", "classes/ActionDispatch/Executor.html#method-c-new", "(app, executor)", ""],
      ["new", "ActionDispatch::FileHandler", "classes/ActionDispatch/FileHandler.html#method-c-new", "(root, index: \"index\", headers: {})", ""],
      ["new", "ActionDispatch::Flash", "classes/ActionDispatch/Flash.html#method-c-new", "(app)", ""],
      ["new", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-c-new", "()", ""],
      ["new", "ActionDispatch::Http::ParameterFilter", "classes/ActionDispatch/Http/ParameterFilter.html#method-c-new", "(filters = [])", ""],
      ["new", "ActionDispatch::Http::Parameters::ParseError", "classes/ActionDispatch/Http/Parameters/ParseError.html#method-c-new", "()", ""],
      ["new", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-new", "()", ""],
      ["new", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-c-new", "(*args, &blk)", ""],
      ["new", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-c-new", "(app)", "<p>Create and initialize a new Session instance.\n"],
      ["new", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-c-new", "(*args)", ""],
      ["new", "ActionDispatch::MiddlewareStack::Middleware", "classes/ActionDispatch/MiddlewareStack/Middleware.html#method-c-new", "(klass, args, block)", ""],
      ["new", "ActionDispatch::PublicExceptions", "classes/ActionDispatch/PublicExceptions.html#method-c-new", "(public_path)", ""],
      ["new", "ActionDispatch::RailsEntityStore", "classes/ActionDispatch/RailsEntityStore.html#method-c-new", "(store = Rails.cache)", ""],
      ["new", "ActionDispatch::RailsMetaStore", "classes/ActionDispatch/RailsMetaStore.html#method-c-new", "(store = Rails.cache)", ""],
      ["new", "ActionDispatch::RemoteIp", "classes/ActionDispatch/RemoteIp.html#method-c-new", "(app, ip_spoofing_check = true, custom_proxies = nil)", "<p>Create a new <code>RemoteIp</code> middleware instance.\n<p>The <code>ip_spoofing_check</code> option is on by default. When on, an …\n"],
      ["new", "ActionDispatch::RemoteIp::GetIp", "classes/ActionDispatch/RemoteIp/GetIp.html#method-c-new", "(req, check_ip, proxies)", ""],
      ["new", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-c-new", "(env)", ""],
      ["new", "ActionDispatch::RequestId", "classes/ActionDispatch/RequestId.html#method-c-new", "(app)", ""],
      ["new", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-c-new", "(status = 200, header = {}, body = [])", ""],
      ["new", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-c-new", "(response)", ""],
      ["new", "ActionDispatch::Routing::ConsoleFormatter", "classes/ActionDispatch/Routing/ConsoleFormatter.html#method-c-new", "()", ""],
      ["new", "ActionDispatch::Routing::HtmlTableFormatter", "classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-c-new", "(view)", ""],
      ["new", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-new", "()", ""],
      ["new", "ActionDispatch::Routing::UrlFor", "classes/ActionDispatch/Routing/UrlFor.html#method-c-new", "(*)", ""],
      ["new", "ActionDispatch::SSL", "classes/ActionDispatch/SSL.html#method-c-new", "(app, redirect: {}, hsts: {}, secure_cookies: true)", ""],
      ["new", "ActionDispatch::Session::CacheStore", "classes/ActionDispatch/Session/CacheStore.html#method-c-new", "(app, options = {})", ""],
      ["new", "ActionDispatch::Session::Compatibility", "classes/ActionDispatch/Session/Compatibility.html#method-c-new", "(app, options = {})", ""],
      ["new", "ActionDispatch::Session::CookieStore", "classes/ActionDispatch/Session/CookieStore.html#method-c-new", "(app, options = {})", ""],
      ["new", "ActionDispatch::Session::MemCacheStore", "classes/ActionDispatch/Session/MemCacheStore.html#method-c-new", "(app, options = {})", ""],
      ["new", "ActionDispatch::ShowExceptions", "classes/ActionDispatch/ShowExceptions.html#method-c-new", "(app, exceptions_app)", ""],
      ["new", "ActionDispatch::Static", "classes/ActionDispatch/Static.html#method-c-new", "(app, path, index: \"index\", headers: {})", ""],
      ["new", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-new", "()", "<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],
      ["new", "ActionMailer::Collector", "classes/ActionMailer/Collector.html#method-c-new", "(context, &block)", ""],
      ["new", "ActionMailer::NonInferrableMailerError", "classes/ActionMailer/NonInferrableMailerError.html#method-c-new", "(name)", ""],
      ["new", "ActionView::Digestor::Node", "classes/ActionView/Digestor/Node.html#method-c-new", "(name, logical_name, template, children = [])", ""],
      ["new", "ActionView::FileSystemResolver", "classes/ActionView/FileSystemResolver.html#method-c-new", "(path, pattern = nil)", ""],
      ["new", "ActionView::FixtureResolver", "classes/ActionView/FixtureResolver.html#method-c-new", "(hash = {}, pattern = nil)", ""],
      ["new", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-c-new", "(object_name, object, template, options)", ""],
      ["new", "ActionView::Helpers::NumberHelper::InvalidNumberError", "classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new", "(number)", ""],
      ["new", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-c-new", "()", ""],
      ["new", "ActionView::PartialIteration", "classes/ActionView/PartialIteration.html#method-c-new", "(size)", ""],
      ["new", "ActionView::PartialRenderer", "classes/ActionView/PartialRenderer.html#method-c-new", "(*)", ""],
      ["new", "ActionView::Renderer", "classes/ActionView/Renderer.html#method-c-new", "(lookup_context)", ""],
      ["new", "ActionView::Resolver", "classes/ActionView/Resolver.html#method-c-new", "()", ""],
      ["new", "ActionView::Resolver::Cache::SmallCache", "classes/ActionView/Resolver/Cache/SmallCache.html#method-c-new", "(options = {})", ""],
      ["new", "ActionView::Resolver::Path", "classes/ActionView/Resolver/Path.html#method-c-new", "(name, prefix, partial, virtual)", ""],
      ["new", "ActionView::Template", "classes/ActionView/Template.html#method-c-new", "(source, identifier, handler, details)", ""],
      ["new", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-c-new", "(symbol)", ""],
      ["new", "ActionView::TestCase::Behavior::ClassMethods", "classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-new", "(*)", ""],
      ["new", "ActionView::TestCase::Behavior::RenderedViewsCollection", "classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-c-new", "()", ""],
      ["new", "ActionView::TestCase::TestController", "classes/ActionView/TestCase/TestController.html#method-c-new", "()", ""],
      ["new", "ActiveJob::Core", "classes/ActiveJob/Core.html#method-c-new", "(*arguments)", "<p>Creates a new job instance. Takes the arguments that will be passed to the\nperform method.\n"],
      ["new", "ActiveJob::QueueAdapters::AsyncAdapter", "classes/ActiveJob/QueueAdapters/AsyncAdapter.html#method-c-new", "(**executor_options)", "<p>See Concurrent::ThreadPoolExecutor for executor options.\n"],
      ["new", "ActiveJob::QueueAdapters::SneakersAdapter", "classes/ActiveJob/QueueAdapters/SneakersAdapter.html#method-c-new", "()", ""],
      ["new", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-c-new", "(base)", "<p>Pass in the instance of the object that is using the errors object.\n\n<pre><code>class Person\n  def initialize\n    ...</code></pre>\n"],
      ["new", "ActiveModel::Model", "classes/ActiveModel/Model.html#method-c-new", "(attributes = {})", "<p>Initializes a new model with the given <code>params</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...</code></pre>\n"],
      ["new", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-c-new", "(klass, namespace = nil, name = nil)", "<p>Returns a new ActiveModel::Name instance. By default, the\n<code>namespace</code> and <code>name</code> option will take the namespace\n…\n"],
      ["new", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-c-new", "(precision: nil, limit: nil, scale: nil)", ""],
      ["new", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-c-new", "(precision: nil, limit: nil, scale: nil)", ""],
      ["new", "ActiveModel::UnknownAttributeError", "classes/ActiveModel/UnknownAttributeError.html#method-c-new", "(record, attribute)", ""],
      ["new", "ActiveModel::UnknownAttributeError", "classes/ActiveModel/UnknownAttributeError.html#method-c-new", "(record, attribute)", ""],
      ["new", "ActiveModel::ValidationError", "classes/ActiveModel/ValidationError.html#method-c-new", "(model)", ""],
      ["new", "ActiveModel::Validations::AcceptanceValidator::AttributeDefinition", "classes/ActiveModel/Validations/AcceptanceValidator/AttributeDefinition.html#method-c-new", "(attributes)", ""],
      ["new", "ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes", "classes/ActiveModel/Validations/AcceptanceValidator/LazilyDefineAttributes.html#method-c-new", "(attribute_definition)", ""],
      ["new", "ActiveModel::Validator", "classes/ActiveModel/Validator.html#method-c-new", "(options = {})", "<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],
      ["new", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-c-new", "(klass, table, predicate_builder, association)", ""],
      ["new", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-i-new", "(*args, &block)", ""],
      ["new", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-new", "(attributes = {}, &block)", ""],
      ["new", "ActiveRecord::AttributeAssignmentError", "classes/ActiveRecord/AttributeAssignmentError.html#method-c-new", "(message = nil, exception = nil, attribute = nil)", ""],
      ["new", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-c-new", "(connection, logger, connection_options, config)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::AbstractAdapter::Version", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/Version.html#method-c-new", "(version_string)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new", "()", ""],
      ["new", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new", "(spec)", "<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],
      ["new", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new", "(lock = Monitor.new)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new", "(pool, frequency)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new", "()", ""],
      ["new", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new", "(connection, logger, connection_options, config)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-c-new", "(value)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new", "(connection, logger, connection_parameters, config)", "<p>Initializes and connects a PostgreSQL adapter.\n"],
      ["new", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new", "(connection, max)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-c-new", "(type_metadata, oid: nil, fmod: nil)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-new", "(*)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration", "classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-c-new", "(*)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::RealTransaction", "classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-c-new", "(connection, options, *args)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new", "(connection, logger, connection_options, config)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::SavepointTransaction", "classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-c-new", "(connection, savepoint_name, options, *args)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new", "(conn)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new", "(table_name, base)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new", "(name, temporary = false, options = nil, as = nil, comment: nil)", ""],
      ["new", "ActiveRecord::ConnectionAdapters::TransactionState", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new", "(state = nil)", ""],
      ["new", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-c-new", "(attributes = nil)", "<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],
      ["new", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-c-new", "(model, name)", ""],
      ["new", "ActiveRecord::EagerLoadPolymorphicError", "classes/ActiveRecord/EagerLoadPolymorphicError.html#method-c-new", "(reflection = nil)", ""],
      ["new", "ActiveRecord::EnvironmentMismatchError", "classes/ActiveRecord/EnvironmentMismatchError.html#method-c-new", "(current: nil, stored: nil)", ""],
      ["new", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-new", "(connection, name, class_name, path, config = ActiveRecord::Base)", ""],
      ["new", "ActiveRecord::FixtureSet::ClassCache", "classes/ActiveRecord/FixtureSet/ClassCache.html#method-c-new", "(class_names, config)", ""],
      ["new", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-new", "(*args, &block)", "<p>Determines if one of the attributes passed in is the inheritance column,\nand if the inheritance column …\n"],
      ["new", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-c-new", "(name = self.class.name, version = nil)", ""],
      ["new", "ActiveRecord::Migration::CheckPending", "classes/ActiveRecord/Migration/CheckPending.html#method-c-new", "(app)", ""],
      ["new", "ActiveRecord::Migration::CommandRecorder", "classes/ActiveRecord/Migration/CommandRecorder.html#method-c-new", "(delegate = nil)", ""],
      ["new", "ActiveRecord::MismatchedForeignKey", "classes/ActiveRecord/MismatchedForeignKey.html#method-c-new", "(adapter = nil, message: nil, table: nil, foreign_key: nil, target_table: nil, primary_key: nil)", ""],
      ["new", "ActiveRecord::MultiparameterAssignmentErrors", "classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new", "(errors = nil)", ""],
      ["new", "ActiveRecord::QueryMethods::WhereChain", "classes/ActiveRecord/QueryMethods/WhereChain.html#method-c-new", "(scope)", ""],
      ["new", "ActiveRecord::RecordInvalid", "classes/ActiveRecord/RecordInvalid.html#method-c-new", "(record = nil)", ""],
      ["new", "ActiveRecord::RecordNotDestroyed", "classes/ActiveRecord/RecordNotDestroyed.html#method-c-new", "(message = nil, record = nil)", ""],
      ["new", "ActiveRecord::RecordNotFound", "classes/ActiveRecord/RecordNotFound.html#method-c-new", "(message = nil, model = nil, primary_key = nil, id = nil)", ""],
      ["new", "ActiveRecord::RecordNotSaved", "classes/ActiveRecord/RecordNotSaved.html#method-c-new", "(message = nil, record = nil)", ""],
      ["new", "ActiveRecord::Reflection::MacroReflection", "classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new", "(name, scope, options, active_record)", ""],
      ["new", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-c-new", "(klass, table, predicate_builder, values = {})", ""],
      ["new", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-new", "(*args, &block)", "<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same …\n"],
      ["new", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-c-new", "(columns, rows, column_types = {})", ""],
      ["new", "ActiveRecord::StaleObjectError", "classes/ActiveRecord/StaleObjectError.html#method-c-new", "(record = nil, attempted_action = nil)", ""],
      ["new", "ActiveRecord::StatementInvalid", "classes/ActiveRecord/StatementInvalid.html#method-c-new", "(message = nil)", ""],
      ["new", "ActiveRecord::UnknownPrimaryKey", "classes/ActiveRecord/UnknownPrimaryKey.html#method-c-new", "(model = nil, description = nil)", ""],
      ["new", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Cache::FileStore", "classes/ActiveSupport/Cache/FileStore.html#method-c-new", "(cache_path, options = nil)", ""],
      ["new", "ActiveSupport::Cache::MemCacheStore", "classes/ActiveSupport/Cache/MemCacheStore.html#method-c-new", "(*addresses)", "<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],
      ["new", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-c-new", "(options = nil)", ""],
      ["new", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-c-new", "(options = nil)", "<p>Creates a new cache. The options will be passed to any write method calls\nexcept for <code>:namespace</code> which …\n"],
      ["new", "ActiveSupport::Cache::Strategy::LocalCache::LocalStore", "classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::CachingKeyGenerator", "classes/ActiveSupport/CachingKeyGenerator.html#method-c-new", "(key_generator)", ""],
      ["new", "ActiveSupport::Callbacks::Conditionals::Value", "classes/ActiveSupport/Callbacks/Conditionals/Value.html#method-c-new", "(&block)", ""],
      ["new", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Dependencies::WatchStack", "classes/ActiveSupport/Dependencies/WatchStack.html#method-c-new", "()", "<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],
      ["new", "ActiveSupport::Deprecation", "classes/ActiveSupport/Deprecation.html#method-c-new", "(deprecation_horizon = \"5.2\", gem_name = \"Rails\")", "<p>It accepts two parameters on initialization. The first is a version of\nlibrary and the second is a library …\n"],
      ["new", "ActiveSupport::Deprecation::DeprecatedConstantProxy", "classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new", "(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance, message: \"#{old_const} is deprecated! Use #{new_const} instead.\")", ""],
      ["new", "ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy", "classes/ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-c-new", "(instance, method, var = \"@#{method}\", deprecator = ActiveSupport::Deprecation.instance)", ""],
      ["new", "ActiveSupport::Deprecation::DeprecatedObjectProxy", "classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-c-new", "(object, message, deprecator = ActiveSupport::Deprecation.instance)", ""],
      ["new", "ActiveSupport::FileUpdateChecker", "classes/ActiveSupport/FileUpdateChecker.html#method-c-new", "(files, dirs = {}, &block)", "<p>It accepts two parameters on initialization. The first is an array of files\nand the second is an optional …\n"],
      ["new", "ActiveSupport::Gzip::Stream", "classes/ActiveSupport/Gzip/Stream.html#method-c-new", "(*)", ""],
      ["new", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new", "(constructor = {})", ""],
      ["new", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new", "(constructor = {})", ""],
      ["new", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Inflector::Inflections::Uncountables", "classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::InheritableOptions", "classes/ActiveSupport/InheritableOptions.html#method-c-new", "(parent = nil)", ""],
      ["new", "ActiveSupport::KeyGenerator", "classes/ActiveSupport/KeyGenerator.html#method-c-new", "(secret, options = {})", ""],
      ["new", "ActiveSupport::LogSubscriber::TestHelper::MockLogger", "classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new", "(level = DEBUG)", ""],
      ["new", "ActiveSupport::Logger", "classes/ActiveSupport/Logger.html#method-c-new", "(*args)", ""],
      ["new", "ActiveSupport::MessageEncryptor", "classes/ActiveSupport/MessageEncryptor.html#method-c-new", "(secret, *signature_key_or_options)", "<p>Initialize a new MessageEncryptor. <code>secret</code> must be at least as\nlong as the cipher key size. For the default …\n"],
      ["new", "ActiveSupport::MessageVerifier", "classes/ActiveSupport/MessageVerifier.html#method-c-new", "(secret, options = {})", ""],
      ["new", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-c-new", "(string)", "<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],
      ["new", "ActiveSupport::Multibyte::Unicode::Codepoint", "classes/ActiveSupport/Multibyte/Unicode/Codepoint.html#method-c-new", "()", "<p>Initializing Codepoint object with default values\n"],
      ["new", "ActiveSupport::Multibyte::Unicode::UnicodeDatabase", "classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Notifications::Event", "classes/ActiveSupport/Notifications/Event.html#method-c-new", "(name, start, ending, transaction_id, payload)", ""],
      ["new", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Notifications::Instrumenter", "classes/ActiveSupport/Notifications/Instrumenter.html#method-c-new", "(notifier)", ""],
      ["new", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-c-new", "(str = \"\")", ""],
      ["new", "ActiveSupport::SafeBuffer::SafeConcatError", "classes/ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-c-new", "()", ""],
      ["new", "ActiveSupport::TaggedLogging", "classes/ActiveSupport/TaggedLogging.html#method-c-new", "(logger)", ""],
      ["new", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-c-new", "(utc_time, time_zone, local_time = nil, period = nil)", ""],
      ["new", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-new", "(name)", "<p>Returns a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],
      ["new", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-new", "(name, utc_offset = nil, tzinfo = nil)", "<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],
      ["new", "ActiveSupport::XMLConverter::DisallowedType", "classes/ActiveSupport/XMLConverter/DisallowedType.html#method-c-new", "(type)", ""],
      ["new", "Mime::AllType", "classes/Mime/AllType.html#method-c-new", "()", ""],
      ["new", "Mime::Mimes", "classes/Mime/Mimes.html#method-c-new", "()", ""],
      ["new", "Mime::Type", "classes/Mime/Type.html#method-c-new", "(string, symbol = nil, synonyms = [])", ""],
      ["new", "Rails::API::Task", "classes/Rails/API/Task.html#method-c-new", "(name)", ""],
      ["new", "Rails::Application", "classes/Rails/Application.html#method-c-new", "(initial_variable_values = {}, &block)", ""],
      ["new", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-c-new", "(*)", ""],
      ["new", "Rails::Application::DefaultMiddlewareStack", "classes/Rails/Application/DefaultMiddlewareStack.html#method-c-new", "(app, config, paths)", ""],
      ["new", "Rails::Application::Finisher::MutexHook", "classes/Rails/Application/Finisher/MutexHook.html#method-c-new", "(mutex = Mutex.new)", ""],
      ["new", "Rails::Application::RoutesReloader", "classes/Rails/Application/RoutesReloader.html#method-c-new", "()", ""],
      ["new", "Rails::BacktraceCleaner", "classes/Rails/BacktraceCleaner.html#method-c-new", "()", ""],
      ["new", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-c-new", "(operations = [], delete_operations = [])", ""],
      ["new", "Rails::Console", "classes/Rails/Console.html#method-c-new", "(app, options = {})", ""],
      ["new", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-c-new", "(options = {})", ""],
      ["new", "Rails::Engine", "classes/Rails/Engine.html#method-c-new", "()", ""],
      ["new", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-c-new", "(root = nil)", ""],
      ["new", "Rails::Engine::Railties", "classes/Rails/Engine/Railties.html#method-c-new", "()", ""],
      ["new", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-c-new", "(name)", ""],
      ["new", "Rails::Generators::AppBase::GemfileEntry", "classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-new", "(name, version, comment, options = {}, commented_out = false)", ""],
      ["new", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-c-new", "(name, context, options, &block)", ""],
      ["new", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-c-new", "(root, current, paths, options = {})", ""],
      ["new", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-c-new", "(path)", ""],
      ["new", "Rails::Rack::Logger", "classes/Rails/Rack/Logger.html#method-c-new", "(app, taggers = nil)", ""],
      ["new", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-c-new", "()", ""],
      ["new", "Rails::Secrets::MissingKeyError", "classes/Rails/Secrets/MissingKeyError.html#method-c-new", "()", ""],
      ["new", "Rails::Server", "classes/Rails/Server.html#method-c-new", "(options = nil)", ""],
      ["new", "SourceAnnotationExtractor", "classes/SourceAnnotationExtractor.html#method-c-new", "(tag)", ""],
      ["new_column_from_field", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-new_column_from_field", "(table_name, field)", ""],
      ["new_column_from_field", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-new_column_from_field", "(table_name, field)", "<p>SCHEMA STATEMENTS ========================================\n"],
      ["new_constants", "ActiveSupport::Dependencies::WatchStack", "classes/ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants", "()", "<p>Returns a list of new constants found since the last call to\n<code>watch_namespaces</code>.\n"],
      ["new_helper", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-new_helper", "()", ""],
      ["new_record?", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-new_record-3F", "()", "<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],
      ["new_session", "Rails::ConsoleMethods", "classes/Rails/ConsoleMethods.html#method-i-new_session", "()", "<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],
      ["next_day", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-next_day", "()", "<p>Returns a new date/time representing the next day.\n"],
      ["next_key", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key", "()", ""],
      ["next_migration_number", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-next_migration_number", "(number)", "<p>Determines the version number of the next migration.\n"],
      ["next_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-next_month", "()", "<p>Short-hand for months_since(1).\n"],
      ["next_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-next_quarter", "()", "<p>Short-hand for months_since(3)\n"],
      ["next_sequence_value", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-next_sequence_value", "()", "<p>Returns the next value that will be used as the primary key on an insert\nstatement.\n"],
      ["next_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-next_week", "(given_day_in_next_week = Date.beginning_of_week, same_time: false)", "<p>Returns a new date/time representing the given day in the next week.\n\n<pre><code>today = Date.today # =&gt; Thu, 07 May ...\n</code></pre>\n"],
      ["next_weekday", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-next_weekday", "()", "<p>Returns a new date/time representing the next weekday.\n"],
      ["next_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-next_year", "()", "<p>Short-hand for years_since(1).\n"],
      ["nil?", "Mime::NullType", "classes/Mime/NullType.html#method-i-nil-3F", "()", ""],
      ["no_color!", "Rails::Generators", "classes/Rails/Generators.html#method-c-no_color-21", "()", "<p>Remove the color from output.\n"],
      ["no_routes", "ActionDispatch::Routing::ConsoleFormatter", "classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-no_routes", "(routes)", ""],
      ["no_routes", "ActionDispatch::Routing::HtmlTableFormatter", "classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-no_routes", "(*)", ""],
      ["no_touching", "ActiveRecord::NoTouching::ClassMethods", "classes/ActiveRecord/NoTouching/ClassMethods.html#method-i-no_touching", "(&block)", "<p>Lets you selectively disable calls to `touch` for the duration of a block.\n<p>Examples\n\n<pre><code>ActiveRecord::Base.no_touching ...</code></pre>\n"],
      ["no_touching?", "ActiveRecord::NoTouching", "classes/ActiveRecord/NoTouching.html#method-i-no_touching-3F", "()", ""],
      ["nonce", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-nonce", "(secret_key, time = Time.now)", "<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],
      ["none", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-none", "()", "<p>Returns a chainable relation with zero records.\n<p>The returned relation implements the Null Object pattern. …\n"],
      ["none?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-none-3F", "()", "<p>Returns true if there are no records.\n"],
      ["noon", "Date", "classes/Date.html#method-i-noon", "()", ""],
      ["noon", "DateTime", "classes/DateTime.html#method-i-noon", "()", ""],
      ["noon", "Time", "classes/Time.html#method-i-noon", "()", ""],
      ["normalize", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-normalize", "(form = nil)", "<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],
      ["normalize", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-normalize", "(string, form = nil)", "<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],
      ["normalize_name", "ActionDispatch::Routing::Mapper", "classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_name", "(name)", ""],
      ["normalize_path", "ActionDispatch::Routing::Mapper", "classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_path", "(path)", "<p>Invokes Journey::Router::Utils.normalize_path and ensure that (:locale)\nbecomes (/:locale) instead of …\n"],
      ["not", "ActiveRecord::QueryMethods::WhereChain", "classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-not", "(opts, *rest)", "<p>Returns a new relation expressing WHERE + NOT condition according to the\nconditions in the arguments. …\n"],
      ["not_modified?", "ActionDispatch::Http::Cache::Request", "classes/ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F", "(modified_at)", ""],
      ["notice", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-notice", "()", "<p>Convenience accessor for <code>flash[:notice]</code>.\n"],
      ["notice=", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-notice-3D", "(message)", "<p>Convenience accessor for <code>flash[:notice]=</code>.\n"],
      ["now", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-now", "()", "<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre><code>flash.now[:message] = ...</code></pre>\n"],
      ["now", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-now", "()", "<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],
      ["now_is_loaded?", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-now_is_loaded-3F", "()", ""],
      ["nsec", "DateTime", "classes/DateTime.html#method-i-nsec", "()", "<p>Returns the fraction of a second as nanoseconds\n"],
      ["num_waiting", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting", "()", "<p>Returns the number of threads currently waiting on this queue.\n"],
      ["number_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-number_field", "(object_name, method, options = {})", "<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],
      ["number_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag", "(name, value = nil, options = {})", "<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],
      ["number_to_currency", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency", "(number, options = {})", "<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],
      ["number_to_currency", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_currency", "(number, options = {})", "<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],
      ["number_to_delimited", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_delimited", "(number, options = {})", "<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],
      ["number_to_human", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human", "(number, options = {})", "<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],
      ["number_to_human", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_human", "(number, options = {})", "<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],
      ["number_to_human_size", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size", "(number, options = {})", "<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],
      ["number_to_human_size", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_human_size", "(number, options = {})", "<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],
      ["number_to_percentage", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage", "(number, options = {})", "<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],
      ["number_to_percentage", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_percentage", "(number, options = {})", "<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],
      ["number_to_phone", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone", "(number, options = {})", "<p>Formats a <code>number</code> into a phone number (US by default e.g.,\n(555) 123-9876). You can customize the format …\n"],
      ["number_to_phone", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_phone", "(number, options = {})", "<p>Formats a <code>number</code> into a phone number (US by default e.g.,\n(555) 123-9876). You can customize the format …\n"],
      ["number_to_rounded", "ActiveSupport::NumberHelper", "classes/ActiveSupport/NumberHelper.html#method-i-number_to_rounded", "(number, options = {})", "<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],
      ["number_with_delimiter", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter", "(number, options = {})", "<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],
      ["number_with_precision", "ActionView::Helpers::NumberHelper", "classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision", "(number, options = {})", "<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],
      ["numrange", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-numrange", "(*args, **options)", ""],
      ["object", "ActionView::Helpers::ActiveModelInstanceTag", "classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object", "()", ""],
      ["offset", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-offset", "(value)", "<p>Specifies the number of rows to skip before returning rows.\n\n<pre><code>User.offset(10) # generated SQL has &quot;OFFSET ...\n</code></pre>\n"],
      ["oid", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-oid", "(*args, **options)", ""],
      ["on_cdata_block", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block", "(string)", ""],
      ["on_characters", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters", "(string)", ""],
      ["on_end_document", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document", "()", ""],
      ["on_end_element", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element", "(name)", ""],
      ["on_load", "ActiveSupport::LazyLoadHooks", "classes/ActiveSupport/LazyLoadHooks.html#method-i-on_load", "(name, options = {}, &block)", "<p>Declares a block that will be executed when a Rails component is fully\nloaded.\n"],
      ["on_start_document", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document", "()", ""],
      ["on_start_element", "ActiveSupport::XmlMini_LibXMLSAX::HashBuilder", "classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element", "(name, attrs = {})", ""],
      ["on_weekday?", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-on_weekday-3F", "()", "<p>Returns true if the date/time does not fall on a Saturday or Sunday.\n"],
      ["on_weekend?", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-on_weekend-3F", "()", "<p>Returns true if the date/time falls on a Saturday or Sunday.\n"],
      ["one?", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-one-3F", "()", "<p>Returns true if there is exactly one record.\n"],
      ["only", "ActiveRecord::SpawnMethods", "classes/ActiveRecord/SpawnMethods.html#method-i-only", "(*onlies)", "<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n\n<pre><code>Post.order(&#39;id asc&#39;).only(:where) ...</code></pre>\n"],
      ["opaque", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-opaque", "(secret_key)", "<p>Opaque based on digest of secret key\n"],
      ["open", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-open", "()", "<p>Shortcut for <code>tempfile.open</code>.\n"],
      ["open", "ActionDispatch::RailsEntityStore", "classes/ActionDispatch/RailsEntityStore.html#method-i-open", "(key)", ""],
      ["open_session", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-open_session", "()", "<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],
      ["operations", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-operations", "()", ""],
      ["opt_parser", "Rails::Server", "classes/Rails/Server.html#method-i-opt_parser", "()", ""],
      ["optimize_routes_generation?", "ActionDispatch::Routing::UrlFor", "classes/ActionDispatch/Routing/UrlFor.html#method-i-optimize_routes_generation-3F", "()", ""],
      ["option_groups_from_collection_for_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select", "(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)", "<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],
      ["optional_port", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-optional_port", "()", "<p>Returns a number port suffix like 8080 if the port number of this request\nis not the default HTTP port …\n"],
      ["options_for_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select", "(container, selected = nil)", "<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],
      ["options_from_collection_for_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select", "(collection, value_method, text_method, selected = nil)", "<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],
      ["options_include_default?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F", "(options)", ""],
      ["or", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-or", "(other)", "<p>Returns a new relation, which is the logical union of this relation and the\none passed as an argument. …\n"],
      ["order", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-order", "(*args)", "<p>Allows to specify an order attribute:\n\n<pre><code>User.order(:name)\n# SELECT &quot;users&quot;.* FROM &quot;users&quot; ORDER BY &quot;users&quot;.&quot;name&quot; ...\n</code></pre>\n"],
      ["ordinal", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-ordinal", "(number)", "<p>Returns the suffix that should be added to a number to denote the position\nin an ordered sequence such …\n"],
      ["ordinal", "Integer", "classes/Integer.html#method-i-ordinal", "()", "<p>Ordinal returns the suffix used to denote the position in an ordered\nsequence such as 1st, 2nd, 3rd, …\n"],
      ["ordinalize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-ordinalize", "(number)", "<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],
      ["ordinalize", "Integer", "classes/Integer.html#method-i-ordinalize", "()", "<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],
      ["original_concat", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-original_concat", "(value)", ""],
      ["original_fullpath", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-original_fullpath", "()", "<p>Returns a <code>String</code> with the last requested path including their\nparams.\n\n<pre><code># get &#39;/foo&#39;\nrequest.original_fullpath ...</code></pre>\n"],
      ["original_url", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-original_url", "()", "<p>Returns the original request URL as a <code>String</code>.\n\n<pre><code># get &quot;/articles?page=2&quot;\nrequest.original_url # =&gt; &quot;http://www.example.com/articles?page=2&quot;\n</code></pre>\n"],
      ["overlaps?", "Range", "classes/Range.html#method-i-overlaps-3F", "(other)", "<p>Compare two ranges and see if they overlap each other\n\n<pre><code>(1..5).overlaps?(4..6) # =&gt; true\n(1..5).overlaps?(7..9) ...</code></pre>\n"],
      ["pack_graphemes", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-pack_graphemes", "(unpacked)", "<p>Reverse operation of unpack_graphemes.\n\n<pre><code>Unicode.pack_graphemes(Unicode.unpack_graphemes(&#39;क्षि&#39;)) # =&gt; &#39;क्षि&#39;\n</code></pre>\n"],
      ["param_key", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-c-param_key", "(record_or_class)", "<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it&#39;s inside …\n"],
      ["parameter_filter", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter", "()", ""],
      ["parameter_filter_for", "ActionDispatch::Http::FilterParameters", "classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for", "(filters)", ""],
      ["parameter_parsers=", "ActionDispatch::Http::Parameters::ClassMethods", "classes/ActionDispatch/Http/Parameters/ClassMethods.html#method-i-parameter_parsers-3D", "(parsers)", "<p>Configure the parameter parser for a given mime type.\n<p>It accepts a hash where the key is the symbol of …\n"],
      ["parameterize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-parameterize", "(string, separator: \"-\", preserve_case: false)", "<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n\n<pre><code>parameterize(&quot;Donald ...</code></pre>\n"],
      ["parameterize", "String", "classes/String.html#method-i-parameterize", "(separator: \"-\", preserve_case: false)", "<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n\n<pre><code>class ...</code></pre>\n"],
      ["parameters", "ActionDispatch::Http::Parameters", "classes/ActionDispatch/Http/Parameters.html#method-i-parameters", "()", "<p>Returns both GET and POST parameters in a single hash.\n"],
      ["params", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-params", "()", ""],
      ["params", "ActionController::StrongParameters", "classes/ActionController/StrongParameters.html#method-i-params", "()", "<p>Returns a new ActionController::Parameters object that has been\ninstantiated with the <code>request.parameters</code> …\n"],
      ["params", "ActionDispatch::Http::Parameters", "classes/ActionDispatch/Http/Parameters.html#method-i-params", "()", ""],
      ["params=", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-params-3D", "(val)", ""],
      ["params=", "ActionController::StrongParameters", "classes/ActionController/StrongParameters.html#method-i-params-3D", "(value)", "<p>Assigns the given <code>value</code> to the <code>params</code> hash. If\n<code>value</code> is a Hash, this will create an\nActionController::Parameters …\n"],
      ["params_array_from", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-params_array_from", "(raw_params)", "<p>Takes raw_params and turns it into an array of parameters\n"],
      ["parent", "Module", "classes/Module.html#method-i-parent", "()", "<p>Returns the module which contains this one according to its name.\n\n<pre><code>module M\n  module N\n  end\nend\nX = M::N ...</code></pre>\n"],
      ["parent_name", "Module", "classes/Module.html#method-i-parent_name", "()", "<p>Returns the name of the module containing this one.\n\n<pre><code>M::N.parent_name # =&gt; &quot;M&quot;\n</code></pre>\n"],
      ["parent_of?", "ActiveSupport::Notifications::Event", "classes/ActiveSupport/Notifications/Event.html#method-i-parent_of-3F", "(event)", ""],
      ["parents", "Module", "classes/Module.html#method-i-parents", "()", "<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],
      ["parse", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-c-parse", "(iso8601duration)", "<p>Creates a new Duration from string formatted according to ISO 8601\nDuration.\n<p>See ISO 8601 for more information. …\n"],
      ["parse", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-parse", "(str, now = now())", "<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],
      ["parse", "Mime::Type", "classes/Mime/Type.html#method-c-parse", "(accept_header)", ""],
      ["parse!", "Rails::Server::Options", "classes/Rails/Server/Options.html#method-i-parse-21", "(args)", ""],
      ["parse_data_with_trailing_star", "Mime::Type", "classes/Mime/Type.html#method-c-parse_data_with_trailing_star", "(type)", "<p>For an input of <code>&#39;text&#39;</code>, returns <code>[Mime[:json],\nMime[:xml], Mime[:ics], Mime[:html], Mime[:css]</code> …\n"],
      ["parse_error", "ActiveSupport::JSON", "classes/ActiveSupport/JSON.html#method-c-parse_error", "()", "<p>Returns the class of the error that will be raised when there is an error\nin decoding JSON. Using this …\n"],
      ["parse_trailing_star", "Mime::Type", "classes/Mime/Type.html#method-c-parse_trailing_star", "(accept_header)", ""],
      ["parsed_body", "ActionDispatch::TestResponse", "classes/ActionDispatch/TestResponse.html#method-i-parsed_body", "()", ""],
      ["parser", "URI", "classes/URI.html#method-c-parser", "()", ""],
      ["password=", "ActiveModel::SecurePassword::InstanceMethodsOnActivation", "classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D", "(unencrypted_password)", "<p>Encrypts the password into the <code>password_digest</code> attribute, only\nif the new password is not empty.\n\n<pre><code>class ...</code></pre>\n"],
      ["password_confirmation=", "ActiveModel::SecurePassword::InstanceMethodsOnActivation", "classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password_confirmation-3D", "(unencrypted_password)", ""],
      ["password_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-password_field", "(object_name, method, options = {})", "<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],
      ["password_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag", "(name = \"password\", value = nil, options = {})", "<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],
      ["past?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-past-3F", "()", "<p>Returns true if the current object&#39;s time is in the past.\n"],
      ["past?", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-past-3F", "()", "<p>Returns true if the date/time is in the past.\n"],
      ["patch", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-patch", "(action, **args)", "<p>Simulate a PATCH request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],
      ["patch", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-patch", "(path, **args)", "<p>Performs a PATCH request with the given parameters. See\n<code>#process</code> for more details.\n"],
      ["patch", "ActionDispatch::Routing::Mapper::HttpHelpers", "classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-patch", "(*args, &block)", "<p>Define a route that only recognizes HTTP PATCH. For supported arguments,\nsee match\n\n<pre><code>patch &#39;bacon&#39;, to: ...</code></pre>\n"],
      ["path", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-path", "()", "<p>Shortcut for <code>tempfile.path</code>.\n"],
      ["path", "ActionDispatch::Routing::PathRedirect", "classes/ActionDispatch/Routing/PathRedirect.html#method-i-path", "(params, request)", ""],
      ["path", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-path", "()", ""],
      ["path", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-path", "(*args, **options)", ""],
      ["path", "Rails::Generators::AppBase::GemfileEntry", "classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-path", "(name, path, comment = nil)", ""],
      ["path=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-path-3D", "(path)", ""],
      ["path_for", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-path_for", "(options)", ""],
      ["path_parameters", "ActionDispatch::Http::Parameters", "classes/ActionDispatch/Http/Parameters.html#method-i-path_parameters", "()", "<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],
      ["path_to_asset", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_asset", "(source, options = {})", ""],
      ["path_to_audio", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_audio", "(source, options = {})", ""],
      ["path_to_font", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_font", "(source, options = {})", ""],
      ["path_to_image", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_image", "(source, options = {})", ""],
      ["path_to_javascript", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_javascript", "(source, options = {})", ""],
      ["path_to_stylesheet", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_stylesheet", "(source, options = {})", ""],
      ["path_to_video", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_video", "(source, options = {})", ""],
      ["paths", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-paths", "()", ""],
      ["paths", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-i-paths", "()", ""],
      ["pattern", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-c-pattern", "()", ""],
      ["perform", "ActiveJob::Execution", "classes/ActiveJob/Execution.html#method-i-perform", "(*)", ""],
      ["perform_action", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-perform_action", "(data)", "<p>Extract the action name from the passed data and process it via the\nchannel. The process will ensure …\n"],
      ["perform_enqueued_jobs", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-perform_enqueued_jobs", "(only: nil)", "<p>Performs all enqueued jobs in the duration of the block.\n\n<pre><code>def test_perform_enqueued_jobs\n  perform_enqueued_jobs ...</code></pre>\n"],
      ["perform_later", "ActiveJob::Enqueuing::ClassMethods", "classes/ActiveJob/Enqueuing/ClassMethods.html#method-i-perform_later", "(*args)", "<p>Push a job onto the queue. The arguments must be legal JSON types (string,\nint, float, nil, true, false, …\n"],
      ["perform_now", "ActiveJob::Execution", "classes/ActiveJob/Execution.html#method-i-perform_now", "()", "<p>Performs the job immediately. The job is not sent to the queueing adapter\nbut directly executed by blocking …\n"],
      ["perform_now", "ActiveJob::Execution::ClassMethods", "classes/ActiveJob/Execution/ClassMethods.html#method-i-perform_now", "(*args)", "<p>Performs the job immediately.\n\n<pre><code>MyJob.perform_now(&quot;mike&quot;)\n</code></pre>\n"],
      ["performed?", "AbstractController::Base", "classes/AbstractController/Base.html#method-i-performed-3F", "()", "<p>Tests if a response body is set. Used to determine if the\n<code>process_action</code> callback needs to be terminated …\n"],
      ["performed?", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-performed-3F", "()", "<p>Tests if render or redirect has already happened.\n"],
      ["performed_jobs", "ActiveJob::QueueAdapters::TestAdapter", "classes/ActiveJob/QueueAdapters/TestAdapter.html#method-i-performed_jobs", "()", "<p>Provides a store of all the performed jobs with the TestAdapter so you can\ncheck them.\n"],
      ["period", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-period", "()", "<p>Returns the underlying TZInfo::TimezonePeriod.\n"],
      ["period_for_local", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-period_for_local", "(time, dst = true)", "<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.\n"],
      ["period_for_utc", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-period_for_utc", "(time)", "<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.\n"],
      ["periodically", "ActionCable::Channel::PeriodicTimers::ClassMethods", "classes/ActionCable/Channel/PeriodicTimers/ClassMethods.html#method-i-periodically", "(callback_or_method_name = nil, every:, &block)", "<p>Periodically performs a task on the channel, like updating an online user\ncounter, polling a backend …\n"],
      ["permanent", "ActionDispatch::Cookies::ChainedCookieJars", "classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-permanent", "()", "<p>Returns a jar that&#39;ll automatically set the assigned cookies to have an\nexpiration date 20 years …\n"],
      ["permit", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-permit", "(*filters)", "<p>Returns a new <code>ActionController::Parameters</code> instance that\nincludes only the given <code>filters</code> and sets the …\n"],
      ["permit!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-permit-21", "()", "<p>Sets the <code>permitted</code> attribute to <code>true</code>. This can be\nused to pass mass assignment. Returns <code>self</code>.\n\n<pre><code>class Person ...</code></pre>\n"],
      ["permit_concurrent_loads", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-permit_concurrent_loads", "()", ""],
      ["permitted=", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-permitted-3D", "(new_permitted)", ""],
      ["permitted?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-permitted-3F", "()", "<p>Returns <code>true</code> if the parameter is permitted, <code>false</code>\notherwise.\n\n<pre><code>params = ActionController::Parameters.new ...</code></pre>\n"],
      ["persisted?", "ActiveModel::Model", "classes/ActiveModel/Model.html#method-i-persisted-3F", "()", "<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...</code></pre>\n"],
      ["persisted?", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-persisted-3F", "()", "<p>Returns true if the record is persisted, i.e. it&#39;s not a new record and\nit was not destroyed, otherwise …\n"],
      ["petabyte", "Numeric", "classes/Numeric.html#method-i-petabyte", "()", ""],
      ["petabytes", "Numeric", "classes/Numeric.html#method-i-petabytes", "()", "<p>Returns the number of bytes equivalent to the petabytes provided.\n\n<pre><code>2.petabytes # =&gt; 2_251_799_813_685_248\n</code></pre>\n"],
      ["phone_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-phone_field", "(object_name, method, options = {})", "<p>aliases telephone_field\n"],
      ["phone_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag", "(name, value = nil, options = {})", ""],
      ["pluck", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-pluck", "(*column_names)", ""],
      ["pluck", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-pluck", "(*column_names)", "<p>Use #pluck as a shortcut to select one or more attributes without loading a\nbunch of records just to …\n"],
      ["pluck", "Enumerable", "classes/Enumerable.html#method-i-pluck", "(*keys)", "<p>Convert an enumerable to an array based on the given key.\n\n<pre><code>[{ name: &quot;David&quot; }, { name: &quot;Rafael&quot; }, { name: ...</code></pre>\n"],
      ["plural", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-c-plural", "(record_or_class)", "<p>Returns the plural class name of a record or class.\n\n<pre><code>ActiveModel::Naming.plural(post)             # =&gt; ...\n</code></pre>\n"],
      ["plural", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-plural", "(rule, replacement)", "<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],
      ["plural_file_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-plural_file_name", "()", ""],
      ["plural_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-plural_name", "()", ""],
      ["plural_table_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-plural_table_name", "()", ""],
      ["pluralize", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-pluralize", "(count, singular, plural_arg = nil, plural: plural_arg, locale: I18n.locale)", "<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],
      ["pluralize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-pluralize", "(word, locale = :en)", "<p>Returns the plural form of the word in the string.\n<p>If passed an optional <code>locale</code> parameter, the word will …\n"],
      ["pluralize", "String", "classes/String.html#method-i-pluralize", "(count = nil, locale = :en)", "<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular …\n"],
      ["pluralize_table_names", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-pluralize_table_names", "", "<p>Indicates whether table names should be the pluralized versions of the\ncorresponding class names. If …\n"],
      ["pluralize_table_names=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-pluralize_table_names-3D", "", "<p>Set whether table names should be the pluralized versions of the\ncorresponding class names. If true, …\n"],
      ["pluralize_table_names?", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F", "()", ""],
      ["point", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-point", "(*args, **options)", ""],
      ["poll", "ActiveRecord::ConnectionAdapters::ConnectionPool::Queue", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll", "(timeout = nil)", "<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head the queue\nif the number …\n"],
      ["polygon", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-polygon", "(*args, **options)", ""],
      ["polymorphic_path", "ActionDispatch::Routing::PolymorphicRoutes", "classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path", "(record_or_hash_or_array, options = {})", "<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>routing_type:</code> …\n"],
      ["polymorphic_url", "ActionDispatch::Routing::PolymorphicRoutes", "classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url", "(record_or_hash_or_array, options = {})", "<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],
      ["port", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-port", "()", "<p>Returns the port number of this request as an integer.\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; =&gt; ...</code></pre>\n"],
      ["port=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-port-3D", "(number)", ""],
      ["port_string", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-port_string", "()", "<p>Returns a string port suffix, including colon, like “:8080” if the port\nnumber of this request …\n"],
      ["positive?", "Numeric", "classes/Numeric.html#method-i-positive-3F", "()", "<p>Returns true if the number is positive.\n\n<pre><code>1.positive?  # =&gt; true\n0.positive?  # =&gt; false\n-1.positive? # ...\n</code></pre>\n"],
      ["possible?", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-i-possible-3F", "()", ""],
      ["post", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-i-post", "(task = nil, &block)", ""],
      ["post", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-post", "(action, **args)", "<p>Simulate a POST request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],
      ["post", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post", "(path, **args)", "<p>Performs a POST request with the given parameters. See\n<code>#process</code> for more details.\n"],
      ["post", "ActionDispatch::Routing::Mapper::HttpHelpers", "classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post", "(*args, &block)", "<p>Define a route that only recognizes HTTP POST. For supported arguments, see\nmatch\n\n<pre><code>post &#39;bacon&#39;, to: &#39;food#bacon&#39;\n</code></pre>\n"],
      ["postgresql_version", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version", "()", "<p>Returns the version of the connected PostgreSQL server.\n"],
      ["prefetch_primary_key?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F", "(table_name = nil)", "<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],
      ["prefetch_primary_key?", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-prefetch_primary_key-3F", "()", "<p>Determines if the primary key values should be selected from their\ncorresponding sequence before the …\n"],
      ["prefix", "ActiveRecord::DynamicMatchers::FindBy", "classes/ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix", "()", ""],
      ["prefix", "ActiveRecord::DynamicMatchers::FindByBang", "classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix", "()", ""],
      ["prefix", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-c-prefix", "()", ""],
      ["preload", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-preload", "(*args)", "<p>Allows preloading of <code>args</code>, in the same way that #includes\ndoes:\n\n<pre><code>User.preload(:posts)\n# SELECT &quot;posts&quot;.* ...\n</code></pre>\n"],
      ["prepare!", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-prepare-21", "()", ""],
      ["prepare_column_options", "ActiveRecord::ConnectionAdapters::ColumnDumper", "classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-prepare_column_options", "(column)", "<p>This can be overridden on an Adapter level basis to support other extended\ndatatypes (Example: Adding …\n"],
      ["prepare_destination", "Rails::Generators::Testing::Behaviour", "classes/Rails/Generators/Testing/Behaviour.html#method-i-prepare_destination", "()", "<p>Clears all files and directories in destination.\n"],
      ["prepend", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-prepend", "(*args)", ""],
      ["prepend", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-prepend", "(value)", ""],
      ["prepend_after_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_after_action", "", "<p>Prepend a callback after actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["prepend_around_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_around_action", "", "<p>Prepend a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["prepend_before_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_before_action", "", "<p>Prepend a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["prepend_view_path", "ActionView::ViewPaths", "classes/ActionView/ViewPaths.html#method-i-prepend_view_path", "(path)", "<p>Prepend a path to the list of view paths for the current\n<code>LookupContext</code>.\n<p>Parameters\n<p><code>path</code> - If a String is …\n"],
      ["prepend_view_path", "ActionView::ViewPaths::ClassMethods", "classes/ActionView/ViewPaths/ClassMethods.html#method-i-prepend_view_path", "(path)", "<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],
      ["presence", "Object", "classes/Object.html#method-i-presence", "()", "<p>Returns the receiver if it&#39;s present otherwise returns\n<code>nil</code>. <code>object.presence</code> is equivalent to\n\n<pre><code>object.present? ...</code></pre>\n"],
      ["presence_in", "Object", "classes/Object.html#method-i-presence_in", "(another_object)", "<p>Returns the receiver if it&#39;s included in the argument otherwise returns\n<code>nil</code>. Argument must be any …\n"],
      ["present?", "Object", "classes/Object.html#method-i-present-3F", "()", "<p>An object is present if it&#39;s not blank.\n<p>@return [true, false]\n"],
      ["pretty_print", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-pretty_print", "(pp)", "<p>Takes a PP and prettily prints this record to it, allowing you to get a\nnice result from <code>pp record</code> when …\n"],
      ["pretty_print", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-pretty_print", "(q)", ""],
      ["prev_day", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-prev_day", "()", "<p>Returns a new date/time representing the previous day.\n"],
      ["prev_month", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-prev_month", "()", "<p>Short-hand for months_ago(1).\n"],
      ["prev_quarter", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-prev_quarter", "()", "<p>Short-hand for months_ago(3).\n"],
      ["prev_week", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-prev_week", "(start_day = Date.beginning_of_week, same_time: false)", "<p>Returns a new date/time representing the given day in the previous week.\nWeek is assumed to start on …\n"],
      ["prev_weekday", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-prev_weekday", "()", "<p>Returns a new date/time representing the previous weekday.\n"],
      ["prev_year", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-prev_year", "()", "<p>Short-hand for years_ago(1).\n"],
      ["preview_name", "ActionMailer::Preview", "classes/ActionMailer/Preview.html#method-c-preview_name", "()", "<p>Returns the underscored name of the mailer preview without the suffix.\n"],
      ["previous_changes", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-previous_changes", "()", "<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre><code>person.name # =&gt; &quot;bob&quot;\nperson.name ...</code></pre>\n"],
      ["primary_key", "ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods", "classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key", "()", "<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],
      ["primary_key", "ActiveRecord::ConnectionAdapters::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/ColumnMethods.html#method-i-primary_key", "(name, type = :primary_key, **options)", "<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],
      ["primary_key", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-primary_key", "(name, type = :primary_key, **options)", ""],
      ["primary_key", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-primary_key", "(name, type = :primary_key, **options)", "<p>Defines the primary key field. Use of the native PostgreSQL UUID type is\nsupported, and can be used by …\n"],
      ["primary_key", "ActiveRecord::ConnectionAdapters::SQLite3::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/SQLite3/ColumnMethods.html#method-i-primary_key", "(name, type = :primary_key, **options)", ""],
      ["primary_key", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-primary_key", "(table_name)", "<p>Returns just a table&#39;s primary key\n"],
      ["primary_key=", "ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods", "classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D", "(value)", "<p>Sets the name of the primary key column.\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.primary_key = &#39;sysid&#39; ...</code></pre>\n"],
      ["primary_key_prefix_type", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-primary_key_prefix_type", "", "<p>The prefix type that will be prepended to every primary key column name.\nThe options are <code>:table_name</code> …\n"],
      ["primary_key_prefix_type=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-primary_key_prefix_type-3D", "", "<p>Sets the prefix type that will be prepended to every primary key column\nname. The options are <code>:table_name</code> …\n"],
      ["primary_keys", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys", "(table_name)", ""],
      ["print_generators", "Rails::Generators", "classes/Rails/Generators.html#method-c-print_generators", "()", ""],
      ["print_list", "Rails::Generators", "classes/Rails/Generators.html#method-c-print_list", "(base, namespaces)", ""],
      ["printing_commands", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-printing_commands", "()", ""],
      ["priority", "ActiveJob::QueuePriority", "classes/ActiveJob/QueuePriority.html#method-i-priority", "()", "<p>Returns the priority that the job will be created with\n"],
      ["process", "AbstractController::Base", "classes/AbstractController/Base.html#method-i-process", "(action, *args)", "<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined …\n"],
      ["process", "ActionController::Live", "classes/ActionController/Live.html#method-i-process", "(name)", ""],
      ["process", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-process", "(action, method: \"GET\", params: {}, session: nil, body: nil, flash: {}, format: nil, xhr: false, as: nil)", "<p>Simulate an HTTP request to <code>action</code> by specifying request\nmethod, parameters and set/volley the response. …\n"],
      ["process", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-process", "(method, path, params: nil, headers: nil, env: nil, xhr: false, as: nil)", "<p>Performs the actual request.\n<p><code>method</code>: The HTTP method (GET, POST, PATCH, PUT, DELETE, HEAD,\nOPTIONS) as …\n"],
      ["process", "ActionMailer::LogSubscriber", "classes/ActionMailer/LogSubscriber.html#method-i-process", "(event)", "<p>An email was generated.\n"],
      ["process_action", "AbstractController::Callbacks", "classes/AbstractController/Callbacks.html#method-i-process_action", "(*args)", "<p>Override AbstractController::Base&#39;s process_action to run the\nprocess_action callbacks around the …\n"],
      ["process_action", "ActionController::Instrumentation", "classes/ActionController/Instrumentation.html#method-i-process_action", "(*args)", ""],
      ["process_action", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-process_action", "(event)", ""],
      ["process_action", "ActionController::ParamsWrapper", "classes/ActionController/ParamsWrapper.html#method-i-process_action", "(*args)", "<p>Performs parameters wrapping upon the request. Called automatically by the\nmetal call stack.\n"],
      ["processed?", "ActionMailer::MessageDelivery", "classes/ActionMailer/MessageDelivery.html#method-i-processed-3F", "()", "<p>Was the delegate loaded, causing the mailer action to be processed?\n"],
      ["proper_table_name", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-proper_table_name", "(name, options = {})", "<p>Finds the correct table name given an Active Record object. Uses the Active\nRecord object&#39;s own  …\n"],
      ["property", "Rails::Info", "classes/Rails/Info.html#method-c-property", "(name, value = nil)", ""],
      ["protect_from_forgery", "ActionController::RequestForgeryProtection::ClassMethods", "classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery", "(options = {})", "<p>Turn on request forgery protection. Bear in mind that GET and HEAD requests\nare not checked.\n\n<pre><code>class ApplicationController ...</code></pre>\n"],
      ["protected_environments", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-protected_environments", "", "<p>The array of names of environments where destructive actions should be\nprohibited. By default, the value …\n"],
      ["protected_environments=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-protected_environments-3D", "", "<p>Sets an array of names of environments where destructive actions should be\nprohibited.\n"],
      ["protocol", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-i-protocol", "()", ""],
      ["protocol", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-protocol", "()", "<p>Returns &#39;https://&#39; if this is an SSL request and &#39;http://&#39;\notherwise.\n\n<pre><code>req = ActionDispatch::Request.new ...</code></pre>\n"],
      ["provide", "ActionView::Helpers::CaptureHelper", "classes/ActionView/Helpers/CaptureHelper.html#method-i-provide", "(name, content = nil, &block)", "<p>The same as <code>content_for</code> but when used with streaming flushes\nstraight back to the layout. In other words, …\n"],
      ["proxy_association", "ActiveRecord::AssociationRelation", "classes/ActiveRecord/AssociationRelation.html#method-i-proxy_association", "()", ""],
      ["proxy_association", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-proxy_association", "()", ""],
      ["proxy_class", "ActiveSupport::Multibyte", "classes/ActiveSupport/Multibyte.html#method-c-proxy_class", "()", "<p>Returns the current proxy class.\n"],
      ["proxy_class=", "ActiveSupport::Multibyte", "classes/ActiveSupport/Multibyte.html#method-c-proxy_class-3D", "(klass)", "<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],
      ["prune", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-prune", "(target_size, max_time = nil)", "<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],
      ["pruning?", "ActiveSupport::Cache::MemoryStore", "classes/ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F", "()", "<p>Returns true if the cache is currently being pruned.\n"],
      ["public_compute_asset_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-public_compute_asset_path", "(source, options = {})", ""],
      ["public_directory", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-public_directory", "()", ""],
      ["public_namespaces", "Rails::Generators", "classes/Rails/Generators.html#method-c-public_namespaces", "()", ""],
      ["public_path", "Rails", "classes/Rails.html#method-c-public_path", "()", "<p>Returns a Pathname object of the public folder of the current Rails\nproject, otherwise it returns <code>nil</code> …\n"],
      ["publish", "ActiveSupport::Notifications", "classes/ActiveSupport/Notifications.html#method-c-publish", "(name, *args)", ""],
      ["publish", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-publish", "(name, *args)", ""],
      ["pubsub", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-pubsub", "()", "<p>Adapter used for all streams/broadcasting.\n"],
      ["pubsub_adapter", "ActionCable::Server::Configuration", "classes/ActionCable/Server/Configuration.html#method-i-pubsub_adapter", "()", "<p>Returns constant of subscription adapter specified in config/cable.yml. If\nthe adapter cannot be found, …\n"],
      ["purge", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge", "(configuration)", ""],
      ["purge_all", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_all", "()", ""],
      ["purge_current", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_current", "(environment = env)", ""],
      ["push", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-push", "(*records)", ""],
      ["push", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-push", "(path)", ""],
      ["put", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-put", "(action, **args)", "<p>Simulate a PUT request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],
      ["put", "ActionDispatch::Integration::RequestHelpers", "classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put", "(path, **args)", "<p>Performs a PUT request with the given parameters. See <code>#process</code>\nfor more details.\n"],
      ["put", "ActionDispatch::Routing::Mapper::HttpHelpers", "classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put", "(*args, &block)", "<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\nmatch\n\n<pre><code>put &#39;bacon&#39;, to: &#39;food#bacon&#39;\n</code></pre>\n"],
      ["query", "ActionView::NullResolver", "classes/ActionView/NullResolver.html#method-i-query", "(path, exts, _, _)", ""],
      ["query_attribute", "ActiveRecord::AttributeMethods::Query", "classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute", "(attr_name)", ""],
      ["query_cache_enabled", "ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration", "classes/ActiveRecord/ConnectionAdapters/QueryCache/ConnectionPoolConfiguration.html#method-i-query_cache_enabled", "()", ""],
      ["query_parameter_names", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-query_parameter_names", "(generated_extras)", ""],
      ["query_parameters", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-query_parameters", "()", ""],
      ["queue_adapter", "ActiveJob::QueueAdapter::ClassMethods", "classes/ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter", "()", "<p>Returns the backend queue provider. The default queue adapter is the\n<code>:async</code> queue. See QueueAdapters …\n"],
      ["queue_adapter", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-queue_adapter", "()", "<p>Accesses the queue_adapter set by ActiveJob::Base.\n\n<pre><code>def test_assert_job_has_custom_queue_adapter_set\n  ...</code></pre>\n"],
      ["queue_adapter", "ActiveJob::TestHelper::TestQueueAdapter::ClassMethods", "classes/ActiveJob/TestHelper/TestQueueAdapter/ClassMethods.html#method-i-queue_adapter", "()", ""],
      ["queue_adapter=", "ActiveJob::QueueAdapter::ClassMethods", "classes/ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter-3D", "(name_or_adapter_or_class)", "<p>Specify the backend queue provider. The default queue adapter is the\n<code>:async</code> queue. See QueueAdapters …\n"],
      ["queue_adapter_for_test", "ActiveJob::TestHelper", "classes/ActiveJob/TestHelper.html#method-i-queue_adapter_for_test", "()", "<p>Specifies the queue adapter to use with all active job test helpers.\n<p>Returns an instance of the queue …\n"],
      ["queue_as", "ActiveJob::QueueName::ClassMethods", "classes/ActiveJob/QueueName/ClassMethods.html#method-i-queue_as", "(part_name = nil, &block)", "<p>Specifies the name of the queue to process the job on.\n\n<pre><code>class PublishToFeedJob &lt; ActiveJob::Base\n  queue_as ...</code></pre>\n"],
      ["queue_name", "ActiveJob::QueueName", "classes/ActiveJob/QueueName.html#method-i-queue_name", "()", "<p>Returns the name of the queue the job will be run on.\n"],
      ["queue_with_priority", "ActiveJob::QueuePriority::ClassMethods", "classes/ActiveJob/QueuePriority/ClassMethods.html#method-i-queue_with_priority", "(priority = nil, &block)", "<p>Specifies the priority of the queue to create the job with.\n\n<pre><code>class PublishToFeedJob &lt; ActiveJob::Base\n ...</code></pre>\n"],
      ["quote", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote", "(value)", "<p>Quotes the column value to help prevent SQL injection attacks.\n"],
      ["quote", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-quote", "(value)", "<p>Surround string with single quotes if there is no quotes. Otherwise fall\nback to double quotes\n"],
      ["quote_column_name", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name", "(column_name)", "<p>Quotes the column name. Defaults to no quoting.\n"],
      ["quote_schema_name", "ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_schema_name", "(name)", "<p>Quotes schema names for use in SQL queries.\n"],
      ["quote_string", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string", "(string)", ""],
      ["quote_string", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string", "(s)", "<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],
      ["quote_table_name", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name", "(table_name)", "<p>Quotes the table name. Defaults to column name quoting.\n"],
      ["quote_table_name_for_assignment", "ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_table_name_for_assignment", "(table, attr)", ""],
      ["quote_table_name_for_assignment", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment", "(table, attr)", "<p>Override to return the quoted table name for assignment. Defaults to table\nquoting.\n<p>This works for mysql2 …\n"],
      ["quoted_date", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date", "(value)", "<p>Quote date/time values for use in SQL input. Includes microseconds if the\nvalue is a Time responding …\n"],
      ["quoted_false", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false", "()", ""],
      ["quoted_primary_key", "ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods", "classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key", "()", "<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],
      ["quoted_table_name", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name", "()", "<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],
      ["quoted_true", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true", "()", ""],
      ["rack_app", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-rack_app", "()", ""],
      ["rack_response", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-i-rack_response", "()", ""],
      ["radio_button", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-radio_button", "(method, tag_value, options = {})", "<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],
      ["radio_button", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-radio_button", "(object_name, method, tag_value, options = {})", "<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],
      ["radio_button_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag", "(name, value, checked = false, options = {})", "<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],
      ["rails_command", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-rails_command", "(command, options = {})", "<p>Runs the supplied rake task (invoked with &#39;rails …&#39;)\n\n<pre><code>rails(&quot;db:migrate&quot;)\nrails(&quot;db:migrate&quot;, ...</code></pre>\n"],
      ["rails_root", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-rails_root", "()", ""],
      ["rails_version", "Rails::API::EdgeTask", "classes/Rails/API/EdgeTask.html#method-i-rails_version", "()", ""],
      ["rails_version", "Rails::API::StableTask", "classes/Rails/API/StableTask.html#method-i-rails_version", "()", ""],
      ["railtie_name", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-railtie_name", "(name = nil)", ""],
      ["railties", "Rails::Engine", "classes/Rails/Engine.html#method-i-railties", "()", ""],
      ["raise", "ActiveSupport::ProxyObject", "classes/ActiveSupport/ProxyObject.html#method-i-raise", "(*args)", "<p>Let ActiveSupport::ProxyObject at least raise exceptions.\n"],
      ["raise_validation_error", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-raise_validation_error", "()", ""],
      ["rake", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-rake", "(command, options = {})", "<p>Runs the supplied rake task (invoked with &#39;rake …&#39;)\n\n<pre><code>rake(&quot;db:migrate&quot;)\nrake(&quot;db:migrate&quot;, env: ...</code></pre>\n"],
      ["rake_tasks", "Rails::Application", "classes/Rails/Application.html#method-i-rake_tasks", "(&block)", "<p>If you try to define a set of Rake tasks on the instance, these will get\npassed up to the Rake tasks …\n"],
      ["rake_tasks", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-rake_tasks", "(&blk)", ""],
      ["rakefile", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-rakefile", "()", ""],
      ["rakefile", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-rakefile", "(filename, data = nil, &block)", "<p>Create a new <code>Rakefile</code> with the provided code (either in a\nblock or a string).\n\n<pre><code>rakefile(&quot;bootstrap.rake&quot;) ...</code></pre>\n"],
      ["rakefile", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-rakefile", "()", ""],
      ["range_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-range_field", "(object_name, method, options = {})", "<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],
      ["range_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag", "(name, value = nil, options = {})", "<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],
      ["raw", "ActionView::Helpers::OutputSafetyHelper", "classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw", "(stringish)", "<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],
      ["raw_connection", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection", "()", "<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],
      ["raw_host_with_port", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-raw_host_with_port", "()", "<p>Returns the host and port for this request, such as “example.com:8080”.\n\n<pre><code>req = ActionDispatch::Request.new ...</code></pre>\n"],
      ["raw_params", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-raw_params", "(auth)", "<p>This method takes an authorization body and splits up the key-value pairs\nby the standardized <code>:</code>, <code>;</code>, or …\n"],
      ["raw_post", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-raw_post", "()", "<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],
      ["read", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-read", "(length = nil, buffer = nil)", "<p>Shortcut for <code>tempfile.read</code>.\n"],
      ["read", "ActionDispatch::RailsEntityStore", "classes/ActionDispatch/RailsEntityStore.html#method-i-read", "(key)", ""],
      ["read", "ActionDispatch::RailsMetaStore", "classes/ActionDispatch/RailsMetaStore.html#method-i-read", "(key)", ""],
      ["read", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-read", "(name, options = nil)", "<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],
      ["read_attribute", "ActiveRecord::AttributeMethods::Read", "classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute", "(attr_name, &block)", "<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],
      ["read_attribute_before_type_cast", "ActiveRecord::AttributeMethods::BeforeTypeCast", "classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast", "(attr_name)", "<p>Returns the value of the attribute identified by <code>attr_name</code>\nbefore typecasting and deserialization.\n\n<pre><code>class ...</code></pre>\n"],
      ["read_entry", "ActiveSupport::Cache::Strategy::LocalCache::LocalStore", "classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry", "(key, options)", ""],
      ["read_fragment", "AbstractController::Caching::Fragments", "classes/AbstractController/Caching/Fragments.html#method-i-read_fragment", "(key, options = nil)", "<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats). …\n"],
      ["read_multi", "ActiveSupport::Cache::MemCacheStore", "classes/ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi", "(*names)", "<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],
      ["read_multi", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-read_multi", "(*names)", "<p>Reads multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],
      ["read_store_attribute", "ActiveRecord::Store", "classes/ActiveRecord/Store.html#method-i-read_store_attribute", "(store_attribute, key)", ""],
      ["readable_inspect", "Date", "classes/Date.html#method-i-readable_inspect", "()", "<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],
      ["readable_inspect", "DateTime", "classes/DateTime.html#method-i-readable_inspect", "()", "<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],
      ["readme", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-readme", "()", ""],
      ["readme", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-readme", "(path)", "<p>Reads the given file at the source root and prints it in the console.\n\n<pre><code>readme &quot;README&quot;\n</code></pre>\n"],
      ["readme", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-readme", "()", ""],
      ["readonly", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-readonly", "(value = true)", "<p>Sets readonly attributes for the returned relation. If value is true\n(default), attempting to update …\n"],
      ["readonly!", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-readonly-21", "()", "<p>Marks this record as read only.\n"],
      ["readonly?", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-readonly-3F", "()", "<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],
      ["readonly_attributes", "ActiveRecord::ReadonlyAttributes::ClassMethods", "classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes", "()", "<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],
      ["reap", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap", "()", "<p>Recover lost connections for the pool. A lost connection can occur if a\nprogrammer forgets to checkin …\n"],
      ["receive", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-receive", "(raw_mail)", "<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],
      ["receive", "ActionMailer::LogSubscriber", "classes/ActionMailer/LogSubscriber.html#method-i-receive", "(event)", "<p>An email was received.\n"],
      ["reconnect!", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21", "()", "<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],
      ["reconnect!", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21", "()", ""],
      ["reconnect!", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21", "()", "<p>Close then reopen the connection.\n"],
      ["record", "ActiveRecord::Migration::CommandRecorder", "classes/ActiveRecord/Migration/CommandRecorder.html#method-i-record", "(*command, &block)", "<p>Record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre><code>recorder.record(:method_name, ...</code></pre>\n"],
      ["record_key_for_dom_id", "ActionView::RecordIdentifier", "classes/ActionView/RecordIdentifier.html#method-i-record_key_for_dom_id", "(record)", "<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],
      ["recreate_database", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-recreate_database", "(name, options = {})", "<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],
      ["redefine_method", "Module", "classes/Module.html#method-i-redefine_method", "(method, &block)", "<p>Replaces the existing method definition, if there is one, with the passed\nblock as its body.\n"],
      ["redirect", "ActionDispatch::Routing::Redirection", "classes/ActionDispatch/Routing/Redirection.html#method-i-redirect", "(*args, &block)", "<p>Redirect any path to another path:\n\n<pre><code>get &quot;/stories&quot; =&gt; redirect(&quot;/posts&quot;)\n</code></pre>\n<p>This will redirect the user, while …\n"],
      ["redirect_back", "ActionController::Redirecting", "classes/ActionController/Redirecting.html#method-i-redirect_back", "(fallback_location:, **args)", "<p>Redirects the browser to the page that issued the request (the referrer) if\npossible, otherwise redirects …\n"],
      ["redirect_to", "ActionController::Flash", "classes/ActionController/Flash.html#method-i-redirect_to", "(options = {}, response_status_and_flash = {})", ""],
      ["redirect_to", "ActionController::Instrumentation", "classes/ActionController/Instrumentation.html#method-i-redirect_to", "(*args)", ""],
      ["redirect_to", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-redirect_to", "(event)", ""],
      ["redirect_to", "ActionController::Redirecting", "classes/ActionController/Redirecting.html#method-i-redirect_to", "(options = {}, response_status = {})", "<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can be any one of:\n<p><code>Hash</code> - The …\n"],
      ["redirect_to_url", "ActionDispatch::TestProcess", "classes/ActionDispatch/TestProcess.html#method-i-redirect_to_url", "()", ""],
      ["ref", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-i-ref", "()", ""],
      ["ref", "Mime::NullType", "classes/Mime/NullType.html#method-i-ref", "()", ""],
      ["ref", "Mime::Type", "classes/Mime/Type.html#method-i-ref", "()", ""],
      ["references", "ActiveRecord::ConnectionAdapters::SQLite3::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/SQLite3/TableDefinition.html#method-i-references", "(*args, **options)", ""],
      ["references", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references", "(*args, **options)", "<p>Adds a reference.\n\n<pre><code>t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</code></pre>\n<p>See connection.add_reference …\n"],
      ["references", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references", "(*args, **options)", "<p>Adds a reference.\n\n<pre><code>t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</code></pre>\n<p>See connection.add_reference …\n"],
      ["references", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-references", "(*table_names)", "<p>Use to indicate that the given <code>table_names</code> are referenced by\nan SQL string, and should therefore be  …\n"],
      ["reflect_on_aggregation", "ActiveRecord::Reflection::ClassMethods", "classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation", "(aggregation)", "<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre><code>Account.reflect_on_aggregation(:balance) ...</code></pre>\n"],
      ["reflect_on_all_aggregations", "ActiveRecord::Reflection::ClassMethods", "classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations", "()", "<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],
      ["reflect_on_all_associations", "ActiveRecord::Reflection::ClassMethods", "classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations", "(macro = nil)", "<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],
      ["reflect_on_all_autosave_associations", "ActiveRecord::Reflection::ClassMethods", "classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations", "()", "<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],
      ["reflect_on_association", "ActiveRecord::Reflection::ClassMethods", "classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association", "(association)", "<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre><code>Account.reflect_on_association(:owner) ...</code></pre>\n"],
      ["reflections", "ActiveRecord::Reflection::ClassMethods", "classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflections", "()", "<p>Returns a Hash of name of the reflection as the key and an\nAssociationReflection as the value.\n\n<pre><code>Account.reflections ...</code></pre>\n"],
      ["refresh", "ActionView::Template", "classes/ActionView/Template.html#method-i-refresh", "(view)", "<p>Receives a view object and return a template similar to self by using\n@virtual_path.\n<p>This method is useful …\n"],
      ["register", "ActiveModel::Type", "classes/ActiveModel/Type.html#method-c-register", "(type_name, klass = nil, **options, &block)", "<p>Add a new type to the registry, allowing it to be get through\nActiveModel::Type#lookup\n"],
      ["register", "ActiveRecord::Type", "classes/ActiveRecord/Type.html#method-c-register", "(type_name, klass = nil, **options, &block)", "<p>Add a new type to the registry, allowing it to be referenced as a symbol by\nActiveRecord::Base.attribute …\n"],
      ["register", "Mime::Type", "classes/Mime/Type.html#method-c-register", "(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)", ""],
      ["register_alias", "Mime::Type", "classes/Mime/Type.html#method-c-register_alias", "(string, symbol, extension_synonyms = [])", "<p>Registers an alias that&#39;s not used on mime type lookup, but can be\nreferenced directly. Especially …\n"],
      ["register_callback", "Mime::Type", "classes/Mime/Type.html#method-c-register_callback", "(&block)", ""],
      ["register_encoder", "ActionDispatch::IntegrationTest::Behavior::ClassMethods", "classes/ActionDispatch/IntegrationTest/Behavior/ClassMethods.html#method-i-register_encoder", "(*args)", ""],
      ["register_hook", "ActiveSupport::ExecutionWrapper", "classes/ActiveSupport/ExecutionWrapper.html#method-c-register_hook", "(hook, outer: false)", "<p>Register an object to be invoked during both the <code>run</code> and\n<code>complete</code> steps.\n<p><code>hook.complete</code> will be passed …\n"],
      ["register_interceptor", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-register_interceptor", "(interceptor)", "<p>Register an Interceptor which will be called before mail is sent. Either a\nclass, string or symbol can …\n"],
      ["register_interceptors", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-register_interceptors", "(*interceptors)", "<p>Register one or more Interceptors which will be called before mail is sent.\n"],
      ["register_observer", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-register_observer", "(observer)", "<p>Register an Observer which will be notified when mail is delivered. Either\na class, string or symbol …\n"],
      ["register_observers", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-register_observers", "(*observers)", "<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],
      ["register_preview_interceptor", "ActionMailer::Previews::ClassMethods", "classes/ActionMailer/Previews/ClassMethods.html#method-i-register_preview_interceptor", "(interceptor)", "<p>Register an Interceptor which will be called before mail is previewed.\nEither a class or a string can …\n"],
      ["register_preview_interceptors", "ActionMailer::Previews::ClassMethods", "classes/ActionMailer/Previews/ClassMethods.html#method-i-register_preview_interceptors", "(*interceptors)", "<p>Register one or more Interceptors which will be called before mail is\npreviewed.\n"],
      ["register_task", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task", "(pattern, task)", ""],
      ["regular_class_path", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-regular_class_path", "()", ""],
      ["regular_update", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update", "(other_hash)", ""],
      ["regular_update", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update", "(other_hash)", ""],
      ["regular_writer", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer", "(key, value)", ""],
      ["regular_writer", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer", "(key, value)", ""],
      ["reject", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-reject", "()", ""],
      ["reject", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-reject", "(&block)", "<p>Returns a new instance of <code>ActionController::Parameters</code> with\nitems that the block evaluates to true removed. …\n"],
      ["reject", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reject", "(*args, &block)", ""],
      ["reject", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reject", "(*args, &block)", ""],
      ["reject", "ActiveSupport::OrderedHash", "classes/ActiveSupport/OrderedHash.html#method-i-reject", "(*args, &block)", ""],
      ["reject!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-reject-21", "(&block)", "<p>Removes items that the block evaluates to true and returns self.\n"],
      ["reject_unauthorized_connection", "ActionCable::Connection::Authorization", "classes/ActionCable/Connection/Authorization.html#method-i-reject_unauthorized_connection", "()", "<p>Closes the WebSocket connection if it is open and returns a 404 “File not\nFound” response. …\n"],
      ["release_connection", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection", "(owner_thread = Thread.current)", "<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],
      ["release_savepoint", "ActiveRecord::ConnectionAdapters::Savepoints", "classes/ActiveRecord/ConnectionAdapters/Savepoints.html#method-i-release_savepoint", "(name = current_savepoint_name)", ""],
      ["release_unload_lock!", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-i-release_unload_lock-21", "()", "<p>Release the unload lock if it has been previously obtained\n"],
      ["reload", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-reload", "()", "<p>Reloads the collection from the database. Returns <code>self</code>.\nEquivalent to <code>collection(true)</code>.\n\n<pre><code>class Person &lt; ...</code></pre>\n"],
      ["reload", "ActiveRecord::AutosaveAssociation", "classes/ActiveRecord/AutosaveAssociation.html#method-i-reload", "(options = nil)", "<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],
      ["reload", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-reload", "(options = nil)", "<p>Reloads the record from the database.\n<p>This method finds the record by its primary key (which could be …\n"],
      ["reload", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-reload", "()", "<p>Forces reloading of relation.\n"],
      ["reload!", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-c-reload-21", "()", "<p>Initiate a manual reload\n"],
      ["reload!", "Rails::Application::RoutesReloader", "classes/Rails/Application/RoutesReloader.html#method-i-reload-21", "()", ""],
      ["reload!", "Rails::ConsoleMethods", "classes/Rails/ConsoleMethods.html#method-i-reload-21", "(print = true)", "<p>reloads the environment\n"],
      ["reload_routes!", "Rails::Application", "classes/Rails/Application.html#method-i-reload_routes-21", "()", "<p>Reload application routes regardless if they changed or not.\n"],
      ["remote_addr=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-remote_addr-3D", "(addr)", ""],
      ["remote_connections", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-remote_connections", "()", "<p>Gateway to RemoteConnections. See that class for details.\n"],
      ["remote_ip", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-remote_ip", "()", "<p>Returns the IP address of client as a <code>String</code>, usually set by\nthe RemoteIp middleware.\n"],
      ["remote_ip=", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-remote_ip-3D", "(remote_ip)", ""],
      ["remove", "ActionController::Renderers", "classes/ActionController/Renderers.html#method-c-remove", "(key)", "<p>This method is the opposite of add method.\n<p>To remove a csv renderer:\n\n<pre><code>ActionController::Renderers.remove(:csv)\n</code></pre>\n"],
      ["remove", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove", "(conn)", "<p>Remove a connection from the connection pool. The connection will remain\nopen and active but will no …\n"],
      ["remove", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove", "(*column_names)", "<p>Removes the column(s) from the table definition.\n\n<pre><code>t.remove(:qualification)\nt.remove(:qualification, :experience)\n</code></pre>\n"],
      ["remove", "String", "classes/String.html#method-i-remove", "(*patterns)", "<p>Returns a new string with all occurrences of the patterns removed.\n\n<pre><code>str = &quot;foo bar test&quot;\nstr.remove(&quot; test&quot;) ...</code></pre>\n"],
      ["remove!", "String", "classes/String.html#method-i-remove-21", "(*patterns)", "<p>Alters the string by removing all occurrences of the patterns.\n\n<pre><code>str = &quot;foo bar test&quot;\nstr.remove!(&quot; test&quot;, ...</code></pre>\n"],
      ["remove_belongs_to", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to", "(table_name, ref_name, foreign_key: false, polymorphic: false, **options)", ""],
      ["remove_belongs_to", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to", "(*args, **options)", ""],
      ["remove_channel", "ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-remove_channel", "(channel)", ""],
      ["remove_channel", "ActionCable::SubscriptionAdapter::Redis::Listener", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-remove_channel", "(channel)", ""],
      ["remove_channel", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-remove_channel", "(channel)", ""],
      ["remove_column", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column", "(table_name, column_name, type = nil, options = {})", "<p>Removes the column from the table definition.\n\n<pre><code>remove_column(:suppliers, :qualification)\n</code></pre>\n<p>The <code>type</code> and <code>options</code> …\n"],
      ["remove_column", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column", "(name)", "<p>remove the column <code>name</code> from the table.\n\n<pre><code>remove_column(:account_id)\n</code></pre>\n"],
      ["remove_columns", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns", "(table_name, *column_names)", "<p>Removes the given columns from the table definition.\n\n<pre><code>remove_columns(:suppliers, :qualification, :experience)\n</code></pre>\n"],
      ["remove_connection", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection", "(spec_name)", "<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],
      ["remove_connection", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-remove_connection", "(name = nil)", ""],
      ["remove_filters!", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21", "()", "<p>Removes all filters, but leaves in the silencers. Useful if you suddenly\nneed to see entire filepaths …\n"],
      ["remove_foreign_key", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_foreign_key", "(from_table, options_or_to_table = {})", "<p>Removes the given foreign key from the table. Any option parameters\nprovided will be used to re-add the …\n"],
      ["remove_hook_for", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-remove_hook_for", "(*names)", "<p>Remove a previously added hook.\n\n<pre><code>remove_hook_for :orm\n</code></pre>\n"],
      ["remove_index", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index", "(table_name, options = {})", "<p>Removes the given index from the table.\n<p>Removes the index on <code>branch_id</code> in the <code>accounts</code>\ntable if exactly …\n"],
      ["remove_index", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index", "(options = {})", "<p>Removes the given index from the table.\n\n<pre><code>t.remove_index(:branch_id)\nt.remove_index(column: [:branch_id, ...</code></pre>\n"],
      ["remove_possible_method", "Module", "classes/Module.html#method-i-remove_possible_method", "(method)", "<p>Removes the named method, if it exists.\n"],
      ["remove_possible_singleton_method", "Module", "classes/Module.html#method-i-remove_possible_singleton_method", "(method)", "<p>Removes the named singleton method, if it exists.\n"],
      ["remove_reference", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference", "(table_name, ref_name, foreign_key: false, polymorphic: false, **options)", "<p>Removes the reference(s). Also removes a <code>type</code> column if one\nexists. #remove_reference and #remove_belongs_to …\n"],
      ["remove_references", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references", "(*args, **options)", "<p>Removes a reference. Optionally removes a <code>type</code> column.\n\n<pre><code>t.remove_references(:user)\nt.remove_belongs_to(:supplier, ...</code></pre>\n"],
      ["remove_renderer", "ActionController", "classes/ActionController.html#method-c-remove_renderer", "(key)", "<p>See <code>Renderers.remove</code>\n"],
      ["remove_silencers!", "ActiveSupport::BacktraceCleaner", "classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21", "()", "<p>Removes all silencers, but leaves in the filters. Useful if your context of\ndebugging suddenly expands …\n"],
      ["remove_subscriber", "ActionCable::SubscriptionAdapter::SubscriberMap", "classes/ActionCable/SubscriptionAdapter/SubscriberMap.html#method-i-remove_subscriber", "(channel, subscriber)", ""],
      ["remove_timestamps", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps", "(table_name, options = {})", "<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table definition.\n\n<pre><code>remove_timestamps(:suppliers)\n</code></pre>\n"],
      ["remove_timestamps", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps", "(options = {})", "<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n\n<pre><code>t.remove_timestamps\n</code></pre>\n<p>See connection.remove_timestamps …\n"],
      ["rename", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename", "(column_name, new_column_name)", "<p>Renames a column.\n\n<pre><code>t.rename(:description, :name)\n</code></pre>\n<p>See connection.rename_column\n"],
      ["rename_column", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column", "(table_name, column_name, new_column_name)", "<p>Renames a column.\n\n<pre><code>rename_column(:suppliers, :description, :name)\n</code></pre>\n"],
      ["rename_index", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-rename_index", "(table_name, old_name, new_name)", ""],
      ["rename_index", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_index", "(table_name, old_name, new_name)", "<p>Renames an index of a table. Raises error if length of new index name is\ngreater than allowed limit. …\n"],
      ["rename_index", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index", "(table_name, old_name, new_name)", "<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to\n<code>index_users_on_last_name</code>:\n\n<pre><code>rename_index ...</code></pre>\n"],
      ["rename_index", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index", "(index_name, new_index_name)", "<p>Renames the given index on the table.\n\n<pre><code>t.rename_index(:user_id, :account_id)\n</code></pre>\n<p>See connection.rename_index …\n"],
      ["rename_key", "ActiveSupport::XmlMini", "classes/ActiveSupport/XmlMini.html#method-i-rename_key", "(key, options = {})", ""],
      ["rename_table", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-rename_table", "(table_name, new_name)", "<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],
      ["rename_table", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_table", "(table_name, new_name)", "<p>Renames a table. Also renames a table&#39;s primary key sequence if the\nsequence name exists and matches …\n"],
      ["rename_table", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table", "(table_name, new_name)", "<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],
      ["rename_table", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table", "(table_name, new_name)", "<p>Renames a table.\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],
      ["render", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-render", "(*args, &block)", "<p>Normalizes arguments, options and then delegates render_to_body and sticks\nthe result in <code>self.response_body</code> …\n"],
      ["render", "ActionController::Instrumentation", "classes/ActionController/Instrumentation.html#method-i-render", "(*args)", ""],
      ["render", "ActionController::Renderer", "classes/ActionController/Renderer.html#method-i-render", "(*args)", "<p>Render templates with any options from\nActionController::Base#render_to_string.\n"],
      ["render", "ActionDispatch::DebugExceptions::DebugView", "classes/ActionDispatch/DebugExceptions/DebugView.html#method-i-render", "(*)", ""],
      ["render", "ActionView::Helpers::RenderingHelper", "classes/ActionView/Helpers/RenderingHelper.html#method-i-render", "(options = {}, locals = {}, &block)", "<p>Returns the result of a render that&#39;s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> …\n"],
      ["render", "ActionView::PartialRenderer", "classes/ActionView/PartialRenderer.html#method-i-render", "(context, options, block)", ""],
      ["render", "ActionView::Renderer", "classes/ActionView/Renderer.html#method-i-render", "(context, options)", "<p>Main render entry point shared by Action View and Action Controller.\n"],
      ["render", "ActionView::Template", "classes/ActionView/Template.html#method-i-render", "(view, locals, buffer = nil, &block)", "<p>Render a template. If the template was not compiled yet, it is done exactly\nbefore rendering.\n<p>This method …\n"],
      ["render", "ActionView::TestCase::Behavior", "classes/ActionView/TestCase/Behavior.html#method-i-render", "(options = {}, local_assigns = {}, &block)", ""],
      ["render", "ActionView::TestCase::Behavior::Locals", "classes/ActionView/TestCase/Behavior/Locals.html#method-i-render", "(options = {}, local_assigns = {})", ""],
      ["render_body", "ActionView::Renderer", "classes/ActionView/Renderer.html#method-i-render_body", "(context, options)", "<p>Render but returns a valid Rack body. If fibers are defined, we return a\nstreaming body that renders …\n"],
      ["render_collection", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-render_collection", "(event)", ""],
      ["render_count", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-render_count", "(payload)", ""],
      ["render_partial", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-render_partial", "(event)", ""],
      ["render_template", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-render_template", "(event)", ""],
      ["render_to_body", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-render_to_body", "(options = {})", "<p>Performs the actual template rendering. :api: public\n"],
      ["render_to_body", "ActionController::ApiRendering", "classes/ActionController/ApiRendering.html#method-i-render_to_body", "(options = {})", ""],
      ["render_to_body", "ActionController::Renderers", "classes/ActionController/Renderers.html#method-i-render_to_body", "(options)", "<p>Called by <code>render</code> in <code>AbstractController::Rendering</code>\nwhich sets the return value as the <code>response_body</code>.\n<p>If …\n"],
      ["render_to_body", "ActionController::Rendering", "classes/ActionController/Rendering.html#method-i-render_to_body", "(options = {})", ""],
      ["render_to_body", "ActionView::Rendering", "classes/ActionView/Rendering.html#method-i-render_to_body", "(options = {})", ""],
      ["render_to_string", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-render_to_string", "(*args, &block)", "<p>Raw rendering of a template to a string.\n<p>It is similar to render, except that it does not set the\n<code>response_body</code> …\n"],
      ["render_to_string", "ActionController::Rendering", "classes/ActionController/Rendering.html#method-i-render_to_string", "(*)", "<p>Overwrite render_to_string because body can now be set to a Rack body.\n"],
      ["rendered_format", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-rendered_format", "()", "<p>Returns Content-Type of rendered content :api: public\n"],
      ["rendered_format", "ActionView::Rendering", "classes/ActionView/Rendering.html#method-i-rendered_format", "()", ""],
      ["rendered_views", "ActionView::TestCase::Behavior", "classes/ActionView/TestCase/Behavior.html#method-i-rendered_views", "()", ""],
      ["rendered_views", "ActionView::TestCase::Behavior::RenderedViewsCollection", "classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-rendered_views", "()", ""],
      ["reorder", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-reorder", "(*args)", "<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre><code>User.order(&#39;email DESC&#39;).reorder(&#39;id ...</code></pre>\n"],
      ["reorder_characters", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters", "(codepoints)", "<p>Re-order codepoints so the string becomes canonical.\n"],
      ["replace", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-replace", "(other_array)", "<p>Replaces this collection with <code>other_array</code>. This will perform a\ndiff and delete/add only records that …\n"],
      ["replace", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-replace", "(other_hash)", "<p>Replaces the contents of this hash with other_hash.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ &quot;c&quot; =&gt; ...</code></pre>\n"],
      ["replace", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-replace", "(other_hash)", "<p>Replaces the contents of this hash with other_hash.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ &quot;c&quot; =&gt; ...</code></pre>\n"],
      ["reqs", "ActionDispatch::Routing::RouteWrapper", "classes/ActionDispatch/Routing/RouteWrapper.html#method-i-reqs", "()", ""],
      ["request", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-i-request", "()", "<p>The request that initiated the WebSocket connection is available here. This\ngives access to the environment, …\n"],
      ["request", "ActionController::Base", "classes/ActionController/Base.html#method-i-request", "", "<p>Returns an ActionDispatch::Request instance that represents the current\nrequest.\n"],
      ["request_http_basic_authentication", "ActionController::HttpAuthentication::Basic::ControllerMethods", "classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication", "(realm = \"Application\", message = nil)", ""],
      ["request_http_digest_authentication", "ActionController::HttpAuthentication::Digest::ControllerMethods", "classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication", "(realm = \"Application\", message = nil)", "<p>Render output including the HTTP Digest authentication header\n"],
      ["request_http_token_authentication", "ActionController::HttpAuthentication::Token::ControllerMethods", "classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication", "(realm = \"Application\", message = nil)", ""],
      ["request_id", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-request_id", "()", "<p>Returns the unique request id, which is based on either the X-Request-Id\nheader that can be generated …\n"],
      ["request_method", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-request_method", "()", "<p>Returns the HTTP method that the application should see. In the case where\nthe method was overridden …\n"],
      ["request_method=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-request_method-3D", "(method)", ""],
      ["request_method_symbol", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-request_method_symbol", "()", "<p>Returns a symbol form of the #request_method\n"],
      ["request_parameters", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-request_parameters", "()", ""],
      ["request_parameters=", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-request_parameters-3D", "(params)", ""],
      ["request_uri=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-request_uri-3D", "(uri)", ""],
      ["require", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-require", "(key)", "<p>This method accepts both a single key and an array of keys.\n<p>When passed a single key, if it exists and …\n"],
      ["require_application_and_environment!", "Rails::Command::Actions", "classes/Rails/Command/Actions.html#method-i-require_application_and_environment-21", "()", ""],
      ["require_engine", "ActionView::Template::Handlers::Builder", "classes/ActionView/Template/Handlers/Builder.html#method-i-require_engine", "()", ""],
      ["require_unload_lock!", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-i-require_unload_lock-21", "()", "<p>Acquire the ActiveSupport::Dependencies::Interlock unload lock, ensuring it\nwill be released automatically …\n"],
      ["required", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-required", "(key)", "<p>Alias of #require.\n"],
      ["requires_reloading?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F", "()", "<p>Returns true if its required to reload the connection between requests for\ndevelopment mode.\n"],
      ["requires_reloading?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F", "()", ""],
      ["rescue_from", "ActiveSupport::Rescuable::ClassMethods", "classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from", "(*klasses, with: nil, &block)", "<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or …\n"],
      ["rescue_template", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-rescue_template", "()", ""],
      ["rescue_with_handler", "ActiveSupport::Rescuable", "classes/ActiveSupport/Rescuable.html#method-i-rescue_with_handler", "(exception)", "<p>Delegates to the class method, but uses the instance as the subject for\nrescue_from handlers (method …\n"],
      ["rescue_with_handler", "ActiveSupport::Rescuable::ClassMethods", "classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_with_handler", "(exception, object: self, visited_exceptions: [])", "<p>Matches an exception to a handler based on the exception class.\n<p>If no handler matches the exception, check …\n"],
      ["reset", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-reset", "()", "<p>Unloads the association. Returns <code>self</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets ...</code></pre>\n"],
      ["reset", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-reset", "()", ""],
      ["reset!", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-reset-21", "()", "<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],
      ["reset!", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-reset-21", "()", "<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],
      ["reset!", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21", "()", "<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],
      ["reset!", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21", "()", ""],
      ["reset!", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21", "()", ""],
      ["reset_body!", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-reset_body-21", "()", ""],
      ["reset_cache", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-c-reset_cache", "()", ""],
      ["reset_callbacks", "ActiveSupport::Callbacks::ClassMethods", "classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks", "(name)", "<p>Remove all set callbacks for the given event.\n"],
      ["reset_column_information", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information", "()", "<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],
      ["reset_counters", "ActiveRecord::CounterCache::ClassMethods", "classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters", "(id, *counters, touch: nil)", "<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],
      ["reset_cycle", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle", "(name = \"default\")", "<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],
      ["reset_locking_column", "ActiveRecord::Locking::Optimistic::ClassMethods", "classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column", "()", "<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],
      ["reset_runtime", "ActiveRecord::LogSubscriber", "classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime", "()", ""],
      ["reset_session", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-reset_session", "()", ""],
      ["reset_session", "ActionDispatch::Flash::RequestMethods", "classes/ActionDispatch/Flash/RequestMethods.html#method-i-reset_session", "()", ""],
      ["reset_session", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-reset_session", "()", "<p>TODO This should be broken apart into AD::Request::Session and probably be\nincluded by the session middleware. …\n"],
      ["resolve", "ActionDispatch::RailsEntityStore", "classes/ActionDispatch/RailsEntityStore.html#method-c-resolve", "(uri)", ""],
      ["resolve", "ActionDispatch::RailsMetaStore", "classes/ActionDispatch/RailsMetaStore.html#method-c-resolve", "(uri)", ""],
      ["resolve", "ActionDispatch::Routing::Mapper::CustomUrls", "classes/ActionDispatch/Routing/Mapper/CustomUrls.html#method-i-resolve", "(*args, &block)", "<p>Define custom polymorphic mappings of models to urls. This alters the\nbehavior of `polymorphic_url` and …\n"],
      ["resource", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource", "(*resources, &block)", "<p>Sometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, …\n"],
      ["resources", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources", "(*resources, &block)", "<p>In Rails, a resourceful route provides a mapping between HTTP verbs and\nURLs and controller actions. …\n"],
      ["resources_path_names", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names", "(options)", ""],
      ["respond_to", "ActionController::MimeResponds", "classes/ActionController/MimeResponds.html#method-i-respond_to", "(*mimes)", "<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],
      ["respond_to?", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-i-respond_to-3F", "(method, include_private = false)", ""],
      ["respond_to?", "ActiveModel::AttributeMethods", "classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F", "(method, include_private_methods = false)", ""],
      ["respond_to?", "ActiveRecord::AttributeMethods", "classes/ActiveRecord/AttributeMethods.html#method-i-respond_to-3F", "(name, include_private = false)", "<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],
      ["respond_to?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-respond_to-3F", "(sym, include_priv = false)", "<p>respond_to_missing? is not called in some cases, such as when type\nconversion is performed with Kernel#String …\n"],
      ["respond_to?", "Rails::Railtie::Configurable::ClassMethods", "classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-respond_to-3F", "(*args)", ""],
      ["respond_to?", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F", "(name, include_private = false)", ""],
      ["respond_to_missing?", "ActionDispatch::Integration::Runner", "classes/ActionDispatch/Integration/Runner.html#method-i-respond_to_missing-3F", "(method, include_private = false)", ""],
      ["respond_to_missing?", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-respond_to_missing-3F", "(method, include_private)", "<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],
      ["respond_to_missing?", "ActiveSupport::OrderedOptions", "classes/ActiveSupport/OrderedOptions.html#method-i-respond_to_missing-3F", "(name, include_private)", ""],
      ["respond_to_missing?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-respond_to_missing-3F", "(sym, include_priv)", "<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],
      ["respond_to_missing?", "Mime::NullType", "classes/Mime/NullType.html#method-i-respond_to_missing-3F", "(method, include_private = false)", ""],
      ["respond_to_missing?", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-respond_to_missing-3F", "(*args)", ""],
      ["respond_to_without_attributes?", "ActiveModel::AttributeMethods", "classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F", "(method, include_private_methods = false)", "<p>A <code>Person</code> instance with a <code>name</code> attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code> …\n"],
      ["response", "ActionController::Base", "classes/ActionController/Base.html#method-i-response", "", "<p>Returns an ActionDispatch::Response that represents the current response.\n"],
      ["response", "ActionController::MimeResponds::Collector", "classes/ActionController/MimeResponds/Collector.html#method-i-response", "()", ""],
      ["response_body=", "ActionController::Live", "classes/ActionController/Live.html#method-i-response_body-3D", "(body)", ""],
      ["response_body=", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-response_body-3D", "(body)", ""],
      ["response_code", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-response_code", "()", "<p>The response code of the request.\n"],
      ["response_parser", "ActionDispatch::RequestEncoder::IdentityEncoder", "classes/ActionDispatch/RequestEncoder/IdentityEncoder.html#method-i-response_parser", "()", ""],
      ["restart", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-restart", "()", ""],
      ["restore_attributes", "ActiveModel::Dirty", "classes/ActiveModel/Dirty.html#method-i-restore_attributes", "(attributes = changed)", "<p>Restore all previous data of the provided attributes.\n"],
      ["result", "ActionDispatch::Routing::ConsoleFormatter", "classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-result", "()", ""],
      ["result", "ActionDispatch::Routing::HtmlTableFormatter", "classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-result", "()", ""],
      ["retrieve_connection", "ActiveRecord::ConnectionHandling", "classes/ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection", "()", ""],
      ["retrieve_connection_pool", "ActiveRecord::ConnectionAdapters::ConnectionHandler", "classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool", "(spec_name)", "<p>Retrieving the connection pool happens a lot, so we cache it in\n@owner_to_pool. This makes retrieving …\n"],
      ["retry_job", "ActiveJob::Exceptions", "classes/ActiveJob/Exceptions.html#method-i-retry_job", "(options = {})", "<p>Reschedules the job to be re-executed. This is useful in combination with\nthe <code>rescue_from</code> option. When …\n"],
      ["retry_on", "ActiveJob::Exceptions::ClassMethods", "classes/ActiveJob/Exceptions/ClassMethods.html#method-i-retry_on", "(exception, wait: 3.seconds, attempts: 5, queue: nil, priority: nil)", "<p>Catch the exception and reschedule job for re-execution after so many\nseconds, for a specific number …\n"],
      ["reverse", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-reverse", "()", "<p>Reverses all characters in the string.\n\n<pre><code>&#39;Café&#39;.mb_chars.reverse.to_s # =&gt; &#39;éfaC&#39;\n</code></pre>\n"],
      ["reverse_merge", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-reverse_merge", "(other_hash)", "<p>Returns a new <code>ActionController::Parameters</code> with all keys from\ncurrent hash merged into <code>other_hash</code>.\n"],
      ["reverse_merge", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge", "(other_hash)", "<p>Like <code>merge</code> but the other way around: Merges the receiver into\nthe argument and returns a new hash with …\n"],
      ["reverse_merge", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge", "(other_hash)", "<p>Like <code>merge</code> but the other way around: Merges the receiver into\nthe argument and returns a new hash with …\n"],
      ["reverse_merge", "Hash", "classes/Hash.html#method-i-reverse_merge", "(other_hash)", "<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre><code>options = options.reverse_merge(size: 25, velocity: 10)\n</code></pre>\n"],
      ["reverse_merge!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-reverse_merge-21", "(other_hash)", "<p>Returns current <code>ActionController::Parameters</code> instance with\ncurrent hash merged into <code>other_hash</code>.\n"],
      ["reverse_merge!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21", "(other_hash)", "<p>Same semantics as <code>reverse_merge</code> but modifies the receiver\nin-place.\n"],
      ["reverse_merge!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21", "(other_hash)", "<p>Same semantics as <code>reverse_merge</code> but modifies the receiver\nin-place.\n"],
      ["reverse_merge!", "Hash", "classes/Hash.html#method-i-reverse_merge-21", "(other_hash)", "<p>Destructive <code>reverse_merge</code>.\n"],
      ["reverse_order", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-reverse_order", "()", "<p>Reverse the existing order clause on the relation.\n\n<pre><code>User.order(&#39;name ASC&#39;).reverse_order # generated SQL ...\n</code></pre>\n"],
      ["reverse_update", "Hash", "classes/Hash.html#method-i-reverse_update", "(other_hash)", ""],
      ["reversible", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-reversible", "()", "<p>Used to specify an operation that can be run in one direction or another.\nCall the methods <code>up</code> and <code>down</code> …\n"],
      ["revert", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-revert", "(*migration_classes)", "<p>Reverses the migration commands for the given block and the given\nmigrations.\n<p>The following migration …\n"],
      ["revert", "ActiveRecord::Migration::CommandRecorder", "classes/ActiveRecord/Migration/CommandRecorder.html#method-i-revert", "()", "<p>While executing the given block, the recorded will be in reverting mode.\nAll commands recorded will end …\n"],
      ["reverting?", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-reverting-3F", "()", ""],
      ["rewhere", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-rewhere", "(conditions)", "<p>Allows you to change a previously set where condition for a given\nattribute, instead of appending to …\n"],
      ["rewind", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-rewind", "()", "<p>Shortcut for <code>tempfile.rewind</code>.\n"],
      ["rewrite_param_values", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-rewrite_param_values", "(array_params)", "<p>This removes the <code>&quot;</code> characters wrapping the value.\n"],
      ["rfc2822", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-rfc2822", "()", "<p>Returns a string of the object&#39;s date and time in the RFC 2822 standard\nformat.\n\n<pre><code>Time.zone.now.rfc2822 ...</code></pre>\n"],
      ["rfc3339", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-rfc3339", "(fraction_digits = 0)", ""],
      ["rfc3339", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-rfc3339", "(str)", "<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from an RFC 3339 string. …\n"],
      ["rfc3339", "Time", "classes/Time.html#method-c-rfc3339", "(str)", "<p>Creates a <code>Time</code> instance from an RFC 3339 string.\n\n<pre><code>Time.rfc3339(&#39;1999-12-31T14:00:00-10:00&#39;) # =&gt; 2000-01-01 ...\n</code></pre>\n"],
      ["rfc822", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-rfc822", "()", ""],
      ["rollback", "ActiveRecord::ConnectionAdapters::RealTransaction", "classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-rollback", "()", ""],
      ["rollback", "ActiveRecord::ConnectionAdapters::SavepointTransaction", "classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-rollback", "()", ""],
      ["rollback_db_transaction", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction", "()", "<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],
      ["rolledback?", "ActiveRecord::ConnectionAdapters::TransactionState", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F", "()", ""],
      ["root", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-root", "(path, options = {})", "<p>You can specify what Rails should route “/” to with the root method:\n\n<pre><code>root to: &#39;pages#main&#39;\n</code></pre>\n<p>For …\n"],
      ["root", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-root", "()", ""],
      ["root", "Rails", "classes/Rails.html#method-c-root", "()", "<p>Returns a Pathname object of the current Rails project, otherwise it\nreturns <code>nil</code> if there is no project: …\n"],
      ["root", "Rails::Command", "classes/Rails/Command.html#method-c-root", "()", "<p>Returns the root of the Rails engine or app running the command.\n"],
      ["root=", "Rails::Engine::Configuration", "classes/Rails/Engine/Configuration.html#method-i-root-3D", "(value)", ""],
      ["route", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-route", "(routing_code)", "<p>Make an entry in Rails routing file <code>config/routes.rb</code>\n\n<pre><code>route &quot;root &#39;welcome#index&#39;&quot;\n</code></pre>\n"],
      ["route_key", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-c-route_key", "(record_or_class)", "<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],
      ["route_url", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-route_url", "()", ""],
      ["routes", "Rails::Engine", "classes/Rails/Engine.html#method-i-routes", "()", "<p>Defines the routes for this engine. If a block is given to routes, it is\nappended to the engine.\n"],
      ["run", "ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run", "()", ""],
      ["run", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-run", "(*migration_classes)", "<p>Runs the given migration classes. Last argument can specify options:\n<p>:direction (default is :up)\n<p>:revert …\n"],
      ["run", "ActiveRecord::QueryCache", "classes/ActiveRecord/QueryCache.html#method-c-run", "()", ""],
      ["run", "ActiveSupport::Testing::Isolation", "classes/ActiveSupport/Testing/Isolation.html#method-i-run", "()", ""],
      ["run", "Rails::Application::Finisher::InterlockHook", "classes/Rails/Application/Finisher/InterlockHook.html#method-c-run", "()", ""],
      ["run", "Rails::Application::Finisher::MutexHook", "classes/Rails/Application/Finisher/MutexHook.html#method-i-run", "()", ""],
      ["run", "Rails::Engine::Updater", "classes/Rails/Engine/Updater.html#method-c-run", "(action)", ""],
      ["run", "Rails::Initializable::Initializer", "classes/Rails/Initializable/Initializer.html#method-i-run", "(*args)", ""],
      ["run!", "ActiveSupport::ExecutionWrapper", "classes/ActiveSupport/ExecutionWrapper.html#method-c-run-21", "()", "<p>Run this execution.\n<p>Returns an instance, whose <code>complete!</code> method\n<strong>must</strong> be invoked after the work has been …\n"],
      ["run_callbacks", "ActiveSupport::Callbacks", "classes/ActiveSupport/Callbacks.html#method-i-run_callbacks", "(kind)", "<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],
      ["run_generator", "Rails::Generators::Testing::Behaviour", "classes/Rails/Generators/Testing/Behaviour.html#method-i-run_generator", "(args = default_arguments, config = {})", "<p>Runs the generator configured for this class. The first argument is an\narray like command line arguments: …\n"],
      ["run_in_isolation", "ActiveSupport::Testing::Isolation::Forking", "classes/ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation", "(&blk)", ""],
      ["run_in_isolation", "ActiveSupport::Testing::Isolation::Subprocess", "classes/ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation", "(&blk)", "<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],
      ["run_in_transaction?", "ActiveRecord::TestFixtures", "classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F", "()", ""],
      ["run_initializers", "Rails::Initializable", "classes/Rails/Initializable.html#method-i-run_initializers", "(group = :default, *args)", ""],
      ["run_interlock", "ActiveSupport::Dependencies", "classes/ActiveSupport/Dependencies.html#method-c-run_interlock", "()", "<p>Execute the supplied block without interference from any concurrent loads.\n"],
      ["run_load_hooks", "ActiveSupport::LazyLoadHooks", "classes/ActiveSupport/LazyLoadHooks.html#method-i-run_load_hooks", "(name, base = Object)", ""],
      ["runner", "Rails::Application", "classes/Rails/Application.html#method-i-runner", "(&blk)", "<p>Sends any runner called in the instance of a new application up to the\n<code>runner</code> method defined in Rails::Railtie …\n"],
      ["runner", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-runner", "(&blk)", ""],
      ["running", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-running", "()", ""],
      ["runtime", "ActiveRecord::LogSubscriber", "classes/ActiveRecord/LogSubscriber.html#method-c-runtime", "()", ""],
      ["runtime=", "ActiveRecord::LogSubscriber", "classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D", "(value)", ""],
      ["safe_concat", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-safe_concat", "(string)", ""],
      ["safe_concat", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-safe_concat", "(value)", ""],
      ["safe_constantize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-safe_constantize", "(camel_cased_word)", "<p>Tries to find a constant with the name specified in the argument string.\n\n<pre><code>safe_constantize(&#39;Module&#39;)   ...</code></pre>\n"],
      ["safe_constantize", "String", "classes/String.html#method-i-safe_constantize", "()", "<p><code>safe_constantize</code> tries to find a declared constant with the\nname specified in the string. It returns …\n"],
      ["safe_get", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-safe_get", "(key)", ""],
      ["safe_join", "ActionView::Helpers::OutputSafetyHelper", "classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join", "(array, sep = $,)", "<p>This method returns an HTML safe string similar to what\n<code>Array#join</code> would return. The array is flattened, …\n"],
      ["sandbox?", "Rails::Console", "classes/Rails/Console.html#method-i-sandbox-3F", "()", ""],
      ["sanitize", "ActionView::Helpers::SanitizeHelper", "classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize", "(html, options = {})", "<p>Sanitizes HTML input, stripping all tags and attributes that aren&#39;t\nwhitelisted.\n<p>It also strips href/src …\n"],
      ["sanitize_css", "ActionView::Helpers::SanitizeHelper", "classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css", "(style)", "<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],
      ["sanitize_sql_array", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array", "(ary)", "<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],
      ["sanitize_sql_for_assignment", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment", "(assignments, default_table_name = table_name)", "<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],
      ["sanitize_sql_for_conditions", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions", "(condition)", "<p>Accepts an array or string of SQL conditions and sanitizes them into a\nvalid SQL fragment for a WHERE …\n"],
      ["sanitize_sql_for_order", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_order", "(condition)", "<p>Accepts an array, or string of SQL conditions and sanitizes them into a\nvalid SQL fragment for an ORDER …\n"],
      ["sanitize_sql_hash_for_assignment", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment", "(attrs, table)", "<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre><code>sanitize_sql_hash_for_assignment({ ...</code></pre>\n"],
      ["sanitize_sql_like", "ActiveRecord::Sanitization::ClassMethods", "classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_like", "(string, escape_character = \"\\\\\")", "<p>Sanitizes a <code>string</code> so that it is safe to use within an SQL\nLIKE statement. This method uses <code>escape_character</code> …\n"],
      ["save", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-save", "(*args, &block)", "<p>Saves the model.\n<p>If the model is new, a record gets created in the database, otherwise the\nexisting record …\n"],
      ["save", "ActiveRecord::Validations", "classes/ActiveRecord/Validations.html#method-i-save", "(options = {})", "<p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular ActiveRecord::Base#save …\n"],
      ["save", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-i-save", "()", "<p>POST create\n"],
      ["save!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-save-21", "(*args, &block)", "<p>Saves the model.\n<p>If the model is new, a record gets created in the database, otherwise the\nexisting record …\n"],
      ["save!", "ActiveRecord::Validations", "classes/ActiveRecord/Validations.html#method-i-save-21", "(options = {})", "<p>Attempts to save the record just like ActiveRecord::Base#save but will\nraise an ActiveRecord::RecordInvalid …\n"],
      ["say", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-say", "(message, subitem = false)", ""],
      ["say_with_time", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-say_with_time", "(message)", ""],
      ["schema_cache=", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D", "(cache)", ""],
      ["schema_creation", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_creation", "()", ""],
      ["schema_exists?", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_exists-3F", "(name)", "<p>Returns true if schema exists.\n"],
      ["schema_file", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-schema_file", "(format = ActiveRecord::Base.schema_format)", ""],
      ["schema_migrations_table_name", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-schema_migrations_table_name", "", "<p>The name of the schema migrations table. By default, the value is\n<code>&quot;schema_migrations&quot;</code>.\n"],
      ["schema_migrations_table_name=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-schema_migrations_table_name-3D", "", "<p>Sets the name of the schema migrations table.\n"],
      ["schema_names", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_names", "()", "<p>Returns an array of schema names.\n"],
      ["schema_search_path", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path", "()", "<p>Returns the active schema search path.\n"],
      ["schema_search_path=", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path-3D", "(schema_csv)", "<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],
      ["scope", "ActionDispatch::Routing::Mapper::Scoping", "classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope", "(*args)", "<p>Scopes a set of routes to the given default options.\n<p>Take the following route definition as an example: …\n"],
      ["scope", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scope", "()", "<p>Returns a <code>Relation</code> object for the records in this association\n"],
      ["scope", "ActiveRecord::Scoping::Named::ClassMethods", "classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope", "(name, body, &block)", "<p>Adds a class method for retrieving and querying objects. The method is\nintended to return an ActiveRecord::Relation …\n"],
      ["scope_for", "ActiveRecord::Reflection::MacroReflection", "classes/ActiveRecord/Reflection/MacroReflection.html#method-i-scope_for", "(klass)", ""],
      ["scope_for_create", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-scope_for_create", "()", ""],
      ["scoping", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-scoping", "()", "<p>Scope all queries to the current scope.\n\n<pre><code>Comment.where(post_id: 1).scoping do\n  Comment.first\nend\n# =&gt; ...\n</code></pre>\n"],
      ["search_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-search_field", "(object_name, method, options = {})", "<p>Returns an input of type “search” for accessing a specified attribute\n(identified by <code>method</code> …\n"],
      ["search_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],
      ["sec_fraction", "Time", "classes/Time.html#method-i-sec_fraction", "()", "<p>Returns the fraction of a second as a <code>Rational</code>\n\n<pre><code>Time.new(2012, 8, 29, 0, 0, 0.5).sec_fraction # =&gt; (1/2)\n</code></pre>\n"],
      ["second", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-second", "", "<p>Same as #first except returns only the second record.\n"],
      ["second", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-second", "()", "<p>Find the second record. If no order is defined it will order by primary\nkey.\n\n<pre><code>Person.second # returns the ...\n</code></pre>\n"],
      ["second", "Array", "classes/Array.html#method-i-second", "()", "<p>Equal to <code>self[1]</code>.\n\n<pre><code>%w( a b c d e ).second # =&gt; &quot;b&quot;\n</code></pre>\n"],
      ["second", "Numeric", "classes/Numeric.html#method-i-second", "()", ""],
      ["second!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-second-21", "()", "<p>Same as #second but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],
      ["second_to_last", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-second_to_last", "", "<p>Same as #first except returns only the second-to-last record.\n"],
      ["second_to_last", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-second_to_last", "()", "<p>Find the second-to-last record. If no order is defined it will order by\nprimary key.\n\n<pre><code>Person.second_to_last ...</code></pre>\n"],
      ["second_to_last", "Array", "classes/Array.html#method-i-second_to_last", "()", "<p>Equal to <code>self[-2]</code>.\n\n<pre><code>%w( a b c d e ).second_to_last # =&gt; &quot;d&quot;\n</code></pre>\n"],
      ["second_to_last!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-second_to_last-21", "()", "<p>Same as #second_to_last but raises ActiveRecord::RecordNotFound if no\nrecord is found.\n"],
      ["seconds", "Numeric", "classes/Numeric.html#method-i-seconds", "()", "<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],
      ["seconds_since_midnight", "DateTime", "classes/DateTime.html#method-i-seconds_since_midnight", "()", "<p>Returns the number of seconds since 00:00:00.\n\n<pre><code>DateTime.new(2012, 8, 29,  0,  0,  0).seconds_since_midnight ...</code></pre>\n"],
      ["seconds_since_midnight", "Time", "classes/Time.html#method-i-seconds_since_midnight", "()", "<p>Returns the number of seconds since 00:00:00.\n\n<pre><code>Time.new(2012, 8, 29,  0,  0,  0).seconds_since_midnight ...</code></pre>\n"],
      ["seconds_to_utc_offset", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset", "(seconds, colon = true)", "<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],
      ["seconds_until_end_of_day", "DateTime", "classes/DateTime.html#method-i-seconds_until_end_of_day", "()", "<p>Returns the number of seconds until 23:59:59.\n\n<pre><code>DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...</code></pre>\n"],
      ["seconds_until_end_of_day", "Time", "classes/Time.html#method-i-seconds_until_end_of_day", "()", "<p>Returns the number of seconds until 23:59:59.\n\n<pre><code>Time.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...</code></pre>\n"],
      ["secret_token", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-secret_token", "(request)", ""],
      ["secrets", "Rails::Application", "classes/Rails/Application.html#method-i-secrets", "()", "<p>Returns secrets added to config/secrets.yml.\n<p>Example:\n\n<pre><code>development:\n  secret_key_base: 836fa3665997a860728bcb9e9a1e704d427cfc920e79d847d79c8a9a907b9e965defa4154b2b86bdec6930adbe33f21364523a6f6ce363865724549fdfc08553 ...</code></pre>\n"],
      ["section", "ActionDispatch::Routing::ConsoleFormatter", "classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-section", "(routes)", ""],
      ["section", "ActionDispatch::Routing::HtmlTableFormatter", "classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section", "(routes)", ""],
      ["section_title", "ActionDispatch::Routing::ConsoleFormatter", "classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-section_title", "(title)", ""],
      ["section_title", "ActionDispatch::Routing::HtmlTableFormatter", "classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section_title", "(title)", ""],
      ["secure_compare", "ActiveSupport::SecurityUtils", "classes/ActiveSupport/SecurityUtils.html#method-c-secure_compare", "(a, b)", "<p>Constant time string comparison.\n<p>The values compared should be of fixed length, such as strings that have …\n"],
      ["seed_loader", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-seed_loader", "()", ""],
      ["select", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-select", "(&block)", "<p>Returns a new instance of <code>ActionController::Parameters</code> with\nonly items that the block evaluates to true. …\n"],
      ["select", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-select", "(method, choices = nil, options = {}, html_options = {}, &block)", "<p>Wraps ActionView::Helpers::FormOptionsHelper#select for form builders:\n\n<pre><code>&lt;%= form_for @post do |f| %&gt;\n  ...</code></pre>\n"],
      ["select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select", "(object, method, choices = nil, options = {}, html_options = {}, &block)", "<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],
      ["select", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-select", "", "<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the\nresult set.\n\n<pre><code>class Person &lt; ...</code></pre>\n"],
      ["select", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-select", "(*fields)", "<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like +Array#select+.\n\n<pre><code>Model.all.select ...</code></pre>\n"],
      ["select", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-select", "(*args, &block)", ""],
      ["select", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-select", "(*args, &block)", ""],
      ["select", "ActiveSupport::OrderedHash", "classes/ActiveSupport/OrderedHash.html#method-i-select", "(*args, &block)", ""],
      ["select!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-select-21", "(&block)", "<p>Equivalent to Hash#keep_if, but returns <code>nil</code> if no changes were\nmade.\n"],
      ["select_all", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all", "(arel, name = nil, binds = [], preparable: nil)", "<p>Returns an ActiveRecord::Result instance.\n"],
      ["select_all", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all", "(arel, name = nil, binds = [], preparable: nil)", ""],
      ["select_date", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_date", "(date = Date.current, options = {}, html_options = {})", "<p>Returns a set of HTML select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It&#39;s …\n"],
      ["select_datetime", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime", "(datetime = Time.current, options = {}, html_options = {})", "<p>Returns a set of HTML select-tags (one for year, month, day, hour, minute,\nand second) pre-selected with …\n"],
      ["select_day", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_day", "(date, options = {}, html_options = {})", "<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],
      ["select_hour", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_hour", "(datetime, options = {}, html_options = {})", "<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],
      ["select_minute", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_minute", "(datetime, options = {}, html_options = {})", "<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],
      ["select_month", "ActionView::Helpers", "classes/ActionView/Helpers.html#method-i-select_month", "()", ""],
      ["select_month", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_month", "(date, options = {}, html_options = {})", "<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],
      ["select_one", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one", "(arel, name = nil, binds = [])", "<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],
      ["select_rows", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows", "(arel, name = nil, binds = [])", "<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],
      ["select_second", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_second", "(datetime, options = {}, html_options = {})", "<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],
      ["select_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag", "(name, option_tags = nil, options = {})", "<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],
      ["select_time", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_time", "(datetime = Time.current, options = {}, html_options = {})", "<p>Returns a set of HTML select-tags (one for hour and minute). You can set\n<code>:time_separator</code> key to format …\n"],
      ["select_value", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value", "(arel, name = nil, binds = [])", "<p>Returns a single value from a record\n"],
      ["select_values", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values", "(arel, name = nil, binds = [])", "<p>Returns an array of the values of the first column in a select:\n\n<pre><code>select_values(&quot;SELECT id FROM companies ...</code></pre>\n"],
      ["select_year", "ActionView::Helpers", "classes/ActionView/Helpers.html#method-i-select_year", "()", ""],
      ["select_year", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-select_year", "(date, options = {}, html_options = {})", "<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],
      ["send_async", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-i-send_async", "(method, *arguments)", "<p>Invoke a method on the connection asynchronously through the pool of thread\nworkers.\n"],
      ["send_data", "ActionController::DataStreaming", "classes/ActionController/DataStreaming.html#method-i-send_data", "(data, options = {})", "<p>Sends the given binary data to the browser. This method is similar to\n<code>render plain: data</code>, but also allows …\n"],
      ["send_data", "ActionController::Instrumentation", "classes/ActionController/Instrumentation.html#method-i-send_data", "(data, options = {})", ""],
      ["send_data", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-send_data", "(event)", ""],
      ["send_file", "ActionController::DataStreaming", "classes/ActionController/DataStreaming.html#method-i-send_file", "(path, options = {})", "<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],
      ["send_file", "ActionController::Instrumentation", "classes/ActionController/Instrumentation.html#method-i-send_file", "(path, options = {})", ""],
      ["send_file", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-send_file", "(event)", ""],
      ["send_file", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-send_file", "(path)", "<p>Send the file stored at <code>path</code> as the response body.\n"],
      ["sending!", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-sending-21", "()", ""],
      ["sending?", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-sending-3F", "()", ""],
      ["sending_file=", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-sending_file-3D", "(v)", ""],
      ["sent!", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-sent-21", "()", ""],
      ["sent?", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-sent-3F", "()", ""],
      ["sequence_name", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name", "()", ""],
      ["sequence_name=", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D", "(value)", "<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is <code>nil</code> …\n"],
      ["serial", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-serial", "(*args, **options)", ""],
      ["serial_sequence", "ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-serial_sequence", "(table, column)", ""],
      ["serializable_hash", "ActiveModel::Serialization", "classes/ActiveModel/Serialization.html#method-i-serializable_hash", "(options = nil)", "<p>Returns a serialized hash of your object.\n\n<pre><code>class Person\n  include ActiveModel::Serialization\n\n  attr_accessor ...</code></pre>\n"],
      ["serializable_hash", "ActiveRecord::Serialization", "classes/ActiveRecord/Serialization.html#method-i-serializable_hash", "(options = nil)", ""],
      ["serialize", "ActiveJob::Core", "classes/ActiveJob/Core.html#method-i-serialize", "()", "<p>Returns a hash with the job data that can safely be passed to the queueing\nadapter.\n"],
      ["serialize", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-serialize", "(value)", "<p>Casts a value from the ruby type to a type that the database knows how to\nunderstand. The returned value …\n"],
      ["serialize", "ActiveModel::Type::Value", "classes/ActiveModel/Type/Value.html#method-i-serialize", "(value)", "<p>Casts a value from the ruby type to a type that the database knows how to\nunderstand. The returned value …\n"],
      ["serialize", "ActiveRecord::AttributeMethods::Serialization::ClassMethods", "classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize", "(attr_name, class_name_or_coder = Object)", "<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],
      ["serialize", "ActiveRecord::Type::Time", "classes/ActiveRecord/Type/Time.html#method-i-serialize", "(value)", ""],
      ["serve", "ActionDispatch::FileHandler", "classes/ActionDispatch/FileHandler.html#method-i-serve", "(request)", ""],
      ["server_port", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-server_port", "()", "<p>Returns the requested port, such as 8080, based on SERVER_PORT\n\n<pre><code>req = ActionDispatch::Request.new &#39;SERVER_PORT&#39; ...</code></pre>\n"],
      ["server_software", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-server_software", "()", "<p>Returns the lowercase name of the HTTP server software.\n"],
      ["session", "ActionDispatch::TestProcess", "classes/ActionDispatch/TestProcess.html#method-i-session", "()", ""],
      ["session_auth=", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D", "(user)", "<p>Set the authorized user for this session\n"],
      ["session_options=", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-session_options-3D", "(options)", ""],
      ["session_store", "Rails::Application::Configuration", "classes/Rails/Application/Configuration.html#method-i-session_store", "(new_session_store = nil, **options)", ""],
      ["set", "ActiveJob::Core::ClassMethods", "classes/ActiveJob/Core/ClassMethods.html#method-i-set", "(options = {})", "<p>Creates a job preconfigured with the given options. You can call\nperform_later with the job arguments …\n"],
      ["set_application_directory!", "Rails::Command::Actions", "classes/Rails/Command/Actions.html#method-i-set_application_directory-21", "()", "<p>Change to the application&#39;s path if there is no config.ru file in\ncurrent directory. This allows …\n"],
      ["set_callback", "ActiveSupport::Callbacks::ClassMethods", "classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback", "(name, *filter_list, &block)", "<p>Install a callback for the given event.\n\n<pre><code>set_callback :save, :before, :before_method\nset_callback :save, ...</code></pre>\n"],
      ["set_content_type", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-i-set_content_type", "(m, user_content_type, class_default)", "<p>Used by #mail to set the content type of the message.\n<p>It will use the given <code>user_content_type</code>, or multipart …\n"],
      ["set_defaults", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-set_defaults", "(target)", ""],
      ["set_defaults", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-set_defaults", "(target)", ""],
      ["set_environment", "Rails::Server", "classes/Rails/Server.html#method-i-set_environment", "()", ""],
      ["set_environment!", "Rails::Console", "classes/Rails/Console.html#method-i-set_environment-21", "()", ""],
      ["set_fixture_class", "ActiveRecord::TestFixtures::ClassMethods", "classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class", "(class_names = {})", "<p>Sets the model class for a fixture when the class name cannot be inferred\nfrom the fixture name.\n<p>Examples: …\n"],
      ["set_header", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-set_header", "(key, v)", ""],
      ["set_logger", "ActiveSupport::LogSubscriber::TestHelper", "classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger", "(logger)", "<p>Overwrite if you use another logger in your log subscriber.\n\n<pre><code>def logger\n  ActiveRecord::Base.logger = @logger ...</code></pre>\n"],
      ["set_member_mappings_for_resource", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-set_member_mappings_for_resource", "()", ""],
      ["set_migration_assigns!", "Rails::Generators::Migration", "classes/Rails/Generators/Migration.html#method-i-set_migration_assigns-21", "(destination)", ""],
      ["set_standard_conforming_strings", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings", "()", ""],
      ["set_state", "ActiveRecord::ConnectionAdapters::TransactionState", "classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-set_state", "(state)", ""],
      ["setup", "ActiveSupport::Testing::SetupAndTeardown::ClassMethods", "classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup", "(*args, &block)", "<p>Add a callback, which runs before <code>TestCase#setup</code>.\n"],
      ["setup_controller_request_and_response", "ActionController::TestCase::Behavior", "classes/ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response", "()", ""],
      ["setup_fixture_accessors", "ActiveRecord::TestFixtures::ClassMethods", "classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors", "(fixture_set_names = nil)", ""],
      ["setup_fixtures", "ActiveRecord::TestFixtures", "classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures", "(config = ActiveRecord::Base)", ""],
      ["setup_horo_variables", "Rails::API::Task", "classes/Rails/API/Task.html#method-i-setup_horo_variables", "()", ""],
      ["setup_with_controller", "ActionView::TestCase::Behavior", "classes/ActionView/TestCase/Behavior.html#method-i-setup_with_controller", "()", ""],
      ["shallow", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow", "()", ""],
      ["shallow?", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F", "()", ""],
      ["sharing", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-sharing", "()", "<p>Execute the supplied block while holding the Share lock.\n"],
      ["show_detailed_exceptions?", "ActionController::Rescue", "classes/ActionController/Rescue.html#method-i-show_detailed_exceptions-3F", "()", "<p>Override this method if you want to customize when detailed exceptions must\nbe shown. This method is …\n"],
      ["show_helper", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-show_helper", "()", ""],
      ["show_variable", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-show_variable", "(name)", "<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],
      ["shutdown", "ActionCable::SubscriptionAdapter::Base", "classes/ActionCable/SubscriptionAdapter/Base.html#method-i-shutdown", "()", ""],
      ["shutdown", "ActionCable::SubscriptionAdapter::PostgreSQL::Listener", "classes/ActionCable/SubscriptionAdapter/PostgreSQL/Listener.html#method-i-shutdown", "()", ""],
      ["shutdown", "ActionCable::SubscriptionAdapter::Redis::Listener", "classes/ActionCable/SubscriptionAdapter/Redis/Listener.html#method-i-shutdown", "()", ""],
      ["signed", "ActionDispatch::Cookies::ChainedCookieJars", "classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed", "()", "<p>Returns a jar that&#39;ll automatically generate a signed representation of\ncookie value and verify it …\n"],
      ["signed_or_encrypted", "ActionDispatch::Cookies::ChainedCookieJars", "classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed_or_encrypted", "()", "<p>Returns the <code>signed</code> or <code>encrypted</code> jar, preferring\n<code>encrypted</code> if <code>secret_key_base</code> is set. Used by\nActionDispatch::Session::CookieStore …\n"],
      ["silence", "ActiveSupport::Deprecation::Reporting", "classes/ActiveSupport/Deprecation/Reporting.html#method-i-silence", "()", "<p>Silence deprecation warnings within the block.\n\n<pre><code>ActiveSupport::Deprecation.warn(&#39;something broke!&#39;)\n# =&gt; ...\n</code></pre>\n"],
      ["silence", "LoggerSilence", "classes/LoggerSilence.html#method-i-silence", "(temporary_level = Logger::ERROR)", "<p>Silences the logger for the duration of the block.\n"],
      ["silence!", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-silence-21", "()", "<p>Silences the logger.\n"],
      ["silence_warnings", "Kernel", "classes/Kernel.html#method-i-silence_warnings", "()", "<p>Sets $VERBOSE to <code>nil</code> for the duration of the block and back to\nits original value afterwards.\n\n<pre><code>silence_warnings ...</code></pre>\n"],
      ["simple_format", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-simple_format", "(text, html_options = {}, options = {})", "<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],
      ["since", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-since", "(time = ::Time.current)", "<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],
      ["since", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-since", "(other)", ""],
      ["since", "Date", "classes/Date.html#method-i-since", "(seconds)", "<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],
      ["since", "DateTime", "classes/DateTime.html#method-i-since", "(seconds)", "<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time. Do not use …\n"],
      ["since", "Time", "classes/Time.html#method-i-since", "(seconds)", "<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],
      ["singular", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-c-singular", "(record_or_class)", "<p>Returns the singular class name of a record or class.\n\n<pre><code>ActiveModel::Naming.singular(post)             # ...\n</code></pre>\n"],
      ["singular", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-singular", "(rule, replacement)", "<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],
      ["singular_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-singular_name", "()", "<p>FIXME: We are avoiding to use alias because a bug on thor that make this\nmethod public and add it to …\n"],
      ["singular_route_key", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-c-singular_route_key", "(record_or_class)", "<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],
      ["singular_table_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-singular_table_name", "()", ""],
      ["singularize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-singularize", "(word, locale = :en)", "<p>The reverse of #pluralize, returns the singular form of a word in a string.\n<p>If passed an optional <code>locale</code> …\n"],
      ["singularize", "String", "classes/String.html#method-i-singularize", "(locale = :en)", "<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>If the optional parameter  …\n"],
      ["size", "ActionDispatch::Http::UploadedFile", "classes/ActionDispatch/Http/UploadedFile.html#method-i-size", "()", "<p>Shortcut for <code>tempfile.size</code>.\n"],
      ["size", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-size", "()", ""],
      ["size", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-size", "()", "<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, :blank, message: &quot;can&#39;t be blank&quot;)\nperson.errors.size ...</code></pre>\n"],
      ["size", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-size", "()", "<p>Returns the size of the collection. If the collection hasn&#39;t been\nloaded, it executes a <code>SELECT COUNT(*)</code> …\n"],
      ["size", "ActiveRecord::ConnectionAdapters::SchemaCache", "classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size", "()", ""],
      ["size", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-i-size", "()", ""],
      ["size", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-size", "()", "<p>Returns size of the records.\n"],
      ["skip_after_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_after_action", "", "<p>Skip a callback after actions. See _insert_callbacks for parameter details.\n"],
      ["skip_around_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_around_action", "", "<p>Skip a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["skip_before_action", "AbstractController::Callbacks::ClassMethods", "classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_before_action", "", "<p>Skip a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],
      ["skip_callback", "ActiveSupport::Callbacks::ClassMethods", "classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback", "(name, *filter_list, &block)", "<p>Skip a previously set callback. Like <code>set_callback</code>,\n<code>:if</code> or <code>:unless</code> options may be passed in order to\ncontrol …\n"],
      ["skip_parameter_encoding", "ActionController::ParameterEncoding::ClassMethods", "classes/ActionController/ParameterEncoding/ClassMethods.html#method-i-skip_parameter_encoding", "(action)", "<p>Specify that a given action&#39;s parameters should all be encoded as\nASCII-8BIT (it “skips” …\n"],
      ["skip_secrets_file", "Rails::Generators::EncryptedSecretsGenerator", "classes/Rails/Generators/EncryptedSecretsGenerator.html#method-c-skip_secrets_file", "()", ""],
      ["slice", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-slice", "(*keys)", "<p>Returns a new <code>ActionController::Parameters</code> instance that\nincludes only the given <code>keys</code>. If the given  …\n"],
      ["slice", "ActiveRecord::Core", "classes/ActiveRecord/Core.html#method-i-slice", "(*methods)", "<p>Returns a hash of the given methods with their names as keys and returned\nvalues as values.\n"],
      ["slice", "Hash", "classes/Hash.html#method-i-slice", "(*keys)", "<p>Slices a hash to include only the given keys. Returns a hash containing the\ngiven keys.\n\n<pre><code>{ a: 1, b: 2, ...</code></pre>\n"],
      ["slice!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-slice-21", "(*keys)", "<p>Returns current <code>ActionController::Parameters</code> instance which\ncontains only the given <code>keys</code>.\n"],
      ["slice!", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-slice-21", "(*args)", "<p>Works like <code>String#slice!</code>, but returns an instance of Chars, or\n<code>nil</code> if the string was not modified. The …\n"],
      ["slice!", "Hash", "classes/Hash.html#method-i-slice-21", "(*keys)", "<p>Replaces the hash with only the given keys. Returns a hash containing the\nremoved key/value pairs.\n\n<pre><code>{ a: ...</code></pre>\n"],
      ["sorted_groups", "Rails::Generators", "classes/Rails/Generators.html#method-c-sorted_groups", "()", ""],
      ["source_extracts", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-source_extracts", "()", ""],
      ["source_root", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-source_root", "(path = nil)", "<p>Returns the source root for this generator using default_source_root as\ndefault.\n"],
      ["split", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-split", "(*args)", "<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],
      ["split", "Array", "classes/Array.html#method-i-split", "(value = nil)", "<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],
      ["sql", "ActiveRecord::LogSubscriber", "classes/ActiveRecord/LogSubscriber.html#method-i-sql", "(event)", ""],
      ["sql_query_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length", "()", "<p>Returns the maximum length of an SQL query.\n"],
      ["sql_type", "ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLTypeMetadata.html#method-i-sql_type", "()", ""],
      ["squish", "String", "classes/String.html#method-i-squish", "()", "<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],
      ["squish!", "String", "classes/String.html#method-i-squish-21", "()", "<p>Performs a destructive squish. See String#squish.\n\n<pre><code>str = &quot; foo   bar    \\n   \\t   boo&quot;\nstr.squish!     ...</code></pre>\n"],
      ["ssl?", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-ssl-3F", "()", ""],
      ["stale?", "ActionController::ConditionalGet", "classes/ActionController/ConditionalGet.html#method-i-stale-3F", "(object = nil, **freshness_kwargs)", "<p>Sets the <code>etag</code> and/or <code>last_modified</code> on the\nresponse and checks it against the client request. If the request …\n"],
      ["stale_session_check!", "ActionDispatch::Session::StaleSessionCheck", "classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-stale_session_check-21", "()", ""],
      ["standard_port", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-standard_port", "()", "<p>Returns the standard port number for this request&#39;s protocol.\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; ...</code></pre>\n"],
      ["standard_port?", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-standard_port-3F", "()", "<p>Returns whether this request is using the standard port\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; ...</code></pre>\n"],
      ["start", "ActionView::LogSubscriber", "classes/ActionView/LogSubscriber.html#method-i-start", "(name, id, payload)", ""],
      ["start", "ActiveSupport::LogSubscriber", "classes/ActiveSupport/LogSubscriber.html#method-i-start", "(name, id, payload)", ""],
      ["start", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-start", "(name, id, payload)", ""],
      ["start", "ActiveSupport::Notifications::Instrumenter", "classes/ActiveSupport/Notifications/Instrumenter.html#method-i-start", "(name, payload)", "<p>Send a start notification with <code>name</code> and <code>payload</code>.\n"],
      ["start", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-i-start", "(name, id, payload)", ""],
      ["start", "Rails::Console", "classes/Rails/Console.html#method-c-start", "(*args)", ""],
      ["start", "Rails::Console", "classes/Rails/Console.html#method-i-start", "()", ""],
      ["start", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-c-start", "(*args)", ""],
      ["start", "Rails::DBConsole", "classes/Rails/DBConsole.html#method-i-start", "()", ""],
      ["start", "Rails::Server", "classes/Rails/Server.html#method-i-start", "()", ""],
      ["start_document", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document", "()", ""],
      ["start_element", "ActiveSupport::XmlMini_NokogiriSAX::HashBuilder", "classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element", "(name, attrs = [])", ""],
      ["start_exclusive", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-start_exclusive", "(purpose: nil, compatible: [], no_wait: false)", "<p>Returns false if <code>no_wait</code> is set and the lock is not\nimmediately available. Otherwise, returns true after …\n"],
      ["start_processing", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-start_processing", "(event)", ""],
      ["start_running", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-start_running", "()", ""],
      ["start_sharing", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-start_sharing", "()", ""],
      ["start_unloading", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-start_unloading", "()", ""],
      ["started_request_message", "Rails::Rack::Logger", "classes/Rails/Rack/Logger.html#method-i-started_request_message", "(request)", "<p>Started GET “/session/new” for 127.0.0.1 at 2012-09-26 14:51:42 -0700\n"],
      ["stat", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-stat", "()", "<p>Return connection pool&#39;s usage statistic Example:\n\n<pre><code>ActiveRecord::Base.connection_pool.stat # =&gt; { size: ...\n</code></pre>\n"],
      ["statistics", "ActionCable::Connection::Base", "classes/ActionCable/Connection/Base.html#method-i-statistics", "()", "<p>Return a basic hash of statistics for the connection keyed with\n<code>identifier</code>, <code>started_at</code>,\n<code>subscriptions</code> …\n"],
      ["stats", "ActiveSupport::Cache::MemCacheStore", "classes/ActiveSupport/Cache/MemCacheStore.html#method-i-stats", "()", "<p>Get the statistics from the memcached servers.\n"],
      ["status=", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-status-3D", "(status)", "<p>Sets the HTTP status code.\n"],
      ["status_code", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-status_code", "()", ""],
      ["status_code_for_exception", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-c-status_code_for_exception", "(class_name)", ""],
      ["status_message", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-status_message", "()", ""],
      ["sti_name", "ActiveRecord::Inheritance::ClassMethods", "classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name", "()", ""],
      ["stop", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-i-stop", "()", ""],
      ["stop_all_streams", "ActionCable::Channel::Streams", "classes/ActionCable/Channel/Streams.html#method-i-stop_all_streams", "()", "<p>Unsubscribes all streams associated with this channel from the pubsub\nqueue.\n"],
      ["stop_exclusive", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-stop_exclusive", "(compatible: [])", "<p>Relinquish the exclusive lock. Must only be called by the thread that\ncalled start_exclusive (and currently …\n"],
      ["stop_sharing", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-stop_sharing", "()", ""],
      ["store", "ActiveRecord::Store::ClassMethods", "classes/ActiveRecord/Store/ClassMethods.html#method-i-store", "(store_attribute, options = {})", ""],
      ["store", "ActiveSupport::Dependencies::ClassCache", "classes/ActiveSupport/Dependencies/ClassCache.html#method-i-store", "(klass)", ""],
      ["store", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store", "(key, value)", ""],
      ["store", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-store", "(key, value)", ""],
      ["store_accessor", "ActiveRecord::Store::ClassMethods", "classes/ActiveRecord/Store/ClassMethods.html#method-i-store_accessor", "(store_attribute, *keys)", ""],
      ["store_inherited", "ActiveSupport::DescendantsTracker", "classes/ActiveSupport/DescendantsTracker.html#method-c-store_inherited", "(klass, descendant)", "<p>This is the only method that is not thread safe, but is only ever called\nduring the eager loading phase. …\n"],
      ["stored_attributes", "ActiveRecord::Store::ClassMethods", "classes/ActiveRecord/Store/ClassMethods.html#method-i-stored_attributes", "()", ""],
      ["stream_for", "ActionCable::Channel::Streams", "classes/ActionCable/Channel/Streams.html#method-i-stream_for", "(model, callback = nil, coder: nil, &block)", "<p>Start streaming the pubsub queue for the <code>model</code> in this\nchannel. Optionally, you can pass a <code>callback</code> that&#39;ll …\n"],
      ["stream_from", "ActionCable::Channel::Streams", "classes/ActionCable/Channel/Streams.html#method-i-stream_from", "(broadcasting, callback = nil, coder: nil, &block)", "<p>Start streaming from the named <code>broadcasting</code> pubsub queue.\nOptionally, you can pass a <code>callback</code> that&#39;ll …\n"],
      ["strftime", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-strftime", "(format)", "<p>Replaces <code>%Z</code> directive with +zone before passing to\nTime#strftime, so that zone information is correct. …\n"],
      ["strict_mode?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-strict_mode-3F", "()", ""],
      ["stringify_array", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-stringify_array", "(array)", ""],
      ["stringify_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys", "()", ""],
      ["stringify_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys", "()", ""],
      ["stringify_keys", "Hash", "classes/Hash.html#method-i-stringify_keys", "()", "<p>Returns a new hash with all keys converted to strings.\n\n<pre><code>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; }\n\nhash.stringify_keys ...</code></pre>\n"],
      ["stringify_keys!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21", "()", ""],
      ["stringify_keys!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21", "()", ""],
      ["stringify_keys!", "Hash", "classes/Hash.html#method-i-stringify_keys-21", "()", "<p>Destructively converts all keys to strings. Same as\n<code>stringify_keys</code>, but modifies <code>self</code>.\n"],
      ["strip_heredoc", "String", "classes/String.html#method-i-strip_heredoc", "()", "<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre><code>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</code></pre>\n"],
      ["strip_links", "ActionView::Helpers::SanitizeHelper", "classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links", "(html)", "<p>Strips all link tags from <code>html</code> leaving just the link text.\n\n<pre><code>strip_links(&#39;&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</code></pre>\n"],
      ["strip_tags", "ActionView::Helpers::SanitizeHelper", "classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags", "(html)", "<p>Strips all HTML tags from <code>html</code>, including comments and special\ncharacters.\n\n<pre><code>strip_tags(&quot;Strip &lt;i&gt;these&lt;/i&gt; ...</code></pre>\n"],
      ["strong_etag=", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-strong_etag-3D", "(strong_validators)", ""],
      ["strong_etag?", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-strong_etag-3F", "()", "<p>True if an ETag is set and it isn&#39;t a weak validator (not preceded with\nW/)\n"],
      ["strptime", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-strptime", "(str, format, now = now())", "<p>Parses <code>str</code> according to <code>format</code> and returns an\nActiveSupport::TimeWithZone.\n<p>Assumes that <code>str</code> is a time …\n"],
      ["structure_dump", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump", "(*arguments)", ""],
      ["structure_dump_flags", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-c-structure_dump_flags", "", "<p>Extra flags passed to database CLI tool (mysqldump/pg_dump) when calling\ndb:structure:dump\n"],
      ["structure_load", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load", "(*arguments)", ""],
      ["structure_load_flags", "ActiveRecord::Tasks::DatabaseTasks", "classes/ActiveRecord/Tasks/DatabaseTasks.html#method-c-structure_load_flags", "", "<p>Extra flags passed to database CLI tool when calling db:structure:load\n"],
      ["stylesheet_link_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag", "(*sources)", "<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don&#39;t specify an extension, …\n"],
      ["stylesheet_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_path", "(source, options = {})", "<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],
      ["stylesheet_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_url", "(source, options = {})", "<p>Computes the full URL to a stylesheet asset in the public stylesheets\ndirectory. This will use <code>stylesheet_path</code> …\n"],
      ["stylesheets", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-stylesheets", "()", ""],
      ["subclasses", "Class", "classes/Class.html#method-i-subclasses", "()", "<p>Returns an array with the direct children of <code>self</code>.\n\n<pre><code>class Foo; end\nclass Bar &lt; Foo; end\nclass Baz &lt; Bar; ...</code></pre>\n"],
      ["subclasses", "Rails::Railtie", "classes/Rails/Railtie.html#method-c-subclasses", "()", ""],
      ["subdomain", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-subdomain", "(tld_length = @@tld_length)", "<p>Returns all the subdomains as a string, so <code>&quot;dev.www&quot;</code>\nwould be returned for “dev.www.rubyonrails.org …\n"],
      ["subdomains", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-subdomains", "(tld_length = @@tld_length)", "<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “dev. …\n"],
      ["submit", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-submit", "(value = nil, options = {})", "<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],
      ["submit_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag", "(value = \"Save changes\", options = {})", "<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:data</code> - This option can be used to …\n"],
      ["subscribe", "ActionCable::SubscriptionAdapter::Base", "classes/ActionCable/SubscriptionAdapter/Base.html#method-i-subscribe", "(channel, message_callback, success_callback = nil)", ""],
      ["subscribe", "ActiveSupport::Notifications", "classes/ActiveSupport/Notifications.html#method-c-subscribe", "(*args, &block)", ""],
      ["subscribe", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-subscribe", "(pattern = nil, block = Proc.new)", ""],
      ["subscribe_to_channel", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-subscribe_to_channel", "()", "<p>This method is called after subscription has been added to the connection\nand confirms or rejects the …\n"],
      ["subscribed", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-subscribed", "()", "<p>Called once a consumer has become a subscriber of the channel. Usually the\nplace to setup any streams …\n"],
      ["subscribed", "ActiveSupport::Notifications", "classes/ActiveSupport/Notifications.html#method-c-subscribed", "(callback, *args, &block)", ""],
      ["subscribers", "ActiveSupport::Subscriber", "classes/ActiveSupport/Subscriber.html#method-c-subscribers", "()", ""],
      ["subscription_confirmation_sent?", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-subscription_confirmation_sent-3F", "()", ""],
      ["subscription_rejected?", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-subscription_rejected-3F", "()", ""],
      ["subsec", "DateTime", "classes/DateTime.html#method-i-subsec", "()", "<p>Returns the fraction of a second as a <code>Rational</code>\n\n<pre><code>DateTime.new(2012, 8, 29, 0, 0, 0.5).subsec # =&gt; (1/2)\n</code></pre>\n"],
      ["suffix", "ActiveRecord::DynamicMatchers::FindByBang", "classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix", "()", ""],
      ["suffix", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-c-suffix", "()", ""],
      ["sum", "ActiveRecord::Calculations", "classes/ActiveRecord/Calculations.html#method-i-sum", "(column_name = nil)", "<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],
      ["sum", "Enumerable", "classes/Enumerable.html#method-i-sum", "(identity = nil, &block)", "<p>Calculates a sum from the elements.\n\n<pre><code>payments.sum { |p| p.price * p.tax_rate }\npayments.sum(&amp;:price)\n</code></pre>\n<p>The …\n"],
      ["sunday", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-sunday", "()", "<p>Returns Sunday of this week assuming that week starts on Monday.\n<code>DateTime</code> objects have their time set …\n"],
      ["supports_advisory_locks?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_advisory_locks-3F", "()", ""],
      ["supports_advisory_locks?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_advisory_locks-3F", "()", "<p>Does this adapter support application-enforced advisory locking?\n"],
      ["supports_advisory_locks?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_advisory_locks-3F", "()", ""],
      ["supports_bulk_alter?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F", "()", ""],
      ["supports_comments?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_comments-3F", "()", "<p>Does this adapter support metadata comments on database objects (tables,\ncolumns, indexes)?\n"],
      ["supports_comments?", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_comments-3F", "()", ""],
      ["supports_comments?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_comments-3F", "()", ""],
      ["supports_comments_in_create?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_comments_in_create-3F", "()", "<p>Can comments for tables, columns, and indexes be specified in create/alter\ntable statements?\n"],
      ["supports_comments_in_create?", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_comments_in_create-3F", "()", ""],
      ["supports_datetime_with_precision?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_datetime_with_precision-3F", "()", ""],
      ["supports_datetime_with_precision?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_datetime_with_precision-3F", "()", "<p>Does this adapter support datetime with precision?\n"],
      ["supports_datetime_with_precision?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_datetime_with_precision-3F", "()", ""],
      ["supports_datetime_with_precision?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_datetime_with_precision-3F", "()", ""],
      ["supports_ddl_transactions?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F", "()", "<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],
      ["supports_ddl_transactions?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F", "()", ""],
      ["supports_ddl_transactions?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F", "()", ""],
      ["supports_explain?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_explain-3F", "()", ""],
      ["supports_explain?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F", "()", "<p>Does this adapter support explain?\n"],
      ["supports_explain?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F", "()", ""],
      ["supports_explain?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F", "()", ""],
      ["supports_expression_index?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_expression_index-3F", "()", "<p>Does this adapter support expression indices?\n"],
      ["supports_expression_index?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_expression_index-3F", "()", ""],
      ["supports_extensions?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F", "()", "<p>Does this adapter support database extensions?\n"],
      ["supports_extensions?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F", "()", ""],
      ["supports_foreign_keys?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_foreign_keys-3F", "()", ""],
      ["supports_foreign_keys?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_foreign_keys-3F", "()", "<p>Does this adapter support creating foreign key constraints?\n"],
      ["supports_foreign_keys?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_foreign_keys-3F", "()", ""],
      ["supports_foreign_keys_in_create?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_foreign_keys_in_create-3F", "()", "<p>Does this adapter support creating foreign key constraints in the same\nstatement as creating the table? …\n"],
      ["supports_foreign_keys_in_create?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_foreign_keys_in_create-3F", "()", ""],
      ["supports_index_sort_order?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_index_sort_order-3F", "()", "<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn&#39;t …\n"],
      ["supports_index_sort_order?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F", "()", "<p>Does this adapter support index sort order?\n"],
      ["supports_index_sort_order?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F", "()", ""],
      ["supports_index_sort_order?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F", "()", ""],
      ["supports_indexes_in_create?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_indexes_in_create-3F", "()", ""],
      ["supports_indexes_in_create?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_indexes_in_create-3F", "()", "<p>Does this adapter support creating indexes in the same statement as\ncreating the table?\n"],
      ["supports_json?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_json-3F", "()", "<p>Does this adapter support json data type?\n"],
      ["supports_json?", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_json-3F", "()", ""],
      ["supports_json?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_json-3F", "()", ""],
      ["supports_materialized_views?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_materialized_views-3F", "()", ""],
      ["supports_multi_insert?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_multi_insert-3F", "()", "<p>Does this adapter support multi-value insert?\n"],
      ["supports_multi_insert?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_multi_insert-3F", "()", ""],
      ["supports_partial_index?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F", "()", "<p>Does this adapter support partial indices?\n"],
      ["supports_partial_index?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F", "()", ""],
      ["supports_partial_index?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_partial_index-3F", "()", ""],
      ["supports_path?", "AbstractController::Base", "classes/AbstractController/Base.html#method-c-supports_path-3F", "()", "<p>Returns true if the given controller is capable of rendering a path. A\nsubclass of <code>AbstractController::Base</code> …\n"],
      ["supports_path?", "ActionMailer::Base", "classes/ActionMailer/Base.html#method-c-supports_path-3F", "()", "<p>Emails do not support relative path links.\n"],
      ["supports_pgcrypto_uuid?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_pgcrypto_uuid-3F", "()", ""],
      ["supports_ranges?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ranges-3F", "()", "<p>Range datatypes weren&#39;t introduced until PostgreSQL 9.2\n"],
      ["supports_savepoints?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F", "()", "<p>Does this adapter support savepoints?\n"],
      ["supports_savepoints?", "ActiveRecord::ConnectionAdapters::Mysql2Adapter", "classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_savepoints-3F", "()", ""],
      ["supports_savepoints?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F", "()", ""],
      ["supports_savepoints?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F", "()", ""],
      ["supports_statement_cache?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_statement_cache-3F", "()", "<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],
      ["supports_statement_cache?", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F", "()", "<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],
      ["supports_statement_cache?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F", "()", "<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],
      ["supports_statement_cache?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_statement_cache-3F", "()", "<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],
      ["supports_streaming?", "ActionView::Template", "classes/ActionView/Template.html#method-i-supports_streaming-3F", "()", "<p>Returns whether the underlying handler supports streaming. If so, a\nstreaming buffer <strong>may</strong> be passed when …\n"],
      ["supports_streaming?", "ActionView::Template::Handlers::ERB", "classes/ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F", "()", ""],
      ["supports_transaction_isolation?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_transaction_isolation-3F", "()", ""],
      ["supports_transaction_isolation?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F", "()", "<p>Does this adapter support setting the isolation level for a transaction?\n"],
      ["supports_transaction_isolation?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F", "()", ""],
      ["supports_views?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_views-3F", "()", ""],
      ["supports_views?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_views-3F", "()", "<p>Does this adapter support views?\n"],
      ["supports_views?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_views-3F", "()", ""],
      ["supports_views?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_views-3F", "()", ""],
      ["supports_virtual_columns?", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-supports_virtual_columns-3F", "()", ""],
      ["supports_virtual_columns?", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_virtual_columns-3F", "()", "<p>Does this adapter support virtual columns?\n"],
      ["suppress", "ActiveRecord::Suppressor::ClassMethods", "classes/ActiveRecord/Suppressor/ClassMethods.html#method-i-suppress", "(&block)", ""],
      ["suppress", "Kernel", "classes/Kernel.html#method-i-suppress", "(*exception_classes)", "<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre><code>suppress(ZeroDivisionError) ...</code></pre>\n"],
      ["suppress_messages", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-suppress_messages", "()", ""],
      ["swap", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-swap", "(target, *args, &block)", ""],
      ["swap", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-swap", "(*args, &block)", ""],
      ["swapcase", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-swapcase", "()", "<p>Converts characters in the string to the opposite case.\n\n<pre><code>&#39;El Cañón&#39;.mb_chars.swapcase.to_s # =&gt; &quot;eL cAÑÓN&quot;\n</code></pre>\n"],
      ["swapcase", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-swapcase", "(string)", ""],
      ["swapcase_mapping", "ActiveSupport::Multibyte::Unicode::Codepoint", "classes/ActiveSupport/Multibyte/Unicode/Codepoint.html#method-i-swapcase_mapping", "()", ""],
      ["symbolize_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys", "()", ""],
      ["symbolize_keys", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys", "()", ""],
      ["symbolize_keys", "Hash", "classes/Hash.html#method-i-symbolize_keys", "()", "<p>Returns a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n\n<pre><code>hash = { &#39;name&#39; ...</code></pre>\n"],
      ["symbolize_keys!", "Hash", "classes/Hash.html#method-i-symbolize_keys-21", "()", "<p>Destructively converts all keys to symbols, as long as they respond to\n<code>to_sym</code>. Same as <code>symbolize_keys</code> …\n"],
      ["symbols", "ActionView::Template::Types", "classes/ActionView/Template/Types.html#method-c-symbols", "()", ""],
      ["symbols", "Mime::Mimes", "classes/Mime/Mimes.html#method-i-symbols", "()", ""],
      ["system_test", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-system_test", "()", ""],
      ["t", "AbstractController::Translation", "classes/AbstractController/Translation.html#method-i-t", "(key, options = {})", ""],
      ["t", "ActionView::Helpers::TranslationHelper", "classes/ActionView/Helpers/TranslationHelper.html#method-i-t", "(key, options = {})", ""],
      ["table_alias_for", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for", "(table_name)", "<p>Truncates a table alias according to the limits of the current adapter.\n"],
      ["table_alias_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length", "()", "<p>Returns the maximum length of a table alias.\n"],
      ["table_alias_length", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length", "()", "<p>Returns the configured supported identifier length supported by PostgreSQL\n"],
      ["table_comment", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_comment", "(table_name)", "<p>Returns the table comment that&#39;s stored in database metadata.\n"],
      ["table_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F", "(table_name)", "<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre><code>table_exists?(:developers)\n</code></pre>\n"],
      ["table_exists?", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F", "()", "<p>Indicates whether the table associated with this class exists\n"],
      ["table_name", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name", "()", "<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],
      ["table_name", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-table_name", "()", ""],
      ["table_name=", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D", "(value)", "<p>Sets the table name explicitly. Example:\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.table_name = &quot;project&quot; ...</code></pre>\n"],
      ["table_name_length", "ActiveRecord::ConnectionAdapters::DatabaseLimits", "classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length", "()", "<p>Returns the maximum length of a table name.\n"],
      ["table_name_prefix", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-table_name_prefix", "", "<p>The prefix string to prepend to every table name.\n"],
      ["table_name_prefix=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-table_name_prefix-3D", "", "<p>Sets the prefix string to prepend to every table name. So if set to\n“basecamp_”, all table …\n"],
      ["table_name_suffix", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-table_name_suffix", "", "<p>The suffix string to append to every table name.\n"],
      ["table_name_suffix=", "ActiveRecord::ModelSchema", "classes/ActiveRecord/ModelSchema.html#method-c-table_name_suffix-3D", "", "<p>Works like <code>table_name_prefix=</code>, but appends instead of prepends\n(set to “_basecamp” gives “projects_basecamp”, …\n"],
      ["table_options", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_options", "(table_name)", ""],
      ["table_rows", "ActiveRecord::FixtureSet", "classes/ActiveRecord/FixtureSet.html#method-i-table_rows", "()", "<p>Returns a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],
      ["tableize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-tableize", "(class_name)", "<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the #pluralize …\n"],
      ["tableize", "String", "classes/String.html#method-i-tableize", "()", "<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],
      ["tables", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-tables", "()", "<p>Returns an array of table names defined in the database.\n"],
      ["tag", "ActionCable::Connection::TaggedLoggerProxy", "classes/ActionCable/Connection/TaggedLoggerProxy.html#method-i-tag", "(logger)", ""],
      ["tag", "ActionView::Helpers::ActiveModelInstanceTag", "classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag", "(type, options, *)", ""],
      ["tag", "ActionView::Helpers::TagHelper", "classes/ActionView/Helpers/TagHelper.html#method-i-tag", "(name = nil, options = nil, open = false, escape = true)", "<p>Returns an HTML tag.\n<p>Building HTML tags\n<p>Builds HTML5 compliant tags with a tag proxy. Every tag can be …\n"],
      ["tagged", "ActiveSupport::TaggedLogging", "classes/ActiveSupport/TaggedLogging.html#method-i-tagged", "(*tags)", ""],
      ["take", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-take", "(limit = nil)", "<p>Gives a record (or N records if a parameter is supplied) from the\ncollection using the same rules as …\n"],
      ["take", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-take", "(limit = nil)", "<p>Gives a record (or N records if a parameter is supplied) without any\nimplied order. The order will depend …\n"],
      ["take!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-take-21", "()", "<p>Same as #take but raises ActiveRecord::RecordNotFound if no record is\nfound. Note that #take! accepts …\n"],
      ["take_failed_screenshot", "ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper", "classes/ActionDispatch/SystemTesting/TestHelpers/ScreenshotHelper.html#method-i-take_failed_screenshot", "()", "<p>Takes a screenshot of the current page in the browser if the test failed.\n<p><code>take_failed_screenshot</code> is included …\n"],
      ["take_screenshot", "ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper", "classes/ActionDispatch/SystemTesting/TestHelpers/ScreenshotHelper.html#method-i-take_screenshot", "()", "<p>Takes a screenshot of the current page in the browser.\n<p><code>take_screenshot</code> can be used at any point in your …\n"],
      ["target", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-target", "()", ""],
      ["teardown", "ActiveSupport::Testing::SetupAndTeardown::ClassMethods", "classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown", "(*args, &block)", "<p>Add a callback, which runs after <code>TestCase#teardown</code>.\n"],
      ["teardown_fixtures", "ActiveRecord::TestFixtures", "classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures", "()", ""],
      ["telephone_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-telephone_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “tel”.\n\n<pre><code>telephone_field(&quot;user&quot;, &quot;phone&quot;)\n# =&gt; &lt;input id=&quot;user_phone&quot; ...\n</code></pre>\n"],
      ["telephone_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],
      ["template", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-template", "(source, *args, &block)", ""],
      ["template_exists?", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F", "(name, prefixes = [], partial = false, keys = [], **options)", ""],
      ["terabyte", "Numeric", "classes/Numeric.html#method-i-terabyte", "()", ""],
      ["terabytes", "Numeric", "classes/Numeric.html#method-i-terabytes", "()", "<p>Returns the number of bytes equivalent to the terabytes provided.\n\n<pre><code>2.terabytes # =&gt; 2_199_023_255_552\n</code></pre>\n"],
      ["test", "ActiveSupport::Testing::Declarative", "classes/ActiveSupport/Testing/Declarative.html#method-i-test", "(name, &block)", "<p>Helper to define a test method using a String. Under the hood, it replaces\nspaces with underscores and …\n"],
      ["test", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-test", "()", ""],
      ["test", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-test", "()", ""],
      ["test_dummy_assets", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-test_dummy_assets", "()", ""],
      ["test_dummy_clean", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-test_dummy_clean", "()", ""],
      ["test_dummy_config", "Rails::PluginBuilder", "classes/Rails/PluginBuilder.html#method-i-test_dummy_config", "()", ""],
      ["test_errors_aref", "ActiveModel::Lint::Tests", "classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref", "()", "<p>Passes if the object&#39;s model responds to <code>errors</code> and if\ncalling <code>[](attribute)</code> on the result of this …\n"],
      ["test_model_naming", "ActiveModel::Lint::Tests", "classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming", "()", "<p>Passes if the object&#39;s model responds to <code>model_name</code> both\nas an instance method and as a class method, …\n"],
      ["test_order", "ActiveSupport::TestCase", "classes/ActiveSupport/TestCase.html#method-c-test_order", "()", "<p>Returns the order in which test cases are run.\n\n<pre><code>ActiveSupport::TestCase.test_order # =&gt; :random\n</code></pre>\n<p>Possible …\n"],
      ["test_order=", "ActiveSupport::TestCase", "classes/ActiveSupport/TestCase.html#method-c-test_order-3D", "(new_order)", "<p>Sets the order in which test cases are run.\n\n<pre><code>ActiveSupport::TestCase.test_order = :random # =&gt; :random\n</code></pre>\n"],
      ["test_persisted?", "ActiveModel::Lint::Tests", "classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F", "()", "<p>Passes if the object&#39;s model responds to <code>persisted?</code> and if\ncalling this method returns either <code>true</code> …\n"],
      ["test_to_key", "ActiveModel::Lint::Tests", "classes/ActiveModel/Lint/Tests.html#method-i-test_to_key", "()", "<p>Passes if the object&#39;s model responds to <code>to_key</code> and if\ncalling this method returns <code>nil</code> when the object …\n"],
      ["test_to_param", "ActiveModel::Lint::Tests", "classes/ActiveModel/Lint/Tests.html#method-i-test_to_param", "()", "<p>Passes if the object&#39;s model responds to <code>to_param</code> and if\ncalling this method returns <code>nil</code> when the …\n"],
      ["test_to_partial_path", "ActiveModel::Lint::Tests", "classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path", "()", "<p>Passes if the object&#39;s model responds to <code>to_partial_path</code>\nand if calling this method returns a string. …\n"],
      ["tests", "ActionController::TestCase::Behavior::ClassMethods", "classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests", "(controller_class)", "<p>Sets the controller class name. Useful if the name can&#39;t be inferred\nfrom test class. Normalizes …\n"],
      ["tests", "ActionMailer::TestCase::Behavior::ClassMethods", "classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-tests", "(mailer)", ""],
      ["tests", "ActionView::TestCase::Behavior::ClassMethods", "classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests", "(helper_class)", ""],
      ["tests", "Rails::Generators::Testing::Behaviour::ClassMethods", "classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-tests", "(klass)", "<p>Sets which generator should be tested:\n\n<pre><code>tests AppGenerator\n</code></pre>\n"],
      ["text_area", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-text_area", "(object_name, method, options = {})", "<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],
      ["text_area_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag", "(name, content = nil, options = {})", "<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],
      ["text_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-text_field", "(object_name, method, options = {})", "<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],
      ["text_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag", "(name, value = nil, options = {})", "<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],
      ["third", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-third", "", "<p>Same as #first except returns only the third record.\n"],
      ["third", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-third", "()", "<p>Find the third record. If no order is defined it will order by primary key.\n\n<pre><code>Person.third # returns the ...\n</code></pre>\n"],
      ["third", "Array", "classes/Array.html#method-i-third", "()", "<p>Equal to <code>self[2]</code>.\n\n<pre><code>%w( a b c d e ).third # =&gt; &quot;c&quot;\n</code></pre>\n"],
      ["third!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-third-21", "()", "<p>Same as #third but raises ActiveRecord::RecordNotFound if no record is\nfound.\n"],
      ["third_to_last", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-third_to_last", "", "<p>Same as #first except returns only the third-to-last record.\n"],
      ["third_to_last", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-third_to_last", "()", "<p>Find the third-to-last record. If no order is defined it will order by\nprimary key.\n\n<pre><code>Person.third_to_last ...</code></pre>\n"],
      ["third_to_last", "Array", "classes/Array.html#method-i-third_to_last", "()", "<p>Equal to <code>self[-3]</code>.\n\n<pre><code>%w( a b c d e ).third_to_last # =&gt; &quot;c&quot;\n</code></pre>\n"],
      ["third_to_last!", "ActiveRecord::FinderMethods", "classes/ActiveRecord/FinderMethods.html#method-i-third_to_last-21", "()", "<p>Same as #third_to_last but raises ActiveRecord::RecordNotFound if no record\nis found.\n"],
      ["thread_cattr_accessor", "Module", "classes/Module.html#method-i-thread_cattr_accessor", "(*syms)", ""],
      ["thread_mattr_accessor", "Module", "classes/Module.html#method-i-thread_mattr_accessor", "(*syms)", "<p>Defines both class and instance accessors for class attributes.\n\n<pre><code>class Account\n  thread_mattr_accessor ...</code></pre>\n"],
      ["tidy_bytes", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes", "(force = false)", "<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],
      ["tidy_bytes", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes", "(string, force = false)", "<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],
      ["time", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-time", "()", "<p>Returns a <code>Time</code> instance that represents the time in\n<code>time_zone</code>.\n"],
      ["time_ago_in_words", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words", "(from_time, options = {})", "<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code>\nis fixed to <code>Time.now</code>.\n\n<pre><code>time_ago_in_words(3.minutes.from_now) ...</code></pre>\n"],
      ["time_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-time_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “time”.\n<p>The default value is generated by trying to call <code>strftime</code> …\n"],
      ["time_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-time_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “time”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],
      ["time_select", "ActionView::FormBuilder", "classes/ActionView/FormBuilder.html#method-i-time_select", "(method, options = {}, html_options = {})", "<p>Wraps ActionView::Helpers::DateHelper#time_select for form builders:\n\n<pre><code>&lt;%= form_for @race do |f| %&gt;\n  &lt;%= ...</code></pre>\n"],
      ["time_select", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-time_select", "(object_name, method, options = {}, html_options = {})", "<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],
      ["time_tag", "ActionView::Helpers::DateHelper", "classes/ActionView/Helpers/DateHelper.html#method-i-time_tag", "(date_or_time, *args, &block)", "<p>Returns an HTML time tag for the given date or time.\n\n<pre><code>time_tag Date.today  # =&gt;\n  &lt;time datetime=&quot;2010-11-04&quot;&gt;November ...</code></pre>\n"],
      ["time_zone_options_for_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select", "(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)", "<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply an ActiveSupport::TimeZone …\n"],
      ["time_zone_select", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select", "(method, priority_zones = nil, options = {}, html_options = {})", "<p>Wraps ActionView::Helpers::FormOptionsHelper#time_zone_select for form\nbuilders:\n\n<pre><code>&lt;%= form_for @user do ...</code></pre>\n"],
      ["time_zone_select", "ActionView::Helpers::FormOptionsHelper", "classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select", "(object, method, priority_zones = nil, options = {}, html_options = {})", "<p>Returns select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],
      ["timer", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-i-timer", "(interval, &block)", ""],
      ["timestamp_attributes_for_create", "ActiveRecord::Timestamp", "classes/ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_create", "()", ""],
      ["timestamp_attributes_for_create_in_model", "ActiveRecord::Timestamp", "classes/ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_create_in_model", "()", ""],
      ["timestamp_attributes_for_update", "ActiveRecord::Timestamp", "classes/ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update", "()", ""],
      ["timestamp_attributes_for_update_in_model", "ActiveRecord::Timestamp", "classes/ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update_in_model", "()", ""],
      ["timestamps", "ActiveRecord::ConnectionAdapters::Table", "classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps", "(options = {})", "<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table.\n\n<pre><code>t.timestamps(null: false)\n</code></pre>\n<p>See connection.add_timestamps …\n"],
      ["timestamps", "ActiveRecord::ConnectionAdapters::TableDefinition", "classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps", "(**options)", "<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table. See connection.add_timestamps\n\n<pre><code>t.timestamps ...</code></pre>\n"],
      ["tinyblob", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-tinyblob", "(*args, **options)", ""],
      ["tinytext", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-tinytext", "(*args, **options)", ""],
      ["titlecase", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-titlecase", "()", ""],
      ["titlecase", "String", "classes/String.html#method-i-titlecase", "()", ""],
      ["titleize", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-titleize", "(word)", "<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],
      ["titleize", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-titleize", "()", "<p>Capitalizes the first letter of every word, when possible.\n\n<pre><code>&quot;ÉL QUE SE ENTERÓ&quot;.mb_chars.titleize.to_s  ...</code></pre>\n"],
      ["titleize", "String", "classes/String.html#method-i-titleize", "()", "<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],
      ["tmp", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-tmp", "()", ""],
      ["to", "Array", "classes/Array.html#method-i-to", "(position)", "<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre><code>%w( a b c d ).to(0)  # =&gt; [&quot;a&quot;]\n%w( a b c d ).to(2) ...</code></pre>\n"],
      ["to", "String", "classes/String.html#method-i-to", "(position)", "<p>Returns a substring from the beginning of the string to the given position.\nIf the position is negative, …\n"],
      ["to_a", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-to_a", "()", "<p>Turns the Response into a Rack-compatible array of the status, headers, and\nbody. Allows explicit splatting: …\n"],
      ["to_a", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-to_a", "()", ""],
      ["to_a", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-to_a", "()", ""],
      ["to_a", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-to_a", "()", "<p>Converts relation objects to Array.\n"],
      ["to_a", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_a", "()", "<p>Returns Array of parts of Time in sequence of [seconds, minutes, hours,\nday, month, year, weekday, yearday, …\n"],
      ["to_a", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-to_a", "()", ""],
      ["to_ary", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-i-to_ary", "()", ""],
      ["to_ary", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-to_ary", "()", "<p>Returns a new array of objects from the collection. If the collection\nhasn&#39;t been loaded, it fetches …\n"],
      ["to_ary", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-to_ary", "()", "<p>Returns an array of hashes representing each row record.\n"],
      ["to_ary", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-to_ary", "()", ""],
      ["to_complete", "ActiveSupport::ExecutionWrapper", "classes/ActiveSupport/ExecutionWrapper.html#method-c-to_complete", "(*args, &block)", ""],
      ["to_date", "String", "classes/String.html#method-i-to_date", "()", "<p>Converts a string to a Date value.\n\n<pre><code>&quot;1-1-2012&quot;.to_date   # =&gt; Sun, 01 Jan 2012\n&quot;01/01/2012&quot;.to_date # =&gt; ...\n</code></pre>\n"],
      ["to_datetime", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_datetime", "()", "<p>Returns an instance of DateTime with the timezone&#39;s UTC offset\n\n<pre><code>Time.zone.now.to_datetime          ...</code></pre>\n"],
      ["to_datetime", "String", "classes/String.html#method-i-to_datetime", "()", "<p>Converts a string to a DateTime value.\n\n<pre><code>&quot;1-1-2012&quot;.to_datetime            # =&gt; Sun, 01 Jan 2012 00:00:00 ...\n</code></pre>\n"],
      ["to_default_s", "ActiveSupport::RangeWithFormat", "classes/ActiveSupport/RangeWithFormat.html#method-i-to_default_s", "(format = :default)", ""],
      ["to_default_s", "Array", "classes/Array.html#method-i-to_default_s", "(format = :default)", ""],
      ["to_default_s", "Date", "classes/Date.html#method-i-to_default_s", "(format = :default)", ""],
      ["to_default_s", "DateTime", "classes/DateTime.html#method-i-to_default_s", "(format = :default)", ""],
      ["to_default_s", "Time", "classes/Time.html#method-i-to_default_s", "(format = :default)", ""],
      ["to_dep_map", "ActionView::Digestor::Node", "classes/ActionView/Digestor/Node.html#method-i-to_dep_map", "()", ""],
      ["to_f", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_f", "()", "<p>Returns the object&#39;s date and time as a floating point number of\nseconds since the Epoch (January …\n"],
      ["to_f", "DateTime", "classes/DateTime.html#method-i-to_f", "()", "<p>Converts <code>self</code> to a floating-point number of seconds, including\nfractional microseconds, since the Unix …\n"],
      ["to_formatted_s", "ActiveSupport::RangeWithFormat", "classes/ActiveSupport/RangeWithFormat.html#method-i-to_formatted_s", "(format = :default)", ""],
      ["to_formatted_s", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_formatted_s", "(format = :default)", ""],
      ["to_formatted_s", "Array", "classes/Array.html#method-i-to_formatted_s", "(format = :default)", "<p>Extends <code>Array#to_s</code> to convert a collection of elements into a\ncomma separated id list if <code>:db</code> argument …\n"],
      ["to_formatted_s", "Date", "classes/Date.html#method-i-to_formatted_s", "(format = :default)", "<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],
      ["to_formatted_s", "DateTime", "classes/DateTime.html#method-i-to_formatted_s", "(format = :default)", "<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],
      ["to_formatted_s", "Time", "classes/Time.html#method-i-to_formatted_s", "(format = :default)", "<p>Converts to a formatted string. See DATE_FORMATS for built-in formats.\n<p>This method is aliased to <code>to_s</code> …\n"],
      ["to_h", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-to_h", "()", "<p>Returns a safe <code>ActiveSupport::HashWithIndifferentAccess</code>\nrepresentation of the parameters with all unpermitted …\n"],
      ["to_hash", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-to_hash", "()", "<p>Returns a safe <code>Hash</code> representation of the parameters with all\nunpermitted keys removed.\n\n<pre><code>params = ActionController::Parameters.new({ ...</code></pre>\n"],
      ["to_hash", "ActionDispatch::Flash::FlashHash", "classes/ActionDispatch/Flash/FlashHash.html#method-i-to_hash", "()", ""],
      ["to_hash", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-to_hash", "(full_messages = false)", "<p>Returns a Hash of attributes with their error messages. If\n<code>full_messages</code> is <code>true</code>, it will contain full …\n"],
      ["to_hash", "ActiveRecord::Result", "classes/ActiveRecord/Result.html#method-i-to_hash", "()", "<p>Returns an array of hashes representing each row record.\n"],
      ["to_hash", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash", "()", "<p>Convert to a regular hash with string keys.\n"],
      ["to_hash", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash", "()", "<p>Convert to a regular hash with string keys.\n"],
      ["to_html", "Rails::Info", "classes/Rails/Info.html#method-c-to_html", "()", ""],
      ["to_i", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-to_i", "()", "<p>Returns the number of seconds that this Duration represents.\n\n<pre><code>1.minute.to_i   # =&gt; 60\n1.hour.to_i     # ...\n</code></pre>\n"],
      ["to_i", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_i", "()", "<p>Returns the object&#39;s date and time as an integer number of seconds\nsince the Epoch (January 1, 1970 …\n"],
      ["to_i", "DateTime", "classes/DateTime.html#method-i-to_i", "()", "<p>Converts <code>self</code> to an integer number of seconds since the Unix\nepoch.\n"],
      ["to_key", "ActiveModel::Conversion", "classes/ActiveModel/Conversion.html#method-i-to_key", "()", "<p>Returns an Array of all key attributes if any of the attributes is set,\nwhether or not the object is …\n"],
      ["to_key", "ActiveRecord::AttributeMethods::PrimaryKey", "classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key", "()", "<p>Returns this record&#39;s primary key value wrapped in an array if one is\navailable.\n"],
      ["to_model", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-to_model", "()", ""],
      ["to_model", "ActiveModel::Conversion", "classes/ActiveModel/Conversion.html#method-i-to_model", "()", "<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],
      ["to_options", "Hash", "classes/Hash.html#method-i-to_options", "()", ""],
      ["to_options!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21", "()", ""],
      ["to_options!", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21", "()", ""],
      ["to_options!", "Hash", "classes/Hash.html#method-i-to_options-21", "()", ""],
      ["to_param", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-to_param", "(*args)", ""],
      ["to_param", "ActiveModel::Conversion", "classes/ActiveModel/Conversion.html#method-i-to_param", "()", "<p>Returns a <code>string</code> representing the object&#39;s key suitable\nfor use in URLs, or <code>nil</code> if <code>persisted?</code> is …\n"],
      ["to_param", "ActiveRecord::Integration", "classes/ActiveRecord/Integration.html#method-i-to_param", "()", "<p>Returns a <code>String</code>, which Action Pack uses for constructing a\nURL to this object. The default implementation …\n"],
      ["to_param", "ActiveRecord::Integration::ClassMethods", "classes/ActiveRecord/Integration/ClassMethods.html#method-i-to_param", "(method_name = nil)", "<p>Defines your model&#39;s <code>to_param</code> method to generate “pretty”\nURLs using <code>method_name</code>, which …\n"],
      ["to_param", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-to_param", "()", ""],
      ["to_param", "Array", "classes/Array.html#method-i-to_param", "()", "<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],
      ["to_param", "FalseClass", "classes/FalseClass.html#method-i-to_param", "()", "<p>Returns <code>self</code>.\n"],
      ["to_param", "Hash", "classes/Hash.html#method-i-to_param", "(namespace = nil)", ""],
      ["to_param", "NilClass", "classes/NilClass.html#method-i-to_param", "()", "<p>Returns <code>self</code>.\n"],
      ["to_param", "Object", "classes/Object.html#method-i-to_param", "()", "<p>Alias of <code>to_s</code>.\n"],
      ["to_param", "TrueClass", "classes/TrueClass.html#method-i-to_param", "()", "<p>Returns <code>self</code>.\n"],
      ["to_partial_path", "ActionView::Helpers::FormBuilder", "classes/ActionView/Helpers/FormBuilder.html#method-i-to_partial_path", "()", ""],
      ["to_partial_path", "ActiveModel::Conversion", "classes/ActiveModel/Conversion.html#method-i-to_partial_path", "()", "<p>Returns a <code>string</code> identifying the path associated with the\nobject. ActionPack uses this to find a suitable …\n"],
      ["to_path", "ActionDispatch::Response::RackBody", "classes/ActionDispatch/Response/RackBody.html#method-i-to_path", "()", ""],
      ["to_path", "ActionView::FileSystemResolver", "classes/ActionView/FileSystemResolver.html#method-i-to_path", "()", ""],
      ["to_prepare", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-c-to_prepare", "(*args, &block)", ""],
      ["to_prepare", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-to_prepare", "(&blk)", "<p>Defines generic callbacks to run before #after_initialize. Useful for\nRails::Railtie subclasses.\n"],
      ["to_prepare_blocks", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks", "()", "<p>Array of callbacks defined by #to_prepare.\n"],
      ["to_query", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-to_query", "(*args)", "<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre><code>params = ActionController::Parameters.new({ ...</code></pre>\n"],
      ["to_query", "Array", "classes/Array.html#method-i-to_query", "(key)", "<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],
      ["to_query", "Hash", "classes/Hash.html#method-i-to_query", "(namespace = nil)", "<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre><code>{name: &#39;David&#39;, ...</code></pre>\n"],
      ["to_query", "Object", "classes/Object.html#method-i-to_query", "(key)", "<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],
      ["to_r", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_r", "()", "<p>Returns the object&#39;s date and time as a rational number of seconds\nsince the Epoch (January 1, 1970 …\n"],
      ["to_run", "ActiveSupport::ExecutionWrapper", "classes/ActiveSupport/ExecutionWrapper.html#method-c-to_run", "(*args, &block)", ""],
      ["to_s", "ActionDispatch::RemoteIp::GetIp", "classes/ActionDispatch/RemoteIp/GetIp.html#method-i-to_s", "()", "<p>Memoizes the value returned by #calculate_ip and returns it for\nActionDispatch::Request to use.\n"],
      ["to_s", "ActionView::FileSystemResolver", "classes/ActionView/FileSystemResolver.html#method-i-to_s", "()", ""],
      ["to_s", "ActionView::FixtureResolver", "classes/ActionView/FixtureResolver.html#method-i-to_s", "()", ""],
      ["to_s", "ActionView::Resolver::Path", "classes/ActionView/Resolver/Path.html#method-i-to_s", "()", ""],
      ["to_s", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-i-to_s", "()", ""],
      ["to_s", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-to_s", "", "<p>Returns the class name.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.to_s # =&gt; ...\n</code></pre>\n"],
      ["to_s", "ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-to_s", "()", ""],
      ["to_s", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-to_s", "()", "<p>Returns the amount of seconds a duration covers as a string. For more\ninformation check to_i method. …\n"],
      ["to_s", "ActiveSupport::NumericWithFormat", "classes/ActiveSupport/NumericWithFormat.html#method-i-to_s", "(format = nil, options = nil)", "<p>Provides options for converting numbers into formatted strings. Options are\nprovided for phone numbers, …\n"],
      ["to_s", "ActiveSupport::RangeWithFormat", "classes/ActiveSupport/RangeWithFormat.html#method-i-to_s", "(format = :default)", "<p>Convert range to a formatted string. See RANGE_FORMATS for predefined\nformats.\n\n<pre><code>range = (1..100)       ...</code></pre>\n"],
      ["to_s", "ActiveSupport::SafeBuffer", "classes/ActiveSupport/SafeBuffer.html#method-i-to_s", "()", ""],
      ["to_s", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_s", "(format = :default)", "<p>Returns a string of the object&#39;s date and time. Accepts an optional\n<code>format</code>:\n<p><code>:default</code> - default value, …\n"],
      ["to_s", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-to_s", "()", "<p>Returns a textual representation of this time zone.\n"],
      ["to_s", "Array", "classes/Array.html#method-i-to_s", "(format = :default)", ""],
      ["to_s", "Date", "classes/Date.html#method-i-to_s", "(format = :default)", ""],
      ["to_s", "DateTime", "classes/DateTime.html#method-i-to_s", "(format = :default)", ""],
      ["to_s", "Mime::Type", "classes/Mime/Type.html#method-i-to_s", "()", ""],
      ["to_s", "Rails::Info", "classes/Rails/Info.html#method-c-to_s", "()", ""],
      ["to_s", "Time", "classes/Time.html#method-i-to_s", "(format = :default)", ""],
      ["to_sentence", "ActionView::Helpers::OutputSafetyHelper", "classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-to_sentence", "(array, options = {})", "<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],
      ["to_sentence", "Array", "classes/Array.html#method-i-to_sentence", "(options = {})", "<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],
      ["to_sql", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql", "(arel, binds = [])", "<p>Converts an arel AST to SQL\n"],
      ["to_sql", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-to_sql", "()", "<p>Returns sql statement for the relation.\n\n<pre><code>User.where(name: &#39;Oscar&#39;).to_sql\n# =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...\n</code></pre>\n"],
      ["to_str", "ActionView::Resolver::Path", "classes/ActionView/Resolver/Path.html#method-i-to_str", "()", ""],
      ["to_str", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-i-to_str", "()", ""],
      ["to_str", "ActiveModel::Name", "classes/ActiveModel/Name.html#method-i-to_str", "", "<p>Equivalent to <code>to_s</code>.\n"],
      ["to_str", "Mime::Type", "classes/Mime/Type.html#method-i-to_str", "()", ""],
      ["to_sym", "ActionView::Template::Types::Type", "classes/ActionView/Template/Types/Type.html#method-i-to_sym", "()", ""],
      ["to_sym", "Mime::Type", "classes/Mime/Type.html#method-i-to_sym", "()", ""],
      ["to_tag", "ActiveSupport::XmlMini", "classes/ActiveSupport/XmlMini.html#method-i-to_tag", "(key, value, options)", ""],
      ["to_time", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-to_time", "()", "<p>Returns an instance of <code>Time</code>, either with the same UTC offset\nas <code>self</code> or in the local system timezone …\n"],
      ["to_time", "Date", "classes/Date.html#method-i-to_time", "(form = :local)", "<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],
      ["to_time", "DateTime", "classes/DateTime.html#method-i-to_time", "()", "<p>Either return an instance of `Time` with the same UTC offset as\n<code>self</code> or an instance of `Time` representing …\n"],
      ["to_time", "String", "classes/String.html#method-i-to_time", "(form = :local)", "<p>Converts a string to a Time value. The <code>form</code> can be either :utc\nor :local (default :local).\n<p>The time is …\n"],
      ["to_time", "Time", "classes/Time.html#method-i-to_time", "()", "<p>Either return <code>self</code> or the time in the local system timezone\ndepending on the setting of\n<code>ActiveSupport.to_time_preserves_timezone</code> …\n"],
      ["to_unsafe_h", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-to_unsafe_h", "()", "<p>Returns an unsafe, unfiltered\n<code>ActiveSupport::HashWithIndifferentAccess</code> representation of the\nparameters. …\n"],
      ["to_unsafe_hash", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-to_unsafe_hash", "()", ""],
      ["to_xml", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-to_xml", "(options = {})", "<p>Returns an xml formatted representation of the Errors hash.\n\n<pre><code>person.errors.add(:name, :blank, message: ...</code></pre>\n"],
      ["to_xml", "Array", "classes/Array.html#method-i-to_xml", "(options = {})", "<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],
      ["to_xml", "Hash", "classes/Hash.html#method-i-to_xml", "(options = {})", "<p>Returns a string containing an XML representation of its receiver:\n\n<pre><code>{ foo: 1, bar: 2 }.to_xml\n# =&gt;\n# &lt;?xml ...\n</code></pre>\n"],
      ["to_yaml_type", "ActiveSupport::OrderedHash", "classes/ActiveSupport/OrderedHash.html#method-i-to_yaml_type", "()", ""],
      ["today", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-today", "()", "<p>Returns the current date in this time zone.\n"],
      ["today?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-today-3F", "()", "<p>Returns true if the current object&#39;s time falls within the current day.\n"],
      ["today?", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-today-3F", "()", "<p>Returns true if the date/time is today.\n"],
      ["toggle", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-toggle", "(attribute)", "<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],
      ["toggle!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-toggle-21", "(attribute)", "<p>Wrapper around #toggle that saves the record. This method differs from its\nnon-bang version in the sense …\n"],
      ["token_and_options", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-token_and_options", "(request)", "<p>Parses the token and options out of the token Authorization header. The\nvalue for the Authorization header …\n"],
      ["token_params_from", "ActionController::HttpAuthentication::Token", "classes/ActionController/HttpAuthentication/Token.html#method-i-token_params_from", "(auth)", ""],
      ["tomorrow", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-tomorrow", "()", "<p>Returns the next date in this time zone.\n"],
      ["tomorrow", "Date", "classes/Date.html#method-c-tomorrow", "()", "<p>Returns a new Date representing the date 1 day after today (i.e.\ntomorrow&#39;s date).\n"],
      ["tomorrow", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-tomorrow", "()", "<p>Returns a new date/time representing tomorrow.\n"],
      ["touch", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-touch", "(*names, time: nil)", "<p>Saves the record with the updated_at/on attributes set to the current time\nor the time specified. Please …\n"],
      ["traces", "ActionDispatch::ExceptionWrapper", "classes/ActionDispatch/ExceptionWrapper.html#method-i-traces", "()", ""],
      ["transaction", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction", "(requires_new: nil, isolation: nil, joinable: true)", "<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],
      ["transaction", "ActiveRecord::Transactions::ClassMethods", "classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction", "(options = {}, &block)", "<p>See the ConnectionAdapters::DatabaseStatements#transaction API docs.\n"],
      ["transaction_isolation_levels", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels", "()", ""],
      ["transaction_open?", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F", "()", ""],
      ["transaction_state", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_state", "()", ""],
      ["transform_keys", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-transform_keys", "(&block)", "<p>Returns a new <code>ActionController::Parameters</code> instance with the\nresults of running <code>block</code> once for every …\n"],
      ["transform_keys", "Hash", "classes/Hash.html#method-i-transform_keys", "()", "<p>Returns a new hash with all keys converted using the <code>block</code>\noperation.\n\n<pre><code>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; ...</code></pre>\n"],
      ["transform_keys!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-transform_keys-21", "(&block)", "<p>Performs keys transformation and returns the altered\n<code>ActionController::Parameters</code> instance.\n"],
      ["transform_keys!", "Hash", "classes/Hash.html#method-i-transform_keys-21", "()", "<p>Destructively converts all keys using the <code>block</code> operations.\nSame as <code>transform_keys</code> but modifies <code>self</code> …\n"],
      ["transform_values", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-transform_values", "(&block)", "<p>Returns a new <code>ActionController::Parameters</code> with the results of\nrunning <code>block</code> once for every value. The …\n"],
      ["transform_values", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_values", "(*args, &block)", ""],
      ["transform_values", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_values", "(*args, &block)", ""],
      ["transform_values", "Hash", "classes/Hash.html#method-i-transform_values", "()", "<p>Returns a new hash with the results of running <code>block</code> once for\nevery value. The keys are unchanged.\n\n<pre><code>{ a: ...</code></pre>\n"],
      ["transform_values!", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-transform_values-21", "(&block)", "<p>Performs values transformation and returns the altered\n<code>ActionController::Parameters</code> instance.\n"],
      ["transform_values!", "Hash", "classes/Hash.html#method-i-transform_values-21", "()", "<p>Destructively converts all values using the <code>block</code> operations.\nSame as <code>transform_values</code> but modifies  …\n"],
      ["translate", "AbstractController::Translation", "classes/AbstractController/Translation.html#method-i-translate", "(key, options = {})", "<p>Delegates to <code>I18n.translate</code>. Also aliased as <code>t</code>.\n<p>When the given key starts with a period, it will be scoped …\n"],
      ["translate", "ActionView::Helpers::TranslationHelper", "classes/ActionView/Helpers/TranslationHelper.html#method-i-translate", "(key, options = {})", "<p>Delegates to <code>I18n#translate</code> but also performs three additional\nfunctions.\n<p>First, it will ensure that any …\n"],
      ["transliterate", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-transliterate", "(string, replacement = \"?\".freeze)", "<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],
      ["transmit", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-transmit", "(data, via: nil)", "<p>Transmit a hash of data to the subscriber. The hash will automatically be\nwrapped in a JSON envelope …\n"],
      ["transmit", "ActionCable::Connection::WebSocket", "classes/ActionCable/Connection/WebSocket.html#method-i-transmit", "(data)", ""],
      ["travel", "ActiveSupport::Testing::TimeHelpers", "classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel", "(duration, &block)", "<p>Changes current time to the time in the future or in the past by a given\ntime difference by stubbing …\n"],
      ["travel_back", "ActiveSupport::Testing::TimeHelpers", "classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel_back", "()", "<p>Returns the current time back to its original state, by removing the stubs\nadded by `travel` and `travel_to`. …\n"],
      ["travel_to", "ActiveSupport::Testing::TimeHelpers", "classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel_to", "(date_or_time)", "<p>Changes current time to the given time by stubbing <code>Time.now</code>,\n<code>Date.today</code>, and <code>DateTime.now</code> to return the …\n"],
      ["tree", "ActionView::Digestor", "classes/ActionView/Digestor.html#method-c-tree", "(name, finder, partial = false, seen = {})", "<p>Create a dependency tree for template named <code>name</code>.\n"],
      ["truncate", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-truncate", "(text, options = {}, &block)", "<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],
      ["truncate", "ActiveRecord::ConnectionAdapters", "classes/ActiveRecord/ConnectionAdapters.html#method-i-truncate", "(table_name, name = nil)", ""],
      ["truncate", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-truncate", "(table_name, name = nil)", "<p>Executes the truncate statement.\n"],
      ["truncate", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-truncate", "(table_name, name = nil)", ""],
      ["truncate", "String", "classes/String.html#method-i-truncate", "(truncate_at, options = {})", "<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre><code>&#39;Once upon a time in a world ...</code></pre>\n"],
      ["truncate_words", "String", "classes/String.html#method-i-truncate_words", "(words_count, options = {})", "<p>Truncates a given <code>text</code> after a given number of words\n(<code>words_count</code>):\n\n<pre><code>&#39;Once upon a time in a world far far ...</code></pre>\n"],
      ["try", "Delegator", "classes/Delegator.html#method-i-try", "", "<p>See Object#try\n"],
      ["try", "NilClass", "classes/NilClass.html#method-i-try", "(*args)", "<p>Calling <code>try</code> on <code>nil</code> always returns\n<code>nil</code>. It becomes especially helpful when navigating through\nassociations …\n"],
      ["try", "Object", "classes/Object.html#method-i-try", "", "<p>Invokes the public method whose name goes as first argument just like\n<code>public_send</code> does, except that if …\n"],
      ["try!", "Delegator", "classes/Delegator.html#method-i-try-21", "", "<p>See Object#try!\n"],
      ["try!", "NilClass", "classes/NilClass.html#method-i-try-21", "(*args)", "<p>Calling <code>try!</code> on <code>nil</code> always returns\n<code>nil</code>.\n\n<pre><code>nil.try!(:name) # =&gt; nil\n</code></pre>\n"],
      ["try!", "Object", "classes/Object.html#method-i-try-21", "", "<p>Same as #try, but raises a <code>NoMethodError</code> exception if the\nreceiver is not <code>nil</code> and does not implement …\n"],
      ["tsort_each_child", "Rails::Initializable::Collection", "classes/Rails/Initializable/Collection.html#method-i-tsort_each_child", "(initializer, &block)", ""],
      ["tsrange", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsrange", "(*args, **options)", ""],
      ["tstzrange", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tstzrange", "(*args, **options)", ""],
      ["tsvector", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsvector", "(*args, **options)", ""],
      ["tv_sec", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-tv_sec", "()", ""],
      ["type", "ActionView::Template", "classes/ActionView/Template.html#method-i-type", "()", ""],
      ["type_cast", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast", "(value, column = nil)", "<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],
      ["type_cast_config_to_boolean", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean", "(config)", ""],
      ["type_cast_config_to_integer", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer", "(config)", ""],
      ["type_for_attribute", "ActiveRecord::ModelSchema::ClassMethods", "classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-type_for_attribute", "(attr_name, &block)", "<p>Returns the type of the attribute with the given name, after applying all\nmodifiers. This method is the …\n"],
      ["uncached", "ActiveRecord::ConnectionAdapters::QueryCache", "classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached", "()", "<p>Disable the query cache within the block.\n"],
      ["uncached", "ActiveRecord::QueryCache::ClassMethods", "classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached", "(&block)", "<p>Disable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],
      ["uncountable", "ActiveSupport::Inflector::Inflections", "classes/ActiveSupport/Inflector/Inflections.html#method-i-uncountable", "(*words)", "<p>Specifies words that are uncountable and should not be inflected.\n\n<pre><code>uncountable &#39;money&#39;\nuncountable &#39;money&#39;, ...</code></pre>\n"],
      ["uncountable?", "ActiveModel::Naming", "classes/ActiveModel/Naming.html#method-c-uncountable-3F", "(record_or_class)", "<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre><code>ActiveModel::Naming.uncountable?(Sheep) ...</code></pre>\n"],
      ["uncountable?", "ActiveSupport::Inflector::Inflections::Uncountables", "classes/ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-uncountable-3F", "(str)", ""],
      ["uncountable?", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F", "()", ""],
      ["undefine_attribute_methods", "ActiveModel::AttributeMethods::ClassMethods", "classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods", "()", "<p>Removes all the previously dynamically defined methods from the class.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods ...</code></pre>\n"],
      ["underscore", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-underscore", "(camel_cased_word)", "<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes &#39;::&#39; to &#39;/&#39; …\n"],
      ["underscore", "String", "classes/String.html#method-i-underscore", "()", "<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> …\n"],
      ["unescape", "Object", "classes/Object.html#method-i-unescape", "(str, escaped = /%[a-fA-F\\d]{2}/)", ""],
      ["unescape_bytea", "ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-unescape_bytea", "(value)", "<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],
      ["uniq", "ActiveRecord::Associations::CollectionProxy", "classes/ActiveRecord/Associations/CollectionProxy.html#method-i-uniq", "()", ""],
      ["unload_interlock", "ActiveSupport::Dependencies", "classes/ActiveSupport/Dependencies.html#method-c-unload_interlock", "()", "<p>Execute the supplied block while holding an exclusive lock, preventing any\nother thread from being inside …\n"],
      ["unloading", "ActiveSupport::Dependencies::Interlock", "classes/ActiveSupport/Dependencies/Interlock.html#method-i-unloading", "()", ""],
      ["unpack_graphemes", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-unpack_graphemes", "(string)", "<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n\n<pre><code>Unicode.unpack_graphemes(&#39;क्षि&#39;) ...</code></pre>\n"],
      ["unpermitted_parameters", "ActionController::LogSubscriber", "classes/ActionController/LogSubscriber.html#method-i-unpermitted_parameters", "(event)", ""],
      ["unprepared_statement", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement", "()", ""],
      ["unquoted_false", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_false", "()", ""],
      ["unquoted_true", "ActiveRecord::ConnectionAdapters::Quoting", "classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_true", "()", ""],
      ["unregister", "Mime::Type", "classes/Mime/Type.html#method-c-unregister", "(symbol)", "<p>This method is opposite of register method.\n<p>To unregister a MIME type:\n\n<pre><code>Mime::Type.unregister(:mobile)\n</code></pre>\n"],
      ["unscope", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-unscope", "(*args)", "<p>Removes an unwanted relation that is already defined on a chain of\nrelations. This is useful when passing …\n"],
      ["unscoped", "ActiveRecord::Scoping::Default::ClassMethods", "classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped", "()", "<p>Returns a scope for the model without the previously set scopes.\n\n<pre><code>class Post &lt; ActiveRecord::Base\n  def ...</code></pre>\n"],
      ["unshift", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-unshift", "(klass, *args, &block)", ""],
      ["unshift", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-unshift", "(*args, &block)", ""],
      ["unshift", "Rails::Paths::Path", "classes/Rails/Paths/Path.html#method-i-unshift", "(*paths)", ""],
      ["unsigned_bigint", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_bigint", "(*args, **options)", ""],
      ["unsigned_decimal", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_decimal", "(*args, **options)", ""],
      ["unsigned_float", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_float", "(*args, **options)", ""],
      ["unsigned_integer", "ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-unsigned_integer", "(*args, **options)", ""],
      ["unsubscribe", "ActionCable::SubscriptionAdapter::Base", "classes/ActionCable/SubscriptionAdapter/Base.html#method-i-unsubscribe", "(channel, message_callback)", ""],
      ["unsubscribe", "ActiveSupport::Notifications", "classes/ActiveSupport/Notifications.html#method-c-unsubscribe", "(subscriber_or_name)", ""],
      ["unsubscribe", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe", "(subscriber_or_name)", ""],
      ["unsubscribed", "ActionCable::Channel::Base", "classes/ActionCable/Channel/Base.html#method-i-unsubscribed", "()", "<p>Called once a consumer has cut its cable connection. Can be used for\ncleaning up connections or marking …\n"],
      ["until", "ActiveSupport::Duration", "classes/ActiveSupport/Duration.html#method-i-until", "(time = ::Time.current)", ""],
      ["up", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-up", "()", ""],
      ["upcase", "ActiveSupport::Multibyte::Chars", "classes/ActiveSupport/Multibyte/Chars.html#method-i-upcase", "()", "<p>Converts characters in the string to uppercase.\n\n<pre><code>&#39;Laurent, où sont les tests ?&#39;.mb_chars.upcase.to_s # ...\n</code></pre>\n"],
      ["upcase", "ActiveSupport::Multibyte::Unicode", "classes/ActiveSupport/Multibyte/Unicode.html#method-i-upcase", "(string)", ""],
      ["upcase_first", "ActiveSupport::Inflector", "classes/ActiveSupport/Inflector.html#method-i-upcase_first", "(string)", "<p>Converts just the first character to uppercase.\n\n<pre><code>upcase_first(&#39;what a Lovely Day&#39;) # =&gt; &quot;What a Lovely ...\n</code></pre>\n"],
      ["upcase_first", "String", "classes/String.html#method-i-upcase_first", "()", "<p>Converts just the first character to uppercase.\n\n<pre><code>&#39;what a Lovely Day&#39;.upcase_first # =&gt; &quot;What a Lovely Day&quot; ...\n</code></pre>\n"],
      ["update", "ActiveRecord::ConnectionAdapters::DatabaseStatements", "classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update", "(arel, name = nil, binds = [])", "<p>Executes the update statement and returns the number of rows affected.\n"],
      ["update", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update", "(attributes)", "<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],
      ["update", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-update", "(id = :all, attributes)", "<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],
      ["update", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update", "(other_hash)", "<p>Updates the receiver in-place, merging in the hash passed as argument:\n\n<pre><code>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["update", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update", "(other_hash)", "<p>Updates the receiver in-place, merging in the hash passed as argument:\n\n<pre><code>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["update", "Rails::Generators::ActiveModel", "classes/Rails/Generators/ActiveModel.html#method-i-update", "(params = nil)", "<p>PATCH/PUT update\n"],
      ["update!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update-21", "(attributes)", "<p>Updates its receiver just like #update but calls #save! instead of\n<code>save</code>, so an exception is raised if …\n"],
      ["update_all", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-update_all", "(updates)", "<p>Updates all records in the current relation with details given. This method\nconstructs a single SQL  …\n"],
      ["update_attribute", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update_attribute", "(name, value)", "<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],
      ["update_attributes", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update_attributes", "(attributes)", ""],
      ["update_attributes!", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update_attributes-21", "(attributes)", ""],
      ["update_column", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update_column", "(name, value)", "<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],
      ["update_columns", "ActiveRecord::Persistence", "classes/ActiveRecord/Persistence.html#method-i-update_columns", "(attributes)", "<p>Updates the attributes directly in the database issuing an UPDATE SQL\nstatement and sets them in the …\n"],
      ["update_counters", "ActiveRecord::CounterCache::ClassMethods", "classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters", "(id, counters)", "<p>A generic “counter updater” implementation, intended primarily to be used\nby #increment_counter …\n"],
      ["update_counters", "ActiveRecord::Locking::Optimistic::ClassMethods", "classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters", "(id, counters)", "<p>Make sure the lock version column gets updated when counters are updated.\n"],
      ["updated?", "ActiveSupport::FileUpdateChecker", "classes/ActiveSupport/FileUpdateChecker.html#method-i-updated-3F", "()", "<p>Check if any of the entries were updated. If so, the watched and/or\nupdated_at values are cached until …\n"],
      ["url", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-i-url", "()", "<p>Returns the complete URL used for this request.\n\n<pre><code>req = ActionDispatch::Request.new &#39;HTTP_HOST&#39; =&gt; &#39;example.com&#39; ...</code></pre>\n"],
      ["url_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-url_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “url”.\n\n<pre><code>url_field(&quot;user&quot;, &quot;homepage&quot;)\n# =&gt; &lt;input id=&quot;user_homepage&quot; ...\n</code></pre>\n"],
      ["url_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],
      ["url_for", "ActionController::Metal", "classes/ActionController/Metal.html#method-i-url_for", "(string)", "<p>Basic url_for that can be overridden for more robust functionality.\n"],
      ["url_for", "ActionDispatch::Http::URL", "classes/ActionDispatch/Http/URL.html#method-c-url_for", "(options)", ""],
      ["url_for", "ActionDispatch::Routing::UrlFor", "classes/ActionDispatch/Routing/UrlFor.html#method-i-url_for", "(options = nil)", "<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],
      ["url_for", "ActionView::RoutingUrlFor", "classes/ActionView/RoutingUrlFor.html#method-i-url_for", "(options = nil)", "<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],
      ["url_helper_prefix", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-url_helper_prefix", "()", ""],
      ["url_options", "ActionController::UrlFor", "classes/ActionController/UrlFor.html#method-i-url_options", "()", ""],
      ["url_options", "ActionDispatch::Integration::Session", "classes/ActionDispatch/Integration/Session.html#method-i-url_options", "()", ""],
      ["url_options", "ActionDispatch::IntegrationTest::UrlOptions", "classes/ActionDispatch/IntegrationTest/UrlOptions.html#method-i-url_options", "()", ""],
      ["url_options", "ActionDispatch::Routing::UrlFor", "classes/ActionDispatch/Routing/UrlFor.html#method-i-url_options", "()", "<p>Hook overridden in controller to add request information with\n`default_url_options`. Application logic …\n"],
      ["url_to_asset", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_asset", "(source, options = {})", ""],
      ["url_to_audio", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_audio", "(source, options = {})", ""],
      ["url_to_font", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_font", "(source, options = {})", ""],
      ["url_to_image", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_image", "(source, options = {})", ""],
      ["url_to_javascript", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_javascript", "(source, options = {})", ""],
      ["url_to_stylesheet", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_stylesheet", "(source, options = {})", ""],
      ["url_to_video", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_video", "(source, options = {})", ""],
      ["us_zones", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-c-us_zones", "()", "<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],
      ["usage_path", "Rails::Command::Base", "classes/Rails/Command/Base.html#method-c-usage_path", "()", "<p>Path to lookup a USAGE description in a file.\n"],
      ["usage_path", "Rails::Generators::Base", "classes/Rails/Generators/Base.html#method-c-usage_path", "()", ""],
      ["use", "ActionController::Metal", "classes/ActionController/Metal.html#method-c-use", "(*args, &block)", "<p>Pushes the given Rack middleware and its arguments to the bottom of the\nmiddleware stack.\n"],
      ["use", "ActionDispatch::MiddlewareStack", "classes/ActionDispatch/MiddlewareStack.html#method-i-use", "(klass, *args, &block)", ""],
      ["use", "Rails::Configuration::MiddlewareStackProxy", "classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-use", "(*args, &block)", ""],
      ["use_accept_header", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-use_accept_header", "()", ""],
      ["use_insert_returning?", "ActiveRecord::ConnectionAdapters::PostgreSQLAdapter", "classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F", "()", ""],
      ["use_renderer", "ActionController::Renderers::ClassMethods", "classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderer", "(*args)", ""],
      ["use_renderers", "ActionController::Renderers::ClassMethods", "classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderers", "(*args)", "<p>Adds, by name, a renderer or renderers to the <code>_renderers</code>\navailable to call within controller actions. …\n"],
      ["use_zone", "Time", "classes/Time.html#method-c-use_zone", "(time_zone)", "<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],
      ["usec", "DateTime", "classes/DateTime.html#method-i-usec", "()", "<p>Returns the fraction of a second as microseconds\n"],
      ["user_agent=", "ActionDispatch::TestRequest", "classes/ActionDispatch/TestRequest.html#method-i-user_agent-3D", "(user_agent)", ""],
      ["user_name_and_password", "ActionController::HttpAuthentication::Basic", "classes/ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password", "(request)", ""],
      ["uses_transaction", "ActiveRecord::TestFixtures::ClassMethods", "classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction", "(*methods)", ""],
      ["uses_transaction?", "ActiveRecord::TestFixtures::ClassMethods", "classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F", "(method)", ""],
      ["utc", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-utc", "()", "<p>Returns a <code>Time</code> instance of the simultaneous time in the UTC\ntimezone.\n"],
      ["utc", "DateTime", "classes/DateTime.html#method-i-utc", "()", "<p>Returns a <code>Time</code> instance of the simultaneous time in the UTC\ntimezone.\n\n<pre><code>DateTime.civil(2005, 2, 21, 10, ...</code></pre>\n"],
      ["utc?", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-utc-3F", "()", "<p>Returns true if the current time zone is set to UTC.\n\n<pre><code>Time.zone = &#39;UTC&#39;                           # =&gt; ...\n</code></pre>\n"],
      ["utc?", "DateTime", "classes/DateTime.html#method-i-utc-3F", "()", "<p>Returns <code>true</code> if <code>offset == 0</code>.\n"],
      ["utc_offset", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-utc_offset", "()", "<p>Returns the offset from current time to UTC time in seconds.\n"],
      ["utc_offset", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-utc_offset", "()", "<p>Returns the offset of this time zone from UTC in seconds.\n"],
      ["utc_offset", "DateTime", "classes/DateTime.html#method-i-utc_offset", "()", "<p>Returns the offset value in seconds.\n"],
      ["utc_to_local", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-utc_to_local", "(time)", "<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],
      ["utf8_enforcer_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-utf8_enforcer_tag", "()", "<p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to\ncustomize the tag.\n"],
      ["uuid", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-uuid", "()", ""],
      ["uuid", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-uuid", "(*args, **options)", ""],
      ["uuid_from_hash", "Digest::UUID", "classes/Digest/UUID.html#method-c-uuid_from_hash", "(hash_class, uuid_namespace, name)", "<p>Generates a v5 non-random UUID (Universally Unique IDentifier).\n<p>Using Digest::MD5 generates version 3 …\n"],
      ["uuid_v3", "Digest::UUID", "classes/Digest/UUID.html#method-c-uuid_v3", "(uuid_namespace, name)", "<p>Convenience method for uuid_from_hash using Digest::MD5.\n"],
      ["uuid_v4", "Digest::UUID", "classes/Digest/UUID.html#method-c-uuid_v4", "()", "<p>Convenience method for SecureRandom.uuid.\n"],
      ["uuid_v5", "Digest::UUID", "classes/Digest/UUID.html#method-c-uuid_v5", "(uuid_namespace, name)", "<p>Convenience method for uuid_from_hash using Digest::SHA1.\n"],
      ["valid?", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-valid-3F", "(context = nil)", "<p>Runs all the specified validations and returns <code>true</code> if no\nerrors were added otherwise <code>false</code>.\n\n<pre><code>class Person ...</code></pre>\n"],
      ["valid?", "ActiveRecord::DynamicMatchers::Method", "classes/ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F", "()", ""],
      ["valid?", "ActiveRecord::Validations", "classes/ActiveRecord/Validations.html#method-i-valid-3F", "(context = nil)", "<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, <code>false</code> otherwise. …\n"],
      ["valid_accept_header", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-valid_accept_header", "()", ""],
      ["valid_alter_table_type?", "ActiveRecord::ConnectionAdapters::SQLite3Adapter", "classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_alter_table_type-3F", "(type)", "<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],
      ["valid_message?", "ActiveSupport::MessageVerifier", "classes/ActiveSupport/MessageVerifier.html#method-i-valid_message-3F", "(signed_message)", "<p>Checks if a signed message could have been generated by signing an object\nwith the <code>MessageVerifier</code>&#39;s …\n"],
      ["validate", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-validate", "(context = nil)", ""],
      ["validate", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validate", "(*args, &block)", "<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],
      ["validate", "ActiveModel::Validator", "classes/ActiveModel/Validator.html#method-i-validate", "(record)", "<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],
      ["validate", "ActiveRecord::Validations", "classes/ActiveRecord/Validations.html#method-i-validate", "(context = nil)", ""],
      ["validate!", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-validate-21", "(context = nil)", "<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, raises\n<code>ValidationError</code> …\n"],
      ["validate_digest_response", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response", "(request, realm, &password_procedure)", "<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],
      ["validate_nonce", "ActionController::HttpAuthentication::Digest", "classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce", "(secret_key, request, value, seconds_to_timeout = 5 * 60)", "<p>Might want a shorter timeout depending on whether the request is a PATCH,\nPUT, or POST, and if the client …\n"],
      ["validates", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validates", "(*attributes)", "<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in &#39;Validator&#39;. …\n"],
      ["validates!", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21", "(*attributes)", "<p>This method is used to define validations that cannot be corrected by end\nusers and are considered exceptional. …\n"],
      ["validates_absence_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of", "(*attr_names)", "<p>Validates that the specified attributes are blank (as defined by\nObject#blank?). Happens by default on …\n"],
      ["validates_absence_of", "ActiveRecord::Validations::ClassMethods", "classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_absence_of", "(*attr_names)", "<p>Validates that the specified attributes are not present (as defined by\nObject#present?). If the attribute …\n"],
      ["validates_acceptance_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of", "(*attr_names)", "<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],
      ["validates_associated", "ActiveRecord::Validations::ClassMethods", "classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated", "(*attr_names)", "<p>Validates whether the associated object or objects are all valid. Works\nwith any kind of association. …\n"],
      ["validates_confirmation_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of", "(*attr_names)", "<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],
      ["validates_each", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each", "(*attr_names, &block)", "<p>Validates each attribute against a block.\n\n<pre><code>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...</code></pre>\n"],
      ["validates_exclusion_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of", "(*attr_names)", "<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre><code>class Person ...</code></pre>\n"],
      ["validates_format_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of", "(*attr_names)", "<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],
      ["validates_inclusion_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of", "(*attr_names)", "<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],
      ["validates_length_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of", "(*attr_names)", "<p>Validates that the specified attributes match the length restrictions\nsupplied. Only one constraint option …\n"],
      ["validates_length_of", "ActiveRecord::Validations::ClassMethods", "classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_length_of", "(*attr_names)", "<p>Validates that the specified attributes match the length restrictions\nsupplied. If the attribute is an …\n"],
      ["validates_numericality_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of", "(*attr_names)", "<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],
      ["validates_presence_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of", "(*attr_names)", "<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],
      ["validates_presence_of", "ActiveRecord::Validations::ClassMethods", "classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of", "(*attr_names)", "<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?), and, if the attribute …\n"],
      ["validates_size_of", "ActiveModel::Validations::HelperMethods", "classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of", "(*attr_names)", ""],
      ["validates_size_of", "ActiveRecord::Validations::ClassMethods", "classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_size_of", "(*attr_names)", ""],
      ["validates_uniqueness_of", "ActiveRecord::Validations::ClassMethods", "classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of", "(*attr_names)", "<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],
      ["validates_with", "ActiveModel::Validations", "classes/ActiveModel/Validations.html#method-i-validates_with", "(*args, &block)", "<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],
      ["validates_with", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with", "(*args, &block)", "<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],
      ["validators", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validators", "()", "<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n\n<pre><code>class Person ...</code></pre>\n"],
      ["validators_on", "ActiveModel::Validations::ClassMethods", "classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on", "(*attributes)", "<p>List all validators that are being used to validate a specific attribute.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],
      ["value?", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-value-3F", "", "<p>Returns true if the given value is present for some key in the parameters.\n"],
      ["values", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-values", "", "<p>Returns a new array of the values of the parameters.\n"],
      ["values", "ActiveModel::Errors", "classes/ActiveModel/Errors.html#method-i-values", "()", "<p>Returns all message values.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],
      ["values", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-values", "()", ""],
      ["values", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-values", "()", ""],
      ["values_at", "ActionController::Parameters", "classes/ActionController/Parameters.html#method-i-values_at", "(*keys)", "<p>Returns values that were assigned to the given <code>keys</code>. Note that\nall the <code>Hash</code> objects will be converted …\n"],
      ["values_at", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at", "(*indices)", "<p>Returns an array of the values at the specified indices:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["values_at", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at", "(*indices)", "<p>Returns an array of the values at the specified indices:\n\n<pre><code>hash = ActiveSupport::HashWithIndifferentAccess.new ...</code></pre>\n"],
      ["values_at", "Rails::Paths::Root", "classes/Rails/Paths/Root.html#method-i-values_at", "(*list)", ""],
      ["variant", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-variant", "()", ""],
      ["variant=", "ActionDispatch::Http::MimeNegotiation", "classes/ActionDispatch/Http/MimeNegotiation.html#method-i-variant-3D", "(variant)", "<p>Sets the variant for template.\n"],
      ["vendor", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-vendor", "()", ""],
      ["vendor", "Rails::Generators::Actions", "classes/Rails/Generators/Actions.html#method-i-vendor", "(filename, data = nil, &block)", "<p>Create a new file in the <code>vendor/</code> directory. Code can be\nspecified in a block or a data string can be …\n"],
      ["verified", "ActiveSupport::MessageVerifier", "classes/ActiveSupport/MessageVerifier.html#method-i-verified", "(signed_message)", "<p>Decodes the signed message using the <code>MessageVerifier</code>&#39;s\nsecret.\n\n<pre><code>verifier = ActiveSupport::MessageVerifier.new ...</code></pre>\n"],
      ["verify", "ActiveSupport::MessageVerifier", "classes/ActiveSupport/MessageVerifier.html#method-i-verify", "(signed_message)", "<p>Decodes the signed message using the <code>MessageVerifier</code>&#39;s\nsecret.\n\n<pre><code>verifier = ActiveSupport::MessageVerifier.new ...</code></pre>\n"],
      ["verify!", "ActiveRecord::ConnectionAdapters::AbstractAdapter", "classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21", "(*ignored)", "<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],
      ["verify_authenticity_token", "ActionController::RequestForgeryProtection", "classes/ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token", "()", "<p>The actual before_action that is used to verify the CSRF token. Don&#39;t\noverride this directly. Provide …\n"],
      ["version", "ActionCable", "classes/ActionCable.html#method-c-version", "()", "<p>Returns the version of the currently loaded Action Cable as a\n<code>Gem::Version</code>\n"],
      ["version", "ActionMailer", "classes/ActionMailer.html#method-c-version", "()", "<p>Returns the version of the currently loaded Action Mailer as a\n<code>Gem::Version</code>.\n"],
      ["version", "ActionView", "classes/ActionView.html#method-c-version", "()", "<p>Returns the version of the currently loaded ActionView as a\n<code>Gem::Version</code>\n"],
      ["version", "ActiveJob", "classes/ActiveJob.html#method-c-version", "()", "<p>Returns the version of the currently loaded Active Job as a\n<code>Gem::Version</code>\n"],
      ["version", "ActiveModel", "classes/ActiveModel.html#method-c-version", "()", "<p>Returns the version of the currently loaded Active Model as a\n<code>Gem::Version</code>\n"],
      ["version", "ActiveRecord", "classes/ActiveRecord.html#method-c-version", "()", "<p>Returns the version of the currently loaded ActiveRecord as a\n<code>Gem::Version</code>\n"],
      ["version", "ActiveSupport", "classes/ActiveSupport.html#method-c-version", "()", "<p>Returns the version of the currently loaded ActiveSupport as a\n<code>Gem::Version</code>\n"],
      ["version", "Rails", "classes/Rails.html#method-c-version", "()", "<p>Returns the version of the currently loaded Rails as a string.\n"],
      ["version", "Rails::Generators::AppBase::GemfileEntry", "classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-version", "(name, version, comment = nil)", ""],
      ["version", "Rails::Generators::AppBase::GemfileEntry", "classes/Rails/Generators/AppBase/GemfileEntry.html#method-i-version", "()", ""],
      ["version_control", "Rails::AppBuilder", "classes/Rails/AppBuilder.html#method-i-version_control", "()", ""],
      ["video_path", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_path", "(source, options = {})", "<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],
      ["video_tag", "ActionView::Helpers::AssetTagHelper", "classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag", "(*sources)", "<p>Returns an HTML video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],
      ["video_url", "ActionView::Helpers::AssetUrlHelper", "classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_url", "(source, options = {})", "<p>Computes the full URL to a video asset in the public videos directory. This\nwill use <code>video_path</code> internally, …\n"],
      ["view_assigns", "AbstractController::Rendering", "classes/AbstractController/Rendering.html#method-i-view_assigns", "()", "<p>This method should return a hash with assigns. You can overwrite this\nconfiguration per controller. :api: …\n"],
      ["view_cache_dependencies", "AbstractController::Caching", "classes/AbstractController/Caching.html#method-i-view_cache_dependencies", "()", ""],
      ["view_cache_dependency", "AbstractController::Caching::ClassMethods", "classes/AbstractController/Caching/ClassMethods.html#method-i-view_cache_dependency", "(&dependency)", ""],
      ["view_context", "ActionView::Rendering", "classes/ActionView/Rendering.html#method-i-view_context", "()", "<p>An instance of a view class. The default view class is ActionView::Base.\n<p>The view class must have the …\n"],
      ["view_context_class", "ActionView::Rendering", "classes/ActionView/Rendering.html#method-i-view_context_class", "()", ""],
      ["view_context_class", "ActionView::Rendering::ClassMethods", "classes/ActionView/Rendering/ClassMethods.html#method-i-view_context_class", "()", ""],
      ["view_exists?", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-view_exists-3F", "(view_name)", "<p>Checks to see if the view <code>view_name</code> exists on the database.\n\n<pre><code>view_exists?(:ebooks)\n</code></pre>\n"],
      ["view_paths", "ActionView::ViewPaths::ClassMethods", "classes/ActionView/ViewPaths/ClassMethods.html#method-i-view_paths", "()", "<p>A list of all of the default view paths for this controller.\n"],
      ["view_paths=", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D", "(paths)", "<p>Whenever setting view paths, makes a copy so that we can manipulate them in\ninstance objects as we wish. …\n"],
      ["view_paths=", "ActionView::ViewPaths::ClassMethods", "classes/ActionView/ViewPaths/ClassMethods.html#method-i-view_paths-3D", "(paths)", "<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a PathSet is provided, use that; otherwise, process\nthe parameter …\n"],
      ["view_rendered?", "ActionView::TestCase::Behavior::RenderedViewsCollection", "classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-view_rendered-3F", "(view, expected_locals)", ""],
      ["view_renderer", "ActionView::Rendering", "classes/ActionView/Rendering.html#method-i-view_renderer", "()", "<p>Returns an object that is able to render templates. :api: private\n"],
      ["views", "ActiveRecord::ConnectionAdapters::SchemaStatements", "classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-views", "()", "<p>Returns an array of view names defined in the database.\n"],
      ["visit_Arel_Nodes_In", "ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor", "classes/ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html#method-i-visit_Arel_Nodes_In", "(*)", ""],
      ["visit_Arel_Nodes_SqlLiteral", "ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor", "classes/ActiveRecord/ConnectionAdapters/DetermineIfPreparableVisitor.html#method-i-visit_Arel_Nodes_SqlLiteral", "(*)", ""],
      ["wait", "ActiveSupport::LogSubscriber::TestHelper", "classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait", "()", "<p>Wait notifications to be published.\n"],
      ["wait", "ActiveSupport::Notifications::Fanout", "classes/ActiveSupport/Notifications/Fanout.html#method-i-wait", "()", "<p>This is a sync queue, so there is no waiting.\n"],
      ["warn", "ActiveSupport::Deprecation::Reporting", "classes/ActiveSupport/Deprecation/Reporting.html#method-i-warn", "(message = nil, callstack = nil)", "<p>Outputs a deprecation warning to the output configured by\n<code>ActiveSupport::Deprecation.behavior</code>.\n\n<pre><code>ActiveSupport::Deprecation.warn(&#39;something ...</code></pre>\n"],
      ["watch_namespaces", "ActiveSupport::Dependencies::WatchStack", "classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces", "(namespaces)", "<p>Add a set of modules to the watch stack, remembering the initial constants.\n"],
      ["watchable_dirs", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs", "()", "<p>Add directories that should be watched for change. The key of the hashes\nshould be directories and the …\n"],
      ["watchable_files", "Rails::Railtie::Configuration", "classes/Rails/Railtie/Configuration.html#method-i-watchable_files", "()", "<p>Add files that should be watched for change.\n"],
      ["watching?", "ActiveSupport::Dependencies::WatchStack", "classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watching-3F", "()", ""],
      ["weak_etag=", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-weak_etag-3D", "(weak_validators)", ""],
      ["weak_etag?", "ActionDispatch::Http::Cache::Response", "classes/ActionDispatch/Http/Cache/Response.html#method-i-weak_etag-3F", "()", "<p>True if an ETag is set and it&#39;s a weak validator (preceded with W/)\n"],
      ["week", "Numeric", "classes/Numeric.html#method-i-week", "()", ""],
      ["week_field", "ActionView::Helpers::FormHelper", "classes/ActionView/Helpers/FormHelper.html#method-i-week_field", "(object_name, method, options = {})", "<p>Returns a text_field of type “week”.\n\n<pre><code>week_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],
      ["week_field_tag", "ActionView::Helpers::FormTagHelper", "classes/ActionView/Helpers/FormTagHelper.html#method-i-week_field_tag", "(name, value = nil, options = {})", "<p>Creates a text field of type “week”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],
      ["weeks", "Numeric", "classes/Numeric.html#method-i-weeks", "()", "<p>Returns a Duration instance matching the number of weeks provided.\n\n<pre><code>2.weeks # =&gt; 2 weeks\n</code></pre>\n"],
      ["weeks_ago", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-weeks_ago", "(weeks)", "<p>Returns a new date/time the specified number of weeks ago.\n"],
      ["weeks_since", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-weeks_since", "(weeks)", "<p>Returns a new date/time the specified number of weeks in the future.\n"],
      ["where", "ActionCable::RemoteConnections", "classes/ActionCable/RemoteConnections.html#method-i-where", "(identifier)", ""],
      ["where", "ActiveRecord::QueryMethods", "classes/ActiveRecord/QueryMethods.html#method-i-where", "(opts = :chain, *rest)", "<p>Returns a new relation, which is the result of filtering the current\nrelation according to the conditions …\n"],
      ["where_values_hash", "ActiveRecord::Relation", "classes/ActiveRecord/Relation.html#method-i-where_values_hash", "(relation_table_name = table_name)", "<p>Returns a hash of where conditions.\n\n<pre><code>User.where(name: &#39;Oscar&#39;).where_values_hash\n# =&gt; {name: &quot;Oscar&quot;}\n</code></pre>\n"],
      ["with", "AbstractController::Railties::RoutesHelpers", "classes/AbstractController/Railties/RoutesHelpers.html#method-c-with", "(routes, include_path_helpers = true)", ""],
      ["with", "ActionMailer::Parameterized::ClassMethods", "classes/ActionMailer/Parameterized/ClassMethods.html#method-i-with", "(params)", "<p>Provide the parameters to the mailer in order to use them in the instance\nmethods and callbacks.\n\n<pre><code>InvitationsMailer.with(inviter: ...</code></pre>\n"],
      ["with_backend", "ActiveSupport::XmlMini", "classes/ActiveSupport/XmlMini.html#method-i-with_backend", "(name)", ""],
      ["with_connection", "ActiveRecord::ConnectionAdapters::ConnectionPool", "classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection", "()", "<p>If a connection obtained through #connection or #with_connection methods\nalready exists yield it to the …\n"],
      ["with_database_connections", "ActionCable::Server::Worker::ActiveRecordConnectionManagement", "classes/ActionCable/Server/Worker/ActiveRecordConnectionManagement.html#method-i-with_database_connections", "()", ""],
      ["with_default_scope", "ActionDispatch::Routing::Mapper::Base", "classes/ActionDispatch/Routing/Mapper/Base.html#method-i-with_default_scope", "(scope, &block)", ""],
      ["with_defaults", "ActionController::Renderer", "classes/ActionController/Renderer.html#method-i-with_defaults", "(defaults)", "<p>Create a new renderer for the same controller but with new defaults.\n"],
      ["with_fallbacks", "ActionView::LookupContext::ViewPaths", "classes/ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks", "()", "<p>Adds fallbacks to the view paths. Useful in cases when you are rendering a\n:file.\n"],
      ["with_indifferent_access", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access", "()", ""],
      ["with_indifferent_access", "ActiveSupport::HashWithIndifferentAccess", "classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access", "()", ""],
      ["with_indifferent_access", "Hash", "classes/Hash.html#method-i-with_indifferent_access", "()", "<p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its\nreceiver:\n\n<pre><code>{ a: 1 }.with_indifferent_access[&#39;a&#39;] ...</code></pre>\n"],
      ["with_local_cache", "ActiveSupport::Cache::Strategy::LocalCache", "classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache", "()", "<p>Use a local cache for the duration of block.\n"],
      ["with_lock", "ActiveRecord::Locking::Pessimistic", "classes/ActiveRecord/Locking/Pessimistic.html#method-i-with_lock", "(lock = true)", "<p>Wraps the passed block in a transaction, locking the object before\nyielding. You can pass the SQL locking …\n"],
      ["with_options", "Object", "classes/Object.html#method-i-with_options", "(options, &block)", "<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],
      ["with_routing", "ActionDispatch::Assertions::RoutingAssertions", "classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing", "()", "<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces @routes …\n"],
      ["with_scope_level", "ActionDispatch::Routing::Mapper::Resources", "classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level", "(kind)", ""],
      ["with_warnings", "Kernel", "classes/Kernel.html#method-i-with_warnings", "(flag)", "<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],
      ["without", "Array", "classes/Array.html#method-i-without", "(*elements)", "<p>Returns a copy of the Array without the specified elements.\n\n<pre><code>people = [&quot;David&quot;, &quot;Rafael&quot;, &quot;Aaron&quot;, &quot;Todd&quot;] ...</code></pre>\n"],
      ["without", "Enumerable", "classes/Enumerable.html#method-i-without", "(*elements)", "<p>Returns a copy of the enumerable without the specified elements.\n\n<pre><code>[&quot;David&quot;, &quot;Rafael&quot;, &quot;Aaron&quot;, &quot;Todd&quot;].without ...</code></pre>\n"],
      ["without_modules", "ActionController::API", "classes/ActionController/API.html#method-c-without_modules", "(*modules)", "<p>Shortcut helper that returns all the ActionController::API modules except\nthe ones passed as arguments: …\n"],
      ["without_modules", "ActionController::Base", "classes/ActionController/Base.html#method-c-without_modules", "(*modules)", "<p>Shortcut helper that returns all the modules included in\nActionController::Base except the ones passed …\n"],
      ["word_wrap", "ActionView::Helpers::TextHelper", "classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap", "(text, line_width: 80, break_sequence: \"\\n\")", "<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],
      ["worker_pool", "ActionCable::Server::Base", "classes/ActionCable/Server/Base.html#method-i-worker_pool", "()", "<p>The worker pool is where we run connection callbacks and channel actions.\nWe do as little as possible …\n"],
      ["wrap", "ActiveSupport::ExecutionWrapper", "classes/ActiveSupport/ExecutionWrapper.html#method-c-wrap", "()", "<p>Perform the work in the supplied block as an execution.\n"],
      ["wrap", "ActiveSupport::Reloader", "classes/ActiveSupport/Reloader.html#method-c-wrap", "()", "<p>Run the supplied block as a work unit, reloading code as needed\n"],
      ["wrap", "Array", "classes/Array.html#method-c-wrap", "(object)", "<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],
      ["wrap_parameters", "ActionController::ParamsWrapper::ClassMethods", "classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-wrap_parameters", "(name_or_model_or_options, options = {})", "<p>Sets the name of the wrapper key, or the model which\n<code>ParamsWrapper</code> would use to determine the attribute …\n"],
      ["wrap_with_namespace", "Rails::Generators::NamedBase", "classes/Rails/Generators/NamedBase.html#method-i-wrap_with_namespace", "(content)", ""],
      ["write", "ActionController::Live::SSE", "classes/ActionController/Live/SSE.html#method-i-write", "(object, options = {})", ""],
      ["write", "ActionDispatch::RailsEntityStore", "classes/ActionDispatch/RailsEntityStore.html#method-i-write", "(body)", ""],
      ["write", "ActionDispatch::RailsMetaStore", "classes/ActionDispatch/RailsMetaStore.html#method-i-write", "(key, value)", ""],
      ["write", "ActionDispatch::Response", "classes/ActionDispatch/Response.html#method-i-write", "(string)", ""],
      ["write", "ActiveRecord::Migration", "classes/ActiveRecord/Migration.html#method-i-write", "(text = \"\")", ""],
      ["write", "ActiveSupport::Cache::Store", "classes/ActiveSupport/Cache/Store.html#method-i-write", "(name, value, options = nil)", "<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],
      ["write_attribute", "ActiveRecord::AttributeMethods::Write", "classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute", "(attr_name, value)", "<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for Integer and …\n"],
      ["write_entry", "ActiveSupport::Cache::Strategy::LocalCache::LocalStore", "classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry", "(key, value, options)", ""],
      ["write_fragment", "AbstractController::Caching::Fragments", "classes/AbstractController/Caching/Fragments.html#method-i-write_fragment", "(key, content, options = nil)", "<p>Writes <code>content</code> to the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats).\n"],
      ["write_session", "ActionDispatch::Session::CacheStore", "classes/ActionDispatch/Session/CacheStore.html#method-i-write_session", "(env, sid, session, options)", "<p>Set a session in the cache.\n"],
      ["write_store_attribute", "ActiveRecord::Store", "classes/ActiveRecord/Store.html#method-i-write_store_attribute", "(store_attribute, key, value)", ""],
      ["writes_pending", "ActionCable::Connection::StreamEventLoop", "classes/ActionCable/Connection/StreamEventLoop.html#method-i-writes_pending", "(io)", ""],
      ["xhr?", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-xhr-3F", "()", ""],
      ["xml", "ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods", "classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-xml", "(*args, **options)", ""],
      ["xml_http_request?", "ActionDispatch::Request", "classes/ActionDispatch/Request.html#method-i-xml_http_request-3F", "()", "<p>Returns true if the “X-Requested-With” header contains “XMLHttpRequest”\n(case-insensitive), …\n"],
      ["xmlschema", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-xmlschema", "(fraction_digits = 0)", "<p>Returns a string of the object&#39;s date and time in the ISO 8601 standard\nformat.\n\n<pre><code>Time.zone.now.xmlschema ...</code></pre>\n"],
      ["xmlschema", "Date", "classes/Date.html#method-i-xmlschema", "()", "<p>Returns a string which represents the time in used time zone as DateTime\ndefined by XML Schema:\n\n<pre><code>date = ...</code></pre>\n"],
      ["year", "Integer", "classes/Integer.html#method-i-year", "()", ""],
      ["years", "Integer", "classes/Integer.html#method-i-years", "()", ""],
      ["years_ago", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-years_ago", "(years)", "<p>Returns a new date/time the specified number of years ago.\n"],
      ["years_since", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-years_since", "(years)", "<p>Returns a new date/time the specified number of years in the future.\n"],
      ["yesterday", "ActiveSupport::TimeZone", "classes/ActiveSupport/TimeZone.html#method-i-yesterday", "()", "<p>Returns the previous date in this time zone.\n"],
      ["yesterday", "Date", "classes/Date.html#method-c-yesterday", "()", "<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s\ndate).\n"],
      ["yesterday", "DateAndTime::Calculations", "classes/DateAndTime/Calculations.html#method-i-yesterday", "()", "<p>Returns a new date/time representing yesterday.\n"],
      ["yield_shares", "ActiveSupport::Concurrency::ShareLock", "classes/ActiveSupport/Concurrency/ShareLock.html#method-i-yield_shares", "(purpose: nil, compatible: [], block_share: false)", "<p>Temporarily give up all held Share locks while executing the supplied\nblock, allowing any <code>compatible</code> …\n"],
      ["zone", "ActiveSupport::TimeWithZone", "classes/ActiveSupport/TimeWithZone.html#method-i-zone", "()", "<p>Returns the time zone abbreviation.\n\n<pre><code>Time.zone = &#39;Eastern Time (US &amp; Canada)&#39;   # =&gt; &quot;Eastern Time (US ...\n</code></pre>\n"],
      ["zone", "Time", "classes/Time.html#method-c-zone", "()", "<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],
      ["zone=", "Time", "classes/Time.html#method-c-zone-3D", "(time_zone)", "<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],
      ["README", "", "files/actioncable/README_md.html", "", "<p>Action Cable – Integrated WebSockets for Rails\n<p>Action Cable seamlessly integrates WebSockets with the …\n"],
      ["README", "", "files/actionmailer/README_rdoc.html", "", "<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email service …\n"],
      ["README", "", "files/actionpack/README_rdoc.html", "", "<p>Action Pack – From request to response\n<p>Action Pack is a framework for handling and responding to web …\n"],
      ["README", "", "files/actionview/README_rdoc.html", "", "<p>Action View\n<p>Action View is a framework for handling view template lookup and rendering,\nand provides view …\n"],
      ["README", "", "files/activejob/README_md.html", "", "<p>Active Job – Make work happen later\n<p>Active Job is a framework for declaring jobs and making them run …\n"],
      ["README", "", "files/activemodel/README_rdoc.html", "", "<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],
      ["README", "", "files/activerecord/README_rdoc.html", "", "<p>Active Record – Object-relational mapping in Rails\n<p>Active Record connects classes to relational database …\n"],
      ["README", "", "files/activesupport/README_rdoc.html", "", "<p>Active Support – Utility classes and Ruby extensions from Rails\n<p>Active Support is a collection of utility …\n"],
      ["RDOC_MAIN", "", "files/railties/RDOC_MAIN_rdoc.html", "", "<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"],
      ["README", "", "files/railties/README_rdoc.html", "", "<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. …\n"]
  ]
}